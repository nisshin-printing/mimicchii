{"version":3,"sources":["svg4everybody.js"],"names":["root","factory","define","amd","svg4everybody","exports","_typeof","module","undefined","embed","target","createDocumentFragment","viewBox","svg","getAttribute","setAttribute","clone","childNodes","fragment","appendChild","firstChild","loadreadystatechange","xhr","readyState","cachedDocument","_cachedDocument","document","implementation","createHTMLDocument","innerHTML","responseText","_cachedTarget","_embeds","splice","map","item","id","getElementById","rawopts","oninterval","uses","length","use","index","parentNode","test","nodeName","src","polyfill","opts","validate","url","srcSplit","shift","join","requests","XMLHttpRequest","open","send","push","requestAnimationFrame","Object","newerIEUA","webkitUA","olderEdgeUA","navigator","userAgent","match","window","setTimeout","getElementsByTagName"],"mappings":"8MAAC,SAASA,EAAMC,GACZ,kBAAqBC,SAAUA,OAAOC,IACtCD,UAAW,WACP,MAAOF,GAAKI,cAAgBH,MAHnC,WAAA,mBAAwBI,SAAxB,YAAAC,QAAwBD,UAAAE,OAAAF,QAAAJ,IAAAD,EAAAI,cAAAH,KAAxBO,OACG,WAEI,QAAAC,GAAOT,EAAKI,GAHnB,GAAAM,EAKO,CAEJ,GAASD,GAAWC,SAAQC,yBAAAC,GAAAC,EAAAC,aAAA,YAAAJ,EAAAI,aAAA,UAEpBJ,IAAQG,EAAAE,aAAA,UAAAH,EAER,KAAA,GAAkDA,GAAAA,EAAeE,WAAAA,GAAaE,EAAAC,WAAcP,QAC5FQ,EAAAC,YAAAH,EAAAI,WAGAP,GAAAM,YAAKD,IAGJ,QAAAG,GAAAC,GAEDT,EAAAA,mBAAgBK,WAEvB,GAAA,IAAAI,EAAAC,WAAA,CAEG,GAAAC,GAAAF,EAAAG,eAEID,KAAAA,EAAAF,EAAAG,gBAAAC,SAAAC,eAAAC,mBAAA,IACIJ,EAAUD,KAAdM,UAA0BP,EAAAQ,aAAAR,EAAAS,kBACtBT,EAAAU,QAAAC,OAAA,GAAAC,IAAA,SAAAC,GAEA,GAAAzB,GAAAY,EAAAS,cAAAI,EAAAC,GAGIJ,KAAQC,EAAUC,EAAIH,cAAeI,EAAAC,IAAAZ,EAAAa,eAAAF,EAAAC,KAErC3B,EAAIC,EAAAA,IAASY,OAIbb,EAAAA,qBAEP,QAAAL,GAAAkC,GACJ,QAAEC,KAEN,IACD,GAASnC,GAAAA,EAAckC,EAAvBE,EAAgCC,QAAA,CAExB,GAAAC,GAAAF,EAAAG,GAAA9B,EAAA6B,EAAAE,UACA,IAAK/B,GAAA,OAAAgC,KAAAhC,EAAAiC,UAAA,CACDH,GAAQI,GAAGJ,EAAAA,aADf,aAEI,IAAAK,KAAAC,EAAAC,UAAAD,EAAAC,SAAAH,EAAAlC,EAAA6B,IAAA,CACuB7B,EAAM6B,YAA7BA,EAEQK,IAAAA,GAAUjC,EAAAA,MAAa,KAAAqC,EAA3BC,EAAAC,QAAAjB,EAAAgB,EAAAE,KAAA,IAEI,IAAAH,EAAAV,OAAA,CAEA,GAAAnB,GAAAiC,EAAAJ,EAC+BA,KAAMC,EAAAA,EAArCD,GAAA,GAAAK,gBAAAlC,EAAAmC,KAAA,MAAAN,GAAA7B,EAAAoC,OAAuDtB,EAAAA,YACvDd,EAAAU,QAAA2B,MACQlB,IAAAA,EACJL,GAAAA,IAEAf,EAAAC,OAIIT,GAAAA,EAAKA,SADQwB,eAAAD,WAMjBO,EAIXiB,EAAMrB,EAAA,IAEH,GAAAS,GAAEL,EAAFkB,OAAAvB,GAAAwB,EAAA,0CAAAC,EAAA,yBAAAC,EAAA,qBACHhB,GAAA,YAAAC,GAAAA,EAAAD,SAAAc,EAAAjB,KAAAoB,UAAAC,aAAAD,UAAAC,UAAAC,MAAAH,QAAA,GAAA,QAAAC,UAAAC,UAAAC,MAAAJ,QAAA,GAAA,GAEL,IAAAR,MAAAK,EAAAQ,OAAAR,uBAAAS,WAAA7B,EAAAd,SAAA4C,qBAAA,MAEHtB,IAAAT,IACD,MAAAnC","file":"svg4everybody.min.js","sourcesContent":["!function(root, factory) {\n    \"function\" == typeof define && define.amd ? // AMD. Register as an anonymous module unless amdModuleId is set\n    define([], function() {\n        return root.svg4everybody = factory();\n    }) : \"object\" == typeof exports ? module.exports = factory() : root.svg4everybody = factory();\n}(this, function() {\n    /*! svg4everybody v2.1.0 | github.com/jonathantneal/svg4everybody */\n    function embed(svg, target) {\n        // if the target exists\n        if (target) {\n            // create a document fragment to hold the contents of the target\n            var fragment = document.createDocumentFragment(), viewBox = !svg.getAttribute(\"viewBox\") && target.getAttribute(\"viewBox\");\n            // conditionally set the viewBox on the svg\n            viewBox && svg.setAttribute(\"viewBox\", viewBox);\n            // copy the contents of the clone into the fragment\n            for (// clone the target\n            var clone = target.cloneNode(!0); clone.childNodes.length; ) {\n                fragment.appendChild(clone.firstChild);\n            }\n            // append the fragment into the svg\n            svg.appendChild(fragment);\n        }\n    }\n    function loadreadystatechange(xhr) {\n        // listen to changes in the request\n        xhr.onreadystatechange = function() {\n            // if the request is ready\n            if (4 === xhr.readyState) {\n                // get the cached html document\n                var cachedDocument = xhr._cachedDocument;\n                // ensure the cached html document based on the xhr response\n                cachedDocument || (cachedDocument = xhr._cachedDocument = document.implementation.createHTMLDocument(\"\"), \n                cachedDocument.body.innerHTML = xhr.responseText, xhr._cachedTarget = {}), // clear the xhr embeds list and embed each item\n                xhr._embeds.splice(0).map(function(item) {\n                    // get the cached target\n                    var target = xhr._cachedTarget[item.id];\n                    // ensure the cached target\n                    target || (target = xhr._cachedTarget[item.id] = cachedDocument.getElementById(item.id)), \n                    // embed the target into the svg\n                    embed(item.svg, target);\n                });\n            }\n        }, // test the ready state change immediately\n        xhr.onreadystatechange();\n    }\n    function svg4everybody(rawopts) {\n        function oninterval() {\n            // while the index exists in the live <use> collection\n            for (// get the cached <use> index\n            var index = 0; index < uses.length; ) {\n                // get the current <use>\n                var use = uses[index], svg = use.parentNode;\n                if (svg && /svg/i.test(svg.nodeName)) {\n                    var src = use.getAttribute(\"xlink:href\");\n                    if (polyfill && (!opts.validate || opts.validate(src, svg, use))) {\n                        // remove the <use> element\n                        svg.removeChild(use);\n                        // parse the src and get the url and id\n                        var srcSplit = src.split(\"#\"), url = srcSplit.shift(), id = srcSplit.join(\"#\");\n                        // if the link is external\n                        if (url.length) {\n                            // get the cached xhr request\n                            var xhr = requests[url];\n                            // ensure the xhr request exists\n                            xhr || (xhr = requests[url] = new XMLHttpRequest(), xhr.open(\"GET\", url), xhr.send(), \n                            xhr._embeds = []), // add the svg and id as an item to the xhr embeds list\n                            xhr._embeds.push({\n                                svg: svg,\n                                id: id\n                            }), // prepare the xhr ready state change event\n                            loadreadystatechange(xhr);\n                        } else {\n                            // embed the local id into the svg\n                            embed(svg, document.getElementById(id));\n                        }\n                    }\n                } else {\n                    // increase the index when the previous value was not \"valid\"\n                    ++index;\n                }\n            }\n            // continue the interval\n            requestAnimationFrame(oninterval, 67);\n        }\n        var polyfill, opts = Object(rawopts), newerIEUA = /\\bTrident\\/[567]\\b|\\bMSIE (?:9|10)\\.0\\b/, webkitUA = /\\bAppleWebKit\\/(\\d+)\\b/, olderEdgeUA = /\\bEdge\\/12\\.(\\d+)\\b/;\n        polyfill = \"polyfill\" in opts ? opts.polyfill : newerIEUA.test(navigator.userAgent) || (navigator.userAgent.match(olderEdgeUA) || [])[1] < 10547 || (navigator.userAgent.match(webkitUA) || [])[1] < 537;\n        // create xhr requests object\n        var requests = {}, requestAnimationFrame = window.requestAnimationFrame || setTimeout, uses = document.getElementsByTagName(\"use\");\n        // conditionally start the interval if the polyfill is active\n        polyfill && oninterval();\n    }\n    return svg4everybody;\n});"],"sourceRoot":"/source/"}