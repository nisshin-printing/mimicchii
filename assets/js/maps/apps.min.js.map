{"version":3,"sources":["apps.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","global","_interopRequireDefault","obj","__esModule","default","_jquery","window","_jquery2","jQuery","this","self","./parts/contact-open","./parts/foundation","./parts/headroom","./parts/side-navigation","2","$","load","addClass","removeClass","btnMenu","click","bgChange","bgCgClass","toggleClass","hasClass","matchMedia","each","ele","delayAni","setTimeout","3","document","foundation","../vendor/foundation.js","4","Headroom","headerMain","background","querySelector","container","nav","options","classes","initial","pinned","unpinned","top","notTop","bottom","notBottom","headroomContainer","headroomBackground","headroomNav","init","matches","destroy","../vendor/headroom","5","ready","6","_classCallCheck","instance","Constructor","TypeError","_typeof","Symbol","iterator","constructor","functionName","fn","undefined","Function","prototype","name","funcNameRegex","results","exec","toString","trim","parseValue","str","test","isNaN","parseFloat","hyphenate","replace","toLowerCase","FOUNDATION_VERSION","Foundation","version","_plugins","_uuids","rtl","attr","plugin","_plugin","className","attrName","registerPlugin","pluginName","uuid","GetYoDigits","$element","data","trigger","push","unregisterPlugin","splice","indexOf","removeAttr","removeData","prop","reInit","plugins","isJQ","_init","type","_this","fns","object","plgs","forEach","p","string","Object","keys","err","console","error","namespace","Math","round","pow","random","slice","reflow","elem","$elem","find","addBack","$el","opts","warn","split","opt","map","el","er","getFnName","transitionend","end","transitions","transition","WebkitTransition","MozTransition","OTransition","createElement","style","triggerHandler","util","throttle","func","delay","timer","context","args","arguments","apply","method","$meta","$noJS","appendTo","head","MediaQuery","Array","plugClass","ReferenceError","Date","now","getTime","vendors","requestAnimationFrame","vp","cancelAnimationFrame","navigator","userAgent","lastTime","callback","nextTime","max","clearTimeout","performance","start","bind","oThis","aArgs","fToBind","fNOP","fBound","concat","ImNotTouchingYou","element","parent","lrOnly","tbOnly","left","right","eleDims","GetDimensions","parDims","offset","height","width","windowDims","allDirs","rect","getBoundingClientRect","parRect","parentNode","winRect","body","winY","pageYOffset","winX","pageXOffset","parentDims","GetOffsets","anchor","position","vOffset","hOffset","isOverflow","$eleDims","$anchorDims","Box","getKeyCodes","kcs","k","kc","keyCodes","9","13","27","32","37","38","39","40","commands","Keyboard","parseKey","event","key","which","keyCode","String","fromCharCode","toUpperCase","shiftKey","ctrlKey","altKey","handleKey","component","functions","cmds","command","commandList","ltr","extend","returnValue","handled","unhandled","findFocusable","filter","is","register","componentName","parseStyleToObject","styleObject","reduce","ret","param","parts","val","decodeURIComponent","hasOwnProperty","isArray","queries","current","namedQueries","extractedStyles","css","value","_getCurrentSize","_watcher","atLeast","size","query","get","matched","on","newSize","currentSize","styleMedia","media","script","getElementsByTagName","info","id","insertBefore","getComputedStyle","currentStyle","matchMedium","text","styleSheet","cssText","textContent","Move","duration","move","ts","prog","anim","animate","isIn","animation","cb","finish","hide","reset","transitionDuration","initClass","activeClass","eq","initClasses","activeClasses","show","offsetWidth","one","Motion","animateIn","animateOut","Nest","Feather","menu","items","role","subMenuClass","subItemClass","hasSubClass","$item","$sub","children","aria-haspopup","aria-expanded","aria-label","data-submenu","aria-hidden","Burn","Timer","nameSpace","remain","isPaused","restart","infinite","pause","onImagesLoaded","images","singleImageLoaded","unloaded","complete","naturalWidth","onTouchEnd","removeEventListener","onTouchMove","isMoving","spotSwipe","preventDefault","dir","x","touches","pageX","dx","pageY","startPosX","elapsedTime","startTime","abs","moveThreshold","timeThreshold","onTouchStart","startPosY","addEventListener","enabled","documentElement","special","swipe","setup","noop","addTouch","handleTouch","simulatedEvent","changedTouches","first","eventTypes","touchstart","touchmove","touchend","MouseEvent","bubbles","cancelable","screenX","screenY","clientX","clientY","createEvent","initMouseEvent","target","dispatchEvent","checkListeners","eventsListener","resizeListener","scrollListener","closemeListener","yetiBoxes","plugNames","listeners","join","off","pluginId","not","debounce","$nodes","MutationObserver","nodes","querySelectorAll","listeningElementsMutation","mutationRecordsList","$target","elementObserver","observe","attributes","childList","characterData","subtree","attributeFilter","prefixes","triggers","stopPropagation","fadeOut","IHearYou","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","defineProperty","protoProps","staticProps","Abide","defaults","$inputs","_events","_this2","resetForm","validateForm","validateOn","validateInput","liveValidate","isGood","checked","$error","siblings","formErrorSelector","$label","closest","$els","_this3","labels","findLabel","$formError","findFormError","labelErrorClass","formErrorClass","inputErrorClass","groupName","$labels","findRadioLabels","$formErrors","removeRadioErrorClasses","clearRequire","requiredCheck","validated","customValidator","validator","equalTo","validateRadio","validateText","matchValidation","validators","goodToGo","message","acc","noError","pattern","inputText","valid","patterns","RegExp","$group","required","_this4","clear","v","$form","removeErrorClasses","alpha","alpha_numeric","integer","number","card","cvv","email","url","domain","datetime","date","time","dateISO","month_day_year","day_month_year","color","Accordion","ENTER","SPACE","ARROW_DOWN","ARROW_UP","$tabs","idx","$content","linkId","aria-controls","aria-selected","aria-labelledby","$initActive","down","$tabContent","allowAllClosed","up","toggle","next","$a","focus","multiExpand","previous","prev","firstTime","$currentActive","slideDown","slideSpeed","$aunts","canClose","slideUp","stop","AccordionMenu","ARROW_RIGHT","ARROW_LEFT","ESCAPE","TAB","SHIFT_TAB","aria-multiselectable","multiOpen","$menuLinks","subId","isActive","initPanes","$submenu","$prevElement","$nextElement","$elements","min","parents","open","close","closeAll","hideAll","stopImmediatePropagation","parentsUntil","add","$menus","Drilldown","$submenuAnchors","$submenus","$menuItems","_prepareMenu","_keyboardEvents","$link","parentLink","clone","prependTo","wrap","tabindex","$menu","$back","prepend","backButton","_back","$wrapper","wrapper","_getMaxDims","_show","closeOnClick","$body","contains","_hideAll","_hide","blur","result","numOfElems","unwrap","remove","Dropdown","$id","$anchor","data-is-focus","data-yeti-box","positionClass","getPositionClass","counter","usedPositions","data-resize","verticalPosition","match","horizontalPosition","classChanged","direction","_reposition","_setPosition","open.zf.trigger","close.zf.trigger","toggle.zf.trigger","resizeme.zf.trigger","hover","timeout","hoverDelay","hoverPane","visibleFocusableElements","tab_forward","trapFocus","tab_backward","autoFocus","$focusable","_addBodyHandler","curPositionClass","DropdownMenu","subs","verticalClass","rightClass","alignment","changed","hasTouch","ontouchstart","parClass","handleClickFn","hasSub","hasClicked","clickOpen","forceFollow","disableHover","autoclose","closingTime","isTab","index","nextSibling","prevSibling","openSub","closeSub","$sibs","oldClass","$parentLi","$toClose","somethingToClose","data-is-click","Equalizer","eqId","$watched","hasNested","isNested","isOn","_bindHandler","onResizeMeBound","_onResizeMe","onPostEqualizedBound","_onPostEqualized","tooSmall","imgs","equalizeOn","_checkMQ","_reflow",".zf.equalizer","_pauseEvents","equalizeOnStack","_isStacked","equalizeByRow","getHeightsByRow","applyHeightByRow","getHeights","applyHeight","heights","len","offsetHeight","lastElTopOffset","groups","group","elOffsetTop","j","ln","groupsILength","lenJ","Interchange","rules","currentPath","_addBreakpoints","_generateRules","rule","path","SPECIAL_QUERIES","rulesList","nodeName","background-image","response","html","landscape","portrait","retina","Magellan","$targets","$links","data-scroll","$active","scrollPos","parseInt","points","winHeight","innerHeight","clientHeight","docHeight","scrollHeight","$tar","pt","threshold","targetPoint","animationDuration","easing","animationEasing","deepLinking","location","hash","scrollToLoc","calcPoints","_updateActive","scrollme.zf.trigger","arrival","getAttribute","loc","barOffset","scrollTop","curIdx","winPos","isDown","curVisible","history","pushState","OffCanvas","$lastTrigger","$triggers","$exiter","exiter","setAttribute","append","isRevealed","revealClass","revealOn","_setMQChecker","transitionTime","keydown.zf.offcanvas","_handleKeyboard","click.zf.offcanvas","reveal","$closer","forceTop","_trapFocus","focusable","last","keycode","Orbit","containerClass","$slides","slideClass","$images","initActive","useMUI","_prepareForOrbit","bullets","_loadBullets","autoPlay","geoSync","accessible","$bullets","boxOfBullets","timerDelay","changeSlide","_setWrapperHeight","_setSlideHeight","temp","display","pauseOnHover","navButtons","$controls","nextClass","prevClass","$slide","isLTR","chosenSlide","$curSlide","$newSlide","$firstSlide","$lastSlide","dirIn","dirOut","infiniteWrap","_updateBullets","$oldBullet","span","detach","animInFromRight","animOutToRight","animInFromLeft","animOutToLeft","ResponsiveMenu","currentMq","currentPlugin","rulesTree","ruleSize","rulePlugin","MenuPlugins","isEmptyObject","_checkMediaQueries","matchedMq","cssClass","dropdown","drilldown","accordion","ResponsiveToggle","targetID","$targetMenu","$toggler","_update","_updateMqHandler","toggleMenu","hideFor","iPhoneSniff","androidSniff","mobileSniff","Reveal","cached","mq","isMobile","fullScreen","overlay","$overlay","_makeOverlay","deepLink","outerWidth","outerHeight","margin","_updatePosition","_handleState","visibility","multipleOpened","animationIn","afterAnimationFocus","log","focusableElements","showDelay","originalScrollPos","_extraHandlers","closeOnEsc","finishUp","animationOut","hideDelay","resetOnClose","replaceState","title","pathname","btmOffsetPct","percent","frac","num","absPosition","$handle","clickPos","Slider","SHIFT_ARROW_RIGHT","SHIFT_ARROW_UP","SHIFT_ARROW_DOWN","SHIFT_ARROW_LEFT","inputs","handles","$input","$fill","vertical","isDbl","disabled","disabledClass","binding","_setInitAttr","doubleSided","$handle2","$input2","_setHandlePos","initialStart","initialEnd","$hndl","noInvert","h2Val","step","h1Val","vert","hOrW","lOrT","handleDim","elemDim","pctOfBar","toFixed","pxToMove","movement","decimal","_setValues","dim","isLeftHndl","handlePct","handlePos","moveTime","changedDelay","aria-valuemax","aria-valuemin","aria-valuenow","aria-orientation","hasVal","_adjustValue","eventOffset","barDim","windowScroll","scrollLeft","elemOffset","barXY","eventFromBar","offsetPct","firstHndlPos","secndHndlPos","prev_val","next_val","div","curHandle","_handleEvent","clickSelect","draggable","currentTarget","newValue","_$handle","oldValue","decrease","increase","decrease_fast","increase_fast","invertVertical","emCalc","em","fontSize","Sticky","$parent","wasWrapped","$container","wrapInner","stickyClass","scrollCount","checkEvery","isStuck","_parsePoints","_setSizes","_calc","reverse","topAnchor","btm","btmAnchor","pts","breaks","place","canStick","_pauseListeners","checkSizes","scroll","topPoint","bottomPoint","_setSticky","_removeSticky","stickTo","mrgn","notStuckTo","isTop","stickToTop","anchorPt","anchorHeight","elemHeight","topOrBottom","stickyOn","newElemWidth","comp","pdng","max-width","newContainerHeight","containerHeight","_setBreakPoints","mTop","marginTop","mBtm","marginBottom","Tabs","$tabTitles","linkClass","matchHeight","_setHeight","_addKeyHandler","_addClickHandler","_setHeightMqHandler","_handleTabChange","wrapOnKeys","$tabLink","$targetContent","$oldTab","idStr","panelClass","panel","Toggler","input","_updateARIA","Tooltip","isClick","elemId","_getPositionClass","tipText","template","_buildTemplate","aria-describedby","data-toggle","triggerClass","templateClasses","tooltipClass","$template","data-is-active","$tipDims","showOn","fadeIn","fadeInDuration","fadeOutDuration","isFocus","disableForTouch","touchCloseText","7","root","factory","define","amd","Debouncer","ticking","isDOMElement","nodeType","replacement","normalizeTolerance","lastKnownScrollY","tolerance","scroller","initialised","onPin","onUnpin","onTop","onNotTop","onBottom","onNotBottom","features","classList","rAF","webkitRequestAnimationFrame","mozRequestAnimationFrame","update","requestTick","rafCallback","handleEvent","cutsTheMustard","debouncer","attachEvent","getScrollY","unpin","pin","getViewportHeight","getElementPhysicalHeight","elm","getScrollerPhysicalHeight","getDocumentHeight","getElementHeight","getScrollerHeight","isOutOfBounds","currentScrollY","pastTop","pastBottom","toleranceExceeded","shouldUnpin","scrollingDown","pastOffset","shouldPin","scrollingUp","scrollDirection"],"mappings":"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","file":"apps.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar _jquery = (typeof window !== \"undefined\" ? window['jQuery'] : typeof global !== \"undefined\" ? global['jQuery'] : null);\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nrequire('./parts/headroom');\n\nrequire('./parts/contact-open');\n\nrequire('./parts/side-navigation');\n\nrequire('./parts/foundation');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nwindow.jQuery = _jquery2.default;\n/*\r\n * Parts\r\n */\n/*\r\n Global\r\n */\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"./parts/contact-open\":2,\"./parts/foundation\":3,\"./parts/headroom\":4,\"./parts/side-navigation\":5}],2:[function(require,module,exports){\n'use strict';\n\n!function ($) {\n\t'use strict';\n\n\t// Hide for Loading Effects.\n\n\t$(window).load(function () {\n\t\t$('#loader').addClass('animated');\n\t\t$('body').addClass('is-loaded').removeClass('is-loading');\n\t});\n\n\t/*\r\n * Function about Write Fullscreen Contact Form Text.\r\n  * Functions\r\n  */\n\tvar content = $('.c-contact_content'),\n\t    contact = $('#js-contact'),\n\t    btnMenu = $('#js-contact .js-contact-step');\n\n\t// Get greeting time.\n\tfunction getGreetingTime() {\n\t\tvar now = new Date(),\n\t\t    hours = now.getHours(),\n\t\t    greet = null;\n\t\tif (6 >= hours) {\n\t\t\tgreet = 'morning';\n\t\t} else if (11 >= hours) {\n\t\t\tgreet = 'afternoon';\n\t\t} else if (17 >= hours) {\n\t\t\tgreet = 'evening';\n\t\t} else {\n\t\t\tgreet = 'night';\n\t\t}\n\t\treturn greet;\n\t}\n\n\t// Get title message at Contact-Form.\n\tfunction contactMessage() {\n\t\tvar greet = getGreetingTime(),\n\t\t    textData = 'greeting-' + greet,\n\t\t    cT = contact.data(textData);\n\t\treturn cT;\n\t}\n\n\t// \n\t// Click Button about Contact Form.\n\t$('#js-contact-open').click(function () {\n\t\tvar bgChange = $('body, #header-main .js-header-background, #header-main .js-header-nav'),\n\t\t    bgCgClass = 'has-contact-open u-background u-alt-background';\n\n\t\t// Add toggle class to \"*-background\"\n\t\tbgChange.toggleClass(bgCgClass);\n\n\t\t// Change class of Headroom added class.\n\t\tif ($('body').hasClass('has-contact-open') && window.matchMedia(\"(max-width: 1023px)\")) {\n\t\t\t$('#header-main .js-container').removeClass('is-pinned').addClass('is-unpinned');\n\t\t}\n\t\tif (window.matchMedia(\"(min-width: 1024px)\")) {\n\t\t\t$('#header-main .js-header-background, #header-main .js-header-nav').removeClass('is-unpinned').addClass('is-pinned');\n\t\t}\n\n\t\t// toggle class to \".js-contact-step\"\n\t\tbtnMenu.each(function (i, ele) {\n\t\t\tvar delayAni = 100 * i;\n\t\t\tsetTimeout(function () {\n\t\t\t\tele.toggleClass('is-active');\n\t\t\t}, delayAni);\n\t\t});\n\t});\n}(jQuery);\n\n},{}],3:[function(require,module,exports){\n'use strict';\n\nvar foundation = require('../vendor/foundation.js');\n(function ($) {\n\t'use strict';\n\n\t$(document).foundation();\n})(jQuery);\n\n},{\"../vendor/foundation.js\":6}],4:[function(require,module,exports){\n'use strict';\n\nvar Headroom = require('../vendor/headroom');\n\n// Headroom.js\nvar headerMain = {\n\tele: {\n\t\tbackground: document.querySelector('#header-main .js-header-background'),\n\t\tcontainer: document.querySelector('#header-main .js-header-container'),\n\t\tnav: document.querySelector('#header-main .js-header-nav')\n\t},\n\toptions: {\n\t\tclasses: {\n\t\t\tinitial: 'js-headroom',\n\t\t\tpinned: 'is-pinned',\n\t\t\tunpinned: 'is-unpinned',\n\t\t\ttop: 'is-top',\n\t\t\tnotTop: 'is-not-top',\n\t\t\tbottom: false,\n\t\t\tnotBottom: false\n\t\t}\n\t}\n};\nvar headroomContainer = new Headroom(headerMain.ele.container, headerMain.options),\n    headroomBackground = new Headroom(headerMain.ele.background, headerMain.options),\n    headroomNav = new Headroom(headerMain.ele.nav, headerMain.options);\nheadroomBackground.init();\nif (window.matchMedia(\"(max-width: 1023px)\").matches) {\n\theadroomNav.destroy();\n\theadroomContainer.init();\n} else if (window.matchMedia(\"(min-width: 1024px)\").matches) {\n\theadroomContainer.destroy();\n\theadroomNav.init();\n}\n\n},{\"../vendor/headroom\":7}],5:[function(require,module,exports){\n'use strict';\n\n!function ($) {\n\t'use strict';\n\n\t$(document).ready(function () {\n\t\t$('#js-nav-main-button').click(function () {\n\t\t\t$('body').toggleClass('has-nav-open');\n\t\t});\n\t});\n}(jQuery);\n\n},{}],6:[function(require,module,exports){\n'use strict';var _typeof=typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol?\"symbol\":typeof obj;};!function($){\"use strict\";var FOUNDATION_VERSION='6.2.3';// Global Foundation object\n// This is attached to the window, or used as a module for AMD/Browserify\nvar Foundation={version:FOUNDATION_VERSION,/**\n     * Stores initialized plugins.\n     */_plugins:{},/**\n     * Stores generated unique ids for plugin instances\n     */_uuids:[],/**\n     * Returns a boolean for RTL support\n     */rtl:function rtl(){return $('html').attr('dir')==='rtl';},/**\n     * Defines a Foundation plugin, adding it to the `Foundation` namespace and the list of plugins to initialize when reflowing.\n     * @param {Object} plugin - The constructor of the plugin.\n     */plugin:function plugin(_plugin,name){// Object key to use when adding to global Foundation object\n// Examples: Foundation.Reveal, Foundation.OffCanvas\nvar className=name||functionName(_plugin);// Object key to use when storing the plugin, also used to create the identifying data attribute for the plugin\n// Examples: data-reveal, data-off-canvas\nvar attrName=hyphenate(className);// Add to the Foundation object and the plugins list (for reflowing)\nthis._plugins[attrName]=this[className]=_plugin;},/**\n     * @function\n     * Populates the _uuids array with pointers to each individual plugin instance.\n     * Adds the `zfPlugin` data-attribute to programmatically created plugins to allow use of $(selector).foundation(method) calls.\n     * Also fires the initialization event for each plugin, consolidating repetitive code.\n     * @param {Object} plugin - an instance of a plugin, usually `this` in context.\n     * @param {String} name - the name of the plugin, passed as a camelCased string.\n     * @fires Plugin#init\n     */registerPlugin:function registerPlugin(plugin,name){var pluginName=name?hyphenate(name):functionName(plugin.constructor).toLowerCase();plugin.uuid=this.GetYoDigits(6,pluginName);if(!plugin.$element.attr('data-'+pluginName)){plugin.$element.attr('data-'+pluginName,plugin.uuid);}if(!plugin.$element.data('zfPlugin')){plugin.$element.data('zfPlugin',plugin);}/**\n       * Fires when the plugin has initialized.\n       * @event Plugin#init\n       */plugin.$element.trigger('init.zf.'+pluginName);this._uuids.push(plugin.uuid);return;},/**\n     * @function\n     * Removes the plugins uuid from the _uuids array.\n     * Removes the zfPlugin data attribute, as well as the data-plugin-name attribute.\n     * Also fires the destroyed event for the plugin, consolidating repetitive code.\n     * @param {Object} plugin - an instance of a plugin, usually `this` in context.\n     * @fires Plugin#destroyed\n     */unregisterPlugin:function unregisterPlugin(plugin){var pluginName=hyphenate(functionName(plugin.$element.data('zfPlugin').constructor));this._uuids.splice(this._uuids.indexOf(plugin.uuid),1);plugin.$element.removeAttr('data-'+pluginName).removeData('zfPlugin')/**\n       * Fires when the plugin has been destroyed.\n       * @event Plugin#destroyed\n       */.trigger('destroyed.zf.'+pluginName);for(var prop in plugin){plugin[prop]=null;//clean up script to prep for garbage collection.\n}return;},/**\n     * @function\n     * Causes one or more active plugins to re-initialize, resetting event listeners, recalculating positions, etc.\n     * @param {String} plugins - optional string of an individual plugin key, attained by calling `$(element).data('pluginName')`, or string of a plugin class i.e. `'dropdown'`\n     * @default If no argument is passed, reflow all currently active plugins.\n     */reInit:function reInit(plugins){var isJQ=plugins instanceof $;try{if(isJQ){plugins.each(function(){$(this).data('zfPlugin')._init();});}else{var type=typeof plugins==='undefined'?'undefined':_typeof(plugins),_this=this,fns={'object':function object(plgs){plgs.forEach(function(p){p=hyphenate(p);$('[data-'+p+']').foundation('_init');});},'string':function string(){plugins=hyphenate(plugins);$('[data-'+plugins+']').foundation('_init');},'undefined':function undefined(){this['object'](Object.keys(_this._plugins));}};fns[type](plugins);}}catch(err){console.error(err);}finally{return plugins;}},/**\n     * returns a random base-36 uid with namespacing\n     * @function\n     * @param {Number} length - number of random base-36 digits desired. Increase for more random strings.\n     * @param {String} namespace - name of plugin to be incorporated in uid, optional.\n     * @default {String} '' - if no plugin name is provided, nothing is appended to the uid.\n     * @returns {String} - unique id\n     */GetYoDigits:function GetYoDigits(length,namespace){length=length||6;return Math.round(Math.pow(36,length+1)-Math.random()*Math.pow(36,length)).toString(36).slice(1)+(namespace?'-'+namespace:'');},/**\n     * Initialize plugins on any elements within `elem` (and `elem` itself) that aren't already initialized.\n     * @param {Object} elem - jQuery object containing the element to check inside. Also checks the element itself, unless it's the `document` object.\n     * @param {String|Array} plugins - A list of plugins to initialize. Leave this out to initialize everything.\n     */reflow:function reflow(elem,plugins){// If plugins is undefined, just grab everything\nif(typeof plugins==='undefined'){plugins=Object.keys(this._plugins);}// If plugins is a string, convert it to an array with one item\nelse if(typeof plugins==='string'){plugins=[plugins];}var _this=this;// Iterate through each plugin\n$.each(plugins,function(i,name){// Get the current plugin\nvar plugin=_this._plugins[name];// Localize the search to all elements inside elem, as well as elem itself, unless elem === document\nvar $elem=$(elem).find('[data-'+name+']').addBack('[data-'+name+']');// For each plugin found, initialize it\n$elem.each(function(){var $el=$(this),opts={};// Don't double-dip on plugins\nif($el.data('zfPlugin')){console.warn(\"Tried to initialize \"+name+\" on an element that already has a Foundation plugin.\");return;}if($el.attr('data-options')){var thing=$el.attr('data-options').split(';').forEach(function(e,i){var opt=e.split(':').map(function(el){return el.trim();});if(opt[0])opts[opt[0]]=parseValue(opt[1]);});}try{$el.data('zfPlugin',new plugin($(this),opts));}catch(er){console.error(er);}finally{return;}});});},getFnName:functionName,transitionend:function transitionend($elem){var transitions={'transition':'transitionend','WebkitTransition':'webkitTransitionEnd','MozTransition':'transitionend','OTransition':'otransitionend'};var elem=document.createElement('div'),end;for(var t in transitions){if(typeof elem.style[t]!=='undefined'){end=transitions[t];}}if(end){return end;}else{end=setTimeout(function(){$elem.triggerHandler('transitionend',[$elem]);},1);return'transitionend';}}};Foundation.util={/**\n     * Function for applying a debounce effect to a function call.\n     * @function\n     * @param {Function} func - Function to be called at end of timeout.\n     * @param {Number} delay - Time in ms to delay the call of `func`.\n     * @returns function\n     */throttle:function throttle(func,delay){var timer=null;return function(){var context=this,args=arguments;if(timer===null){timer=setTimeout(function(){func.apply(context,args);timer=null;},delay);}};}};// TODO: consider not making this a jQuery function\n// TODO: need way to reflow vs. re-initialize\n/**\n   * The Foundation jQuery method.\n   * @param {String|Array} method - An action to perform on the current jQuery object.\n   */var foundation=function foundation(method){var type=typeof method==='undefined'?'undefined':_typeof(method),$meta=$('meta.foundation-mq'),$noJS=$('.no-js');if(!$meta.length){$('<meta class=\"foundation-mq\">').appendTo(document.head);}if($noJS.length){$noJS.removeClass('no-js');}if(type==='undefined'){//needs to initialize the Foundation object, or an individual plugin.\nFoundation.MediaQuery._init();Foundation.reflow(this);}else if(type==='string'){//an individual method to invoke on a plugin or group of plugins\nvar args=Array.prototype.slice.call(arguments,1);//collect all the arguments, if necessary\nvar plugClass=this.data('zfPlugin');//determine the class of plugin\nif(plugClass!==undefined&&plugClass[method]!==undefined){//make sure both the class and method exist\nif(this.length===1){//if there's only one, call it directly.\nplugClass[method].apply(plugClass,args);}else{this.each(function(i,el){//otherwise loop through the jQuery collection and invoke the method on each\nplugClass[method].apply($(el).data('zfPlugin'),args);});}}else{//error for no class or no method\nthrow new ReferenceError(\"We're sorry, '\"+method+\"' is not an available method for \"+(plugClass?functionName(plugClass):'this element')+'.');}}else{//error for invalid argument type\nthrow new TypeError('We\\'re sorry, '+type+' is not a valid parameter. You must use a string representing the method you wish to invoke.');}return this;};window.Foundation=Foundation;$.fn.foundation=foundation;// Polyfill for requestAnimationFrame\n(function(){if(!Date.now||!window.Date.now)window.Date.now=Date.now=function(){return new Date().getTime();};var vendors=['webkit','moz'];for(var i=0;i<vendors.length&&!window.requestAnimationFrame;++i){var vp=vendors[i];window.requestAnimationFrame=window[vp+'RequestAnimationFrame'];window.cancelAnimationFrame=window[vp+'CancelAnimationFrame']||window[vp+'CancelRequestAnimationFrame'];}if(/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent)||!window.requestAnimationFrame||!window.cancelAnimationFrame){var lastTime=0;window.requestAnimationFrame=function(callback){var now=Date.now();var nextTime=Math.max(lastTime+16,now);return setTimeout(function(){callback(lastTime=nextTime);},nextTime-now);};window.cancelAnimationFrame=clearTimeout;}/**\n     * Polyfill for performance.now, required by rAF\n     */if(!window.performance||!window.performance.now){window.performance={start:Date.now(),now:function now(){return Date.now()-this.start;}};}})();if(!Function.prototype.bind){Function.prototype.bind=function(oThis){if(typeof this!=='function'){// closest thing possible to the ECMAScript 5\n// internal IsCallable function\nthrow new TypeError('Function.prototype.bind - what is trying to be bound is not callable');}var aArgs=Array.prototype.slice.call(arguments,1),fToBind=this,fNOP=function fNOP(){},fBound=function fBound(){return fToBind.apply(this instanceof fNOP?this:oThis,aArgs.concat(Array.prototype.slice.call(arguments)));};if(this.prototype){// native functions don't have a prototype\nfNOP.prototype=this.prototype;}fBound.prototype=new fNOP();return fBound;};}// Polyfill to get the name of a function in IE9\nfunction functionName(fn){if(Function.prototype.name===undefined){var funcNameRegex=/function\\s([^(]{1,})\\(/;var results=funcNameRegex.exec(fn.toString());return results&&results.length>1?results[1].trim():\"\";}else if(fn.prototype===undefined){return fn.constructor.name;}else{return fn.prototype.constructor.name;}}function parseValue(str){if(/true/.test(str))return true;else if(/false/.test(str))return false;else if(!isNaN(str*1))return parseFloat(str);return str;}// Convert PascalCase to kebab-case\n// Thank you: http://stackoverflow.com/a/8955580\nfunction hyphenate(str){return str.replace(/([a-z])([A-Z])/g,'$1-$2').toLowerCase();}}(jQuery);'use strict';!function($){Foundation.Box={ImNotTouchingYou:ImNotTouchingYou,GetDimensions:GetDimensions,GetOffsets:GetOffsets};/**\n   * Compares the dimensions of an element to a container and determines collision events with container.\n   * @function\n   * @param {jQuery} element - jQuery object to test for collisions.\n   * @param {jQuery} parent - jQuery object to use as bounding container.\n   * @param {Boolean} lrOnly - set to true to check left and right values only.\n   * @param {Boolean} tbOnly - set to true to check top and bottom values only.\n   * @default if no parent object passed, detects collisions with `window`.\n   * @returns {Boolean} - true if collision free, false if a collision in any direction.\n   */function ImNotTouchingYou(element,parent,lrOnly,tbOnly){var eleDims=GetDimensions(element),top,bottom,left,right;if(parent){var parDims=GetDimensions(parent);bottom=eleDims.offset.top+eleDims.height<=parDims.height+parDims.offset.top;top=eleDims.offset.top>=parDims.offset.top;left=eleDims.offset.left>=parDims.offset.left;right=eleDims.offset.left+eleDims.width<=parDims.width+parDims.offset.left;}else{bottom=eleDims.offset.top+eleDims.height<=eleDims.windowDims.height+eleDims.windowDims.offset.top;top=eleDims.offset.top>=eleDims.windowDims.offset.top;left=eleDims.offset.left>=eleDims.windowDims.offset.left;right=eleDims.offset.left+eleDims.width<=eleDims.windowDims.width;}var allDirs=[bottom,top,left,right];if(lrOnly){return left===right===true;}if(tbOnly){return top===bottom===true;}return allDirs.indexOf(false)===-1;};/**\n   * Uses native methods to return an object of dimension values.\n   * @function\n   * @param {jQuery || HTML} element - jQuery object or DOM element for which to get the dimensions. Can be any element other that document or window.\n   * @returns {Object} - nested object of integer pixel values\n   * TODO - if element is window, return only those values.\n   */function GetDimensions(elem,test){elem=elem.length?elem[0]:elem;if(elem===window||elem===document){throw new Error(\"I'm sorry, Dave. I'm afraid I can't do that.\");}var rect=elem.getBoundingClientRect(),parRect=elem.parentNode.getBoundingClientRect(),winRect=document.body.getBoundingClientRect(),winY=window.pageYOffset,winX=window.pageXOffset;return{width:rect.width,height:rect.height,offset:{top:rect.top+winY,left:rect.left+winX},parentDims:{width:parRect.width,height:parRect.height,offset:{top:parRect.top+winY,left:parRect.left+winX}},windowDims:{width:winRect.width,height:winRect.height,offset:{top:winY,left:winX}}};}/**\n   * Returns an object of top and left integer pixel values for dynamically rendered elements,\n   * such as: Tooltip, Reveal, and Dropdown\n   * @function\n   * @param {jQuery} element - jQuery object for the element being positioned.\n   * @param {jQuery} anchor - jQuery object for the element's anchor point.\n   * @param {String} position - a string relating to the desired position of the element, relative to it's anchor\n   * @param {Number} vOffset - integer pixel value of desired vertical separation between anchor and element.\n   * @param {Number} hOffset - integer pixel value of desired horizontal separation between anchor and element.\n   * @param {Boolean} isOverflow - if a collision event is detected, sets to true to default the element to full width - any desired offset.\n   * TODO alter/rewrite to work with `em` values as well/instead of pixels\n   */function GetOffsets(element,anchor,position,vOffset,hOffset,isOverflow){var $eleDims=GetDimensions(element),$anchorDims=anchor?GetDimensions(anchor):null;switch(position){case'top':return{left:Foundation.rtl()?$anchorDims.offset.left-$eleDims.width+$anchorDims.width:$anchorDims.offset.left,top:$anchorDims.offset.top-($eleDims.height+vOffset)};break;case'left':return{left:$anchorDims.offset.left-($eleDims.width+hOffset),top:$anchorDims.offset.top};break;case'right':return{left:$anchorDims.offset.left+$anchorDims.width+hOffset,top:$anchorDims.offset.top};break;case'center top':return{left:$anchorDims.offset.left+$anchorDims.width/2-$eleDims.width/2,top:$anchorDims.offset.top-($eleDims.height+vOffset)};break;case'center bottom':return{left:isOverflow?hOffset:$anchorDims.offset.left+$anchorDims.width/2-$eleDims.width/2,top:$anchorDims.offset.top+$anchorDims.height+vOffset};break;case'center left':return{left:$anchorDims.offset.left-($eleDims.width+hOffset),top:$anchorDims.offset.top+$anchorDims.height/2-$eleDims.height/2};break;case'center right':return{left:$anchorDims.offset.left+$anchorDims.width+hOffset+1,top:$anchorDims.offset.top+$anchorDims.height/2-$eleDims.height/2};break;case'center':return{left:$eleDims.windowDims.offset.left+$eleDims.windowDims.width/2-$eleDims.width/2,top:$eleDims.windowDims.offset.top+$eleDims.windowDims.height/2-$eleDims.height/2};break;case'reveal':return{left:($eleDims.windowDims.width-$eleDims.width)/2,top:$eleDims.windowDims.offset.top+vOffset};case'reveal full':return{left:$eleDims.windowDims.offset.left,top:$eleDims.windowDims.offset.top};break;case'left bottom':return{left:$anchorDims.offset.left-($eleDims.width+hOffset),top:$anchorDims.offset.top+$anchorDims.height};break;case'right bottom':return{left:$anchorDims.offset.left+$anchorDims.width+hOffset-$eleDims.width,top:$anchorDims.offset.top+$anchorDims.height};break;default:return{left:Foundation.rtl()?$anchorDims.offset.left-$eleDims.width+$anchorDims.width:$anchorDims.offset.left,top:$anchorDims.offset.top+$anchorDims.height+vOffset};}}}(jQuery);/*******************************************\n *                                         *\n * This util was created by Marius Olbertz *\n * Please thank Marius on GitHub /owlbertz *\n * or the web http://www.mariusolbertz.de/ *\n *                                         *\n ******************************************/'use strict';!function($){var keyCodes={9:'TAB',13:'ENTER',27:'ESCAPE',32:'SPACE',37:'ARROW_LEFT',38:'ARROW_UP',39:'ARROW_RIGHT',40:'ARROW_DOWN'};var commands={};var Keyboard={keys:getKeyCodes(keyCodes),/**\n     * Parses the (keyboard) event and returns a String that represents its key\n     * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE\n     * @param {Event} event - the event generated by the event handler\n     * @return String key - String that represents the key pressed\n     */parseKey:function parseKey(event){var key=keyCodes[event.which||event.keyCode]||String.fromCharCode(event.which).toUpperCase();if(event.shiftKey)key='SHIFT_'+key;if(event.ctrlKey)key='CTRL_'+key;if(event.altKey)key='ALT_'+key;return key;},/**\n     * Handles the given (keyboard) event\n     * @param {Event} event - the event generated by the event handler\n     * @param {String} component - Foundation component's name, e.g. Slider or Reveal\n     * @param {Objects} functions - collection of functions that are to be executed\n     */handleKey:function handleKey(event,component,functions){var commandList=commands[component],keyCode=this.parseKey(event),cmds,command,fn;if(!commandList)return console.warn('Component not defined!');if(typeof commandList.ltr==='undefined'){// this component does not differentiate between ltr and rtl\ncmds=commandList;// use plain list\n}else{// merge ltr and rtl: if document is rtl, rtl overwrites ltr and vice versa\nif(Foundation.rtl())cmds=$.extend({},commandList.ltr,commandList.rtl);else cmds=$.extend({},commandList.rtl,commandList.ltr);}command=cmds[keyCode];fn=functions[command];if(fn&&typeof fn==='function'){// execute function  if exists\nvar returnValue=fn.apply();if(functions.handled||typeof functions.handled==='function'){// execute function when event was handled\nfunctions.handled(returnValue);}}else{if(functions.unhandled||typeof functions.unhandled==='function'){// execute function when event was not handled\nfunctions.unhandled();}}},/**\n     * Finds all focusable elements within the given `$element`\n     * @param {jQuery} $element - jQuery object to search within\n     * @return {jQuery} $focusable - all focusable elements within `$element`\n     */findFocusable:function findFocusable($element){return $element.find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]').filter(function(){if(!$(this).is(':visible')||$(this).attr('tabindex')<0){return false;}//only have visible elements and those that have a tabindex greater or equal 0\nreturn true;});},/**\n     * Returns the component name name\n     * @param {Object} component - Foundation component, e.g. Slider or Reveal\n     * @return String componentName\n     */register:function register(componentName,cmds){commands[componentName]=cmds;}};/*\n   * Constants for easier comparing.\n   * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE\n   */function getKeyCodes(kcs){var k={};for(var kc in kcs){k[kcs[kc]]=kcs[kc];}return k;}Foundation.Keyboard=Keyboard;}(jQuery);'use strict';!function($){// Default set of media queries\nvar defaultQueries={'default':'only screen',landscape:'only screen and (orientation: landscape)',portrait:'only screen and (orientation: portrait)',retina:'only screen and (-webkit-min-device-pixel-ratio: 2),'+'only screen and (min--moz-device-pixel-ratio: 2),'+'only screen and (-o-min-device-pixel-ratio: 2/1),'+'only screen and (min-device-pixel-ratio: 2),'+'only screen and (min-resolution: 192dpi),'+'only screen and (min-resolution: 2dppx)'};var MediaQuery={queries:[],current:'',/**\n     * Initializes the media query helper, by extracting the breakpoint list from the CSS and activating the breakpoint watcher.\n     * @function\n     * @private\n     */_init:function _init(){var self=this;var extractedStyles=$('.foundation-mq').css('font-family');var namedQueries;namedQueries=parseStyleToObject(extractedStyles);for(var key in namedQueries){if(namedQueries.hasOwnProperty(key)){self.queries.push({name:key,value:'only screen and (min-width: '+namedQueries[key]+')'});}}this.current=this._getCurrentSize();this._watcher();},/**\n     * Checks if the screen is at least as wide as a breakpoint.\n     * @function\n     * @param {String} size - Name of the breakpoint to check.\n     * @returns {Boolean} `true` if the breakpoint matches, `false` if it's smaller.\n     */atLeast:function atLeast(size){var query=this.get(size);if(query){return window.matchMedia(query).matches;}return false;},/**\n     * Gets the media query of a breakpoint.\n     * @function\n     * @param {String} size - Name of the breakpoint to get.\n     * @returns {String|null} - The media query of the breakpoint, or `null` if the breakpoint doesn't exist.\n     */get:function get(size){for(var i in this.queries){if(this.queries.hasOwnProperty(i)){var query=this.queries[i];if(size===query.name)return query.value;}}return null;},/**\n     * Gets the current breakpoint name by testing every breakpoint and returning the last one to match (the biggest one).\n     * @function\n     * @private\n     * @returns {String} Name of the current breakpoint.\n     */_getCurrentSize:function _getCurrentSize(){var matched;for(var i=0;i<this.queries.length;i++){var query=this.queries[i];if(window.matchMedia(query.value).matches){matched=query;}}if((typeof matched==='undefined'?'undefined':_typeof(matched))==='object'){return matched.name;}else{return matched;}},/**\n     * Activates the breakpoint watcher, which fires an event on the window whenever the breakpoint changes.\n     * @function\n     * @private\n     */_watcher:function _watcher(){var _this=this;$(window).on('resize.zf.mediaquery',function(){var newSize=_this._getCurrentSize(),currentSize=_this.current;if(newSize!==currentSize){// Change the current media query\n_this.current=newSize;// Broadcast the media query change on the window\n$(window).trigger('changed.zf.mediaquery',[newSize,currentSize]);}});}};Foundation.MediaQuery=MediaQuery;// matchMedia() polyfill - Test a CSS media type/query in JS.\n// Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license\nwindow.matchMedia||(window.matchMedia=function(){'use strict';// For browsers that support matchMedium api such as IE 9 and webkit\nvar styleMedia=window.styleMedia||window.media;// For those that don't support matchMedium\nif(!styleMedia){var style=document.createElement('style'),script=document.getElementsByTagName('script')[0],info=null;style.type='text/css';style.id='matchmediajs-test';script.parentNode.insertBefore(style,script);// 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers\ninfo='getComputedStyle'in window&&window.getComputedStyle(style,null)||style.currentStyle;styleMedia={matchMedium:function matchMedium(media){var text='@media '+media+'{ #matchmediajs-test { width: 1px; } }';// 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers\nif(style.styleSheet){style.styleSheet.cssText=text;}else{style.textContent=text;}// Test if media query is true or false\nreturn info.width==='1px';}};}return function(media){return{matches:styleMedia.matchMedium(media||'all'),media:media||'all'};};}());// Thank you: https://github.com/sindresorhus/query-string\nfunction parseStyleToObject(str){var styleObject={};if(typeof str!=='string'){return styleObject;}str=str.trim().slice(1,-1);// browsers re-quote string style values\nif(!str){return styleObject;}styleObject=str.split('&').reduce(function(ret,param){var parts=param.replace(/\\+/g,' ').split('=');var key=parts[0];var val=parts[1];key=decodeURIComponent(key);// missing `=` should be `null`:\n// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\nval=val===undefined?null:decodeURIComponent(val);if(!ret.hasOwnProperty(key)){ret[key]=val;}else if(Array.isArray(ret[key])){ret[key].push(val);}else{ret[key]=[ret[key],val];}return ret;},{});return styleObject;}Foundation.MediaQuery=MediaQuery;}(jQuery);'use strict';!function($){/**\n   * Motion module.\n   * @module foundation.motion\n   */var initClasses=['mui-enter','mui-leave'];var activeClasses=['mui-enter-active','mui-leave-active'];var Motion={animateIn:function animateIn(element,animation,cb){animate(true,element,animation,cb);},animateOut:function animateOut(element,animation,cb){animate(false,element,animation,cb);}};function Move(duration,elem,fn){var anim,prog,start=null;// console.log('called');\nfunction move(ts){if(!start)start=window.performance.now();// console.log(start, ts);\nprog=ts-start;fn.apply(elem);if(prog<duration){anim=window.requestAnimationFrame(move,elem);}else{window.cancelAnimationFrame(anim);elem.trigger('finished.zf.animate',[elem]).triggerHandler('finished.zf.animate',[elem]);}}anim=window.requestAnimationFrame(move);}/**\n   * Animates an element in or out using a CSS transition class.\n   * @function\n   * @private\n   * @param {Boolean} isIn - Defines if the animation is in or out.\n   * @param {Object} element - jQuery or HTML object to animate.\n   * @param {String} animation - CSS class to use.\n   * @param {Function} cb - Callback to run when animation is finished.\n   */function animate(isIn,element,animation,cb){element=$(element).eq(0);if(!element.length)return;var initClass=isIn?initClasses[0]:initClasses[1];var activeClass=isIn?activeClasses[0]:activeClasses[1];// Set up the animation\nreset();element.addClass(animation).css('transition','none');requestAnimationFrame(function(){element.addClass(initClass);if(isIn)element.show();});// Start the animation\nrequestAnimationFrame(function(){element[0].offsetWidth;element.css('transition','').addClass(activeClass);});// Clean up the animation when it finishes\nelement.one(Foundation.transitionend(element),finish);// Hides the element (for out animations), resets the element, and runs a callback\nfunction finish(){if(!isIn)element.hide();reset();if(cb)cb.apply(element);}// Resets transitions and removes motion-specific classes\nfunction reset(){element[0].style.transitionDuration=0;element.removeClass(initClass+' '+activeClass+' '+animation);}}Foundation.Move=Move;Foundation.Motion=Motion;}(jQuery);'use strict';!function($){var Nest={Feather:function Feather(menu){var type=arguments.length<=1||arguments[1]===undefined?'zf':arguments[1];menu.attr('role','menubar');var items=menu.find('li').attr({'role':'menuitem'}),subMenuClass='is-'+type+'-submenu',subItemClass=subMenuClass+'-item',hasSubClass='is-'+type+'-submenu-parent';menu.find('a:first').attr('tabindex',0);items.each(function(){var $item=$(this),$sub=$item.children('ul');if($sub.length){$item.addClass(hasSubClass).attr({'aria-haspopup':true,'aria-expanded':false,'aria-label':$item.children('a:first').text()});$sub.addClass('submenu '+subMenuClass).attr({'data-submenu':'','aria-hidden':true,'role':'menu'});}if($item.parent('[data-submenu]').length){$item.addClass('is-submenu-item '+subItemClass);}});return;},Burn:function Burn(menu,type){var items=menu.find('li').removeAttr('tabindex'),subMenuClass='is-'+type+'-submenu',subItemClass=subMenuClass+'-item',hasSubClass='is-'+type+'-submenu-parent';menu.find('*').removeClass(subMenuClass+' '+subItemClass+' '+hasSubClass+' is-submenu-item submenu is-active').removeAttr('data-submenu').css('display','');// console.log(      menu.find('.' + subMenuClass + ', .' + subItemClass + ', .has-submenu, .is-submenu-item, .submenu, [data-submenu]')\n//           .removeClass(subMenuClass + ' ' + subItemClass + ' has-submenu is-submenu-item submenu')\n//           .removeAttr('data-submenu'));\n// items.each(function(){\n//   var $item = $(this),\n//       $sub = $item.children('ul');\n//   if($item.parent('[data-submenu]').length){\n//     $item.removeClass('is-submenu-item ' + subItemClass);\n//   }\n//   if($sub.length){\n//     $item.removeClass('has-submenu');\n//     $sub.removeClass('submenu ' + subMenuClass).removeAttr('data-submenu');\n//   }\n// });\n}};Foundation.Nest=Nest;}(jQuery);'use strict';!function($){function Timer(elem,options,cb){var _this=this,duration=options.duration,//options is an object for easily adding features later.\nnameSpace=Object.keys(elem.data())[0]||'timer',remain=-1,start,timer;this.isPaused=false;this.restart=function(){remain=-1;clearTimeout(timer);this.start();};this.start=function(){this.isPaused=false;// if(!elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.\nclearTimeout(timer);remain=remain<=0?duration:remain;elem.data('paused',false);start=Date.now();timer=setTimeout(function(){if(options.infinite){_this.restart();//rerun the timer.\n}cb();},remain);elem.trigger('timerstart.zf.'+nameSpace);};this.pause=function(){this.isPaused=true;//if(elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.\nclearTimeout(timer);elem.data('paused',true);var end=Date.now();remain=remain-(end-start);elem.trigger('timerpaused.zf.'+nameSpace);};}/**\n   * Runs a callback function when images are fully loaded.\n   * @param {Object} images - Image(s) to check if loaded.\n   * @param {Func} callback - Function to execute when image is fully loaded.\n   */function onImagesLoaded(images,callback){var self=this,unloaded=images.length;if(unloaded===0){callback();}images.each(function(){if(this.complete){singleImageLoaded();}else if(typeof this.naturalWidth!=='undefined'&&this.naturalWidth>0){singleImageLoaded();}else{$(this).one('load',function(){singleImageLoaded();});}});function singleImageLoaded(){unloaded--;if(unloaded===0){callback();}}}Foundation.Timer=Timer;Foundation.onImagesLoaded=onImagesLoaded;}(jQuery);//**************************************************\n//**Work inspired by multiple jquery swipe plugins**\n//**Done by Yohai Ararat ***************************\n//**************************************************\n(function($){$.spotSwipe={version:'1.0.0',enabled:'ontouchstart'in document.documentElement,preventDefault:false,moveThreshold:75,timeThreshold:200};var startPosX,startPosY,startTime,elapsedTime,isMoving=false;function onTouchEnd(){//  alert(this);\nthis.removeEventListener('touchmove',onTouchMove);this.removeEventListener('touchend',onTouchEnd);isMoving=false;}function onTouchMove(e){if($.spotSwipe.preventDefault){e.preventDefault();}if(isMoving){var x=e.touches[0].pageX;var y=e.touches[0].pageY;var dx=startPosX-x;var dy=startPosY-y;var dir;elapsedTime=new Date().getTime()-startTime;if(Math.abs(dx)>=$.spotSwipe.moveThreshold&&elapsedTime<=$.spotSwipe.timeThreshold){dir=dx>0?'left':'right';}// else if(Math.abs(dy) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {\n//   dir = dy > 0 ? 'down' : 'up';\n// }\nif(dir){e.preventDefault();onTouchEnd.call(this);$(this).trigger('swipe',dir).trigger('swipe'+dir);}}}function onTouchStart(e){if(e.touches.length==1){startPosX=e.touches[0].pageX;startPosY=e.touches[0].pageY;isMoving=true;startTime=new Date().getTime();this.addEventListener('touchmove',onTouchMove,false);this.addEventListener('touchend',onTouchEnd,false);}}function init(){this.addEventListener&&this.addEventListener('touchstart',onTouchStart,false);}function teardown(){this.removeEventListener('touchstart',onTouchStart);}$.event.special.swipe={setup:init};$.each(['left','up','down','right'],function(){$.event.special['swipe'+this]={setup:function setup(){$(this).on('swipe',$.noop);}};});})(jQuery);/****************************************************\n * Method for adding psuedo drag events to elements *\n ***************************************************/!function($){$.fn.addTouch=function(){this.each(function(i,el){$(el).bind('touchstart touchmove touchend touchcancel',function(){//we pass the original event object because the jQuery event\n//object is normalized to w3c specs and does not provide the TouchList\nhandleTouch(event);});});var handleTouch=function handleTouch(event){var touches=event.changedTouches,first=touches[0],eventTypes={touchstart:'mousedown',touchmove:'mousemove',touchend:'mouseup'},type=eventTypes[event.type],simulatedEvent;if('MouseEvent'in window&&typeof window.MouseEvent==='function'){simulatedEvent=new window.MouseEvent(type,{'bubbles':true,'cancelable':true,'screenX':first.screenX,'screenY':first.screenY,'clientX':first.clientX,'clientY':first.clientY});}else{simulatedEvent=document.createEvent('MouseEvent');simulatedEvent.initMouseEvent(type,true,true,window,1,first.screenX,first.screenY,first.clientX,first.clientY,false,false,false,false,0/*left*/,null);}first.target.dispatchEvent(simulatedEvent);};};}(jQuery);//**********************************\n//**From the jQuery Mobile Library**\n//**need to recreate functionality**\n//**and try to improve if possible**\n//**********************************\n/* Removing the jQuery function ****\n************************************\n\n(function( $, window, undefined ) {\n\n\tvar $document = $( document ),\n\t\t// supportTouch = $.mobile.support.touch,\n\t\ttouchStartEvent = 'touchstart'//supportTouch ? \"touchstart\" : \"mousedown\",\n\t\ttouchStopEvent = 'touchend'//supportTouch ? \"touchend\" : \"mouseup\",\n\t\ttouchMoveEvent = 'touchmove'//supportTouch ? \"touchmove\" : \"mousemove\";\n\n\t// setup new event shortcuts\n\t$.each( ( \"touchstart touchmove touchend \" +\n\t\t\"swipe swipeleft swiperight\" ).split( \" \" ), function( i, name ) {\n\n\t\t$.fn[ name ] = function( fn ) {\n\t\t\treturn fn ? this.bind( name, fn ) : this.trigger( name );\n\t\t};\n\n\t\t// jQuery < 1.8\n\t\tif ( $.attrFn ) {\n\t\t\t$.attrFn[ name ] = true;\n\t\t}\n\t});\n\n\tfunction triggerCustomEvent( obj, eventType, event, bubble ) {\n\t\tvar originalType = event.type;\n\t\tevent.type = eventType;\n\t\tif ( bubble ) {\n\t\t\t$.event.trigger( event, undefined, obj );\n\t\t} else {\n\t\t\t$.event.dispatch.call( obj, event );\n\t\t}\n\t\tevent.type = originalType;\n\t}\n\n\t// also handles taphold\n\n\t// Also handles swipeleft, swiperight\n\t$.event.special.swipe = {\n\n\t\t// More than this horizontal displacement, and we will suppress scrolling.\n\t\tscrollSupressionThreshold: 30,\n\n\t\t// More time than this, and it isn't a swipe.\n\t\tdurationThreshold: 1000,\n\n\t\t// Swipe horizontal displacement must be more than this.\n\t\thorizontalDistanceThreshold: window.devicePixelRatio >= 2 ? 15 : 30,\n\n\t\t// Swipe vertical displacement must be less than this.\n\t\tverticalDistanceThreshold: window.devicePixelRatio >= 2 ? 15 : 30,\n\n\t\tgetLocation: function ( event ) {\n\t\t\tvar winPageX = window.pageXOffset,\n\t\t\t\twinPageY = window.pageYOffset,\n\t\t\t\tx = event.clientX,\n\t\t\t\ty = event.clientY;\n\n\t\t\tif ( event.pageY === 0 && Math.floor( y ) > Math.floor( event.pageY ) ||\n\t\t\t\tevent.pageX === 0 && Math.floor( x ) > Math.floor( event.pageX ) ) {\n\n\t\t\t\t// iOS4 clientX/clientY have the value that should have been\n\t\t\t\t// in pageX/pageY. While pageX/page/ have the value 0\n\t\t\t\tx = x - winPageX;\n\t\t\t\ty = y - winPageY;\n\t\t\t} else if ( y < ( event.pageY - winPageY) || x < ( event.pageX - winPageX ) ) {\n\n\t\t\t\t// Some Android browsers have totally bogus values for clientX/Y\n\t\t\t\t// when scrolling/zooming a page. Detectable since clientX/clientY\n\t\t\t\t// should never be smaller than pageX/pageY minus page scroll\n\t\t\t\tx = event.pageX - winPageX;\n\t\t\t\ty = event.pageY - winPageY;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tx: x,\n\t\t\t\ty: y\n\t\t\t};\n\t\t},\n\n\t\tstart: function( event ) {\n\t\t\tvar data = event.originalEvent.touches ?\n\t\t\t\t\tevent.originalEvent.touches[ 0 ] : event,\n\t\t\t\tlocation = $.event.special.swipe.getLocation( data );\n\t\t\treturn {\n\t\t\t\t\t\ttime: ( new Date() ).getTime(),\n\t\t\t\t\t\tcoords: [ location.x, location.y ],\n\t\t\t\t\t\torigin: $( event.target )\n\t\t\t\t\t};\n\t\t},\n\n\t\tstop: function( event ) {\n\t\t\tvar data = event.originalEvent.touches ?\n\t\t\t\t\tevent.originalEvent.touches[ 0 ] : event,\n\t\t\t\tlocation = $.event.special.swipe.getLocation( data );\n\t\t\treturn {\n\t\t\t\t\t\ttime: ( new Date() ).getTime(),\n\t\t\t\t\t\tcoords: [ location.x, location.y ]\n\t\t\t\t\t};\n\t\t},\n\n\t\thandleSwipe: function( start, stop, thisObject, origTarget ) {\n\t\t\tif ( stop.time - start.time < $.event.special.swipe.durationThreshold &&\n\t\t\t\tMath.abs( start.coords[ 0 ] - stop.coords[ 0 ] ) > $.event.special.swipe.horizontalDistanceThreshold &&\n\t\t\t\tMath.abs( start.coords[ 1 ] - stop.coords[ 1 ] ) < $.event.special.swipe.verticalDistanceThreshold ) {\n\t\t\t\tvar direction = start.coords[0] > stop.coords[ 0 ] ? \"swipeleft\" : \"swiperight\";\n\n\t\t\t\ttriggerCustomEvent( thisObject, \"swipe\", $.Event( \"swipe\", { target: origTarget, swipestart: start, swipestop: stop }), true );\n\t\t\t\ttriggerCustomEvent( thisObject, direction,$.Event( direction, { target: origTarget, swipestart: start, swipestop: stop } ), true );\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\n\t\t},\n\n\t\t// This serves as a flag to ensure that at most one swipe event event is\n\t\t// in work at any given time\n\t\teventInProgress: false,\n\n\t\tsetup: function() {\n\t\t\tvar events,\n\t\t\t\tthisObject = this,\n\t\t\t\t$this = $( thisObject ),\n\t\t\t\tcontext = {};\n\n\t\t\t// Retrieve the events data for this element and add the swipe context\n\t\t\tevents = $.data( this, \"mobile-events\" );\n\t\t\tif ( !events ) {\n\t\t\t\tevents = { length: 0 };\n\t\t\t\t$.data( this, \"mobile-events\", events );\n\t\t\t}\n\t\t\tevents.length++;\n\t\t\tevents.swipe = context;\n\n\t\t\tcontext.start = function( event ) {\n\n\t\t\t\t// Bail if we're already working on a swipe event\n\t\t\t\tif ( $.event.special.swipe.eventInProgress ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t$.event.special.swipe.eventInProgress = true;\n\n\t\t\t\tvar stop,\n\t\t\t\t\tstart = $.event.special.swipe.start( event ),\n\t\t\t\t\torigTarget = event.target,\n\t\t\t\t\temitted = false;\n\n\t\t\t\tcontext.move = function( event ) {\n\t\t\t\t\tif ( !start || event.isDefaultPrevented() ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tstop = $.event.special.swipe.stop( event );\n\t\t\t\t\tif ( !emitted ) {\n\t\t\t\t\t\temitted = $.event.special.swipe.handleSwipe( start, stop, thisObject, origTarget );\n\t\t\t\t\t\tif ( emitted ) {\n\n\t\t\t\t\t\t\t// Reset the context to make way for the next swipe event\n\t\t\t\t\t\t\t$.event.special.swipe.eventInProgress = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// prevent scrolling\n\t\t\t\t\tif ( Math.abs( start.coords[ 0 ] - stop.coords[ 0 ] ) > $.event.special.swipe.scrollSupressionThreshold ) {\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tcontext.stop = function() {\n\t\t\t\t\t\temitted = true;\n\n\t\t\t\t\t\t// Reset the context to make way for the next swipe event\n\t\t\t\t\t\t$.event.special.swipe.eventInProgress = false;\n\t\t\t\t\t\t$document.off( touchMoveEvent, context.move );\n\t\t\t\t\t\tcontext.move = null;\n\t\t\t\t};\n\n\t\t\t\t$document.on( touchMoveEvent, context.move )\n\t\t\t\t\t.one( touchStopEvent, context.stop );\n\t\t\t};\n\t\t\t$this.on( touchStartEvent, context.start );\n\t\t},\n\n\t\tteardown: function() {\n\t\t\tvar events, context;\n\n\t\t\tevents = $.data( this, \"mobile-events\" );\n\t\t\tif ( events ) {\n\t\t\t\tcontext = events.swipe;\n\t\t\t\tdelete events.swipe;\n\t\t\t\tevents.length--;\n\t\t\t\tif ( events.length === 0 ) {\n\t\t\t\t\t$.removeData( this, \"mobile-events\" );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( context ) {\n\t\t\t\tif ( context.start ) {\n\t\t\t\t\t$( this ).off( touchStartEvent, context.start );\n\t\t\t\t}\n\t\t\t\tif ( context.move ) {\n\t\t\t\t\t$document.off( touchMoveEvent, context.move );\n\t\t\t\t}\n\t\t\t\tif ( context.stop ) {\n\t\t\t\t\t$document.off( touchStopEvent, context.stop );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\t$.each({\n\t\tswipeleft: \"swipe.left\",\n\t\tswiperight: \"swipe.right\"\n\t}, function( event, sourceEvent ) {\n\n\t\t$.event.special[ event ] = {\n\t\t\tsetup: function() {\n\t\t\t\t$( this ).bind( sourceEvent, $.noop );\n\t\t\t},\n\t\t\tteardown: function() {\n\t\t\t\t$( this ).unbind( sourceEvent );\n\t\t\t}\n\t\t};\n\t});\n})( jQuery, this );\n*/'use strict';!function($){var MutationObserver=function(){var prefixes=['WebKit','Moz','O','Ms',''];for(var i=0;i<prefixes.length;i++){if(prefixes[i]+'MutationObserver'in window){return window[prefixes[i]+'MutationObserver'];}}return false;}();var triggers=function triggers(el,type){el.data(type).split(' ').forEach(function(id){$('#'+id)[type==='close'?'trigger':'triggerHandler'](type+'.zf.trigger',[el]);});};// Elements with [data-open] will reveal a plugin that supports it when clicked.\n$(document).on('click.zf.trigger','[data-open]',function(){triggers($(this),'open');});// Elements with [data-close] will close a plugin that supports it when clicked.\n// If used without a value on [data-close], the event will bubble, allowing it to close a parent component.\n$(document).on('click.zf.trigger','[data-close]',function(){var id=$(this).data('close');if(id){triggers($(this),'close');}else{$(this).trigger('close.zf.trigger');}});// Elements with [data-toggle] will toggle a plugin that supports it when clicked.\n$(document).on('click.zf.trigger','[data-toggle]',function(){triggers($(this),'toggle');});// Elements with [data-closable] will respond to close.zf.trigger events.\n$(document).on('close.zf.trigger','[data-closable]',function(e){e.stopPropagation();var animation=$(this).data('closable');if(animation!==''){Foundation.Motion.animateOut($(this),animation,function(){$(this).trigger('closed.zf');});}else{$(this).fadeOut().trigger('closed.zf');}});$(document).on('focus.zf.trigger blur.zf.trigger','[data-toggle-focus]',function(){var id=$(this).data('toggle-focus');$('#'+id).triggerHandler('toggle.zf.trigger',[$(this)]);});/**\n  * Fires once after all other scripts have loaded\n  * @function\n  * @private\n  */$(window).load(function(){checkListeners();});function checkListeners(){eventsListener();resizeListener();scrollListener();closemeListener();}//******** only fires this function once on load, if there's something to watch ********\nfunction closemeListener(pluginName){var yetiBoxes=$('[data-yeti-box]'),plugNames=['dropdown','tooltip','reveal'];if(pluginName){if(typeof pluginName==='string'){plugNames.push(pluginName);}else if((typeof pluginName==='undefined'?'undefined':_typeof(pluginName))==='object'&&typeof pluginName[0]==='string'){plugNames.concat(pluginName);}else{console.error('Plugin names must be strings');}}if(yetiBoxes.length){var listeners=plugNames.map(function(name){return'closeme.zf.'+name;}).join(' ');$(window).off(listeners).on(listeners,function(e,pluginId){var plugin=e.namespace.split('.')[0];var plugins=$('[data-'+plugin+']').not('[data-yeti-box=\"'+pluginId+'\"]');plugins.each(function(){var _this=$(this);_this.triggerHandler('close.zf.trigger',[_this]);});});}}function resizeListener(debounce){var timer=void 0,$nodes=$('[data-resize]');if($nodes.length){$(window).off('resize.zf.trigger').on('resize.zf.trigger',function(e){if(timer){clearTimeout(timer);}timer=setTimeout(function(){if(!MutationObserver){//fallback for IE 9\n$nodes.each(function(){$(this).triggerHandler('resizeme.zf.trigger');});}//trigger all listening elements and signal a resize event\n$nodes.attr('data-events',\"resize\");},debounce||10);//default time to emit resize event\n});}}function scrollListener(debounce){var timer=void 0,$nodes=$('[data-scroll]');if($nodes.length){$(window).off('scroll.zf.trigger').on('scroll.zf.trigger',function(e){if(timer){clearTimeout(timer);}timer=setTimeout(function(){if(!MutationObserver){//fallback for IE 9\n$nodes.each(function(){$(this).triggerHandler('scrollme.zf.trigger');});}//trigger all listening elements and signal a scroll event\n$nodes.attr('data-events',\"scroll\");},debounce||10);//default time to emit scroll event\n});}}function eventsListener(){if(!MutationObserver){return false;}var nodes=document.querySelectorAll('[data-resize], [data-scroll], [data-mutate]');//element callback\nvar listeningElementsMutation=function listeningElementsMutation(mutationRecordsList){var $target=$(mutationRecordsList[0].target);//trigger the event handler for the element depending on type\nswitch($target.attr(\"data-events\")){case\"resize\":$target.triggerHandler('resizeme.zf.trigger',[$target]);break;case\"scroll\":$target.triggerHandler('scrollme.zf.trigger',[$target,window.pageYOffset]);break;// case \"mutate\" :\n// console.log('mutate', $target);\n// $target.triggerHandler('mutate.zf.trigger');\n//\n// //make sure we don't get stuck in an infinite loop from sloppy codeing\n// if ($target.index('[data-mutate]') == $(\"[data-mutate]\").length-1) {\n//   domMutationObserver();\n// }\n// break;\ndefault:return false;//nothing\n}};if(nodes.length){//for each element that needs to listen for resizing, scrolling, (or coming soon mutation) add a single observer\nfor(var i=0;i<=nodes.length-1;i++){var elementObserver=new MutationObserver(listeningElementsMutation);elementObserver.observe(nodes[i],{attributes:true,childList:false,characterData:false,subtree:false,attributeFilter:[\"data-events\"]});}}}// ------------------------------------\n// [PH]\n// Foundation.CheckWatchers = checkWatchers;\nFoundation.IHearYou=checkListeners;// Foundation.ISeeYou = scrollListener;\n// Foundation.IFeelYou = closemeListener;\n}(jQuery);// function domMutationObserver(debounce) {\n//   // !!! This is coming soon and needs more work; not active  !!! //\n//   var timer,\n//   nodes = document.querySelectorAll('[data-mutate]');\n//   //\n//   if (nodes.length) {\n//     // var MutationObserver = (function () {\n//     //   var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];\n//     //   for (var i=0; i < prefixes.length; i++) {\n//     //     if (prefixes[i] + 'MutationObserver' in window) {\n//     //       return window[prefixes[i] + 'MutationObserver'];\n//     //     }\n//     //   }\n//     //   return false;\n//     // }());\n//\n//\n//     //for the body, we need to listen for all changes effecting the style and class attributes\n//     var bodyObserver = new MutationObserver(bodyMutation);\n//     bodyObserver.observe(document.body, { attributes: true, childList: true, characterData: false, subtree:true, attributeFilter:[\"style\", \"class\"]});\n//\n//\n//     //body callback\n//     function bodyMutation(mutate) {\n//       //trigger all listening elements and signal a mutation event\n//       if (timer) { clearTimeout(timer); }\n//\n//       timer = setTimeout(function() {\n//         bodyObserver.disconnect();\n//         $('[data-mutate]').attr('data-events',\"mutate\");\n//       }, debounce || 150);\n//     }\n//   }\n// }\n'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}!function($){/**\n   * Abide module.\n   * @module foundation.abide\n   */var Abide=function(){/**\n     * Creates a new instance of Abide.\n     * @class\n     * @fires Abide#init\n     * @param {Object} element - jQuery object to add the trigger to.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */function Abide(element){var options=arguments.length<=1||arguments[1]===undefined?{}:arguments[1];_classCallCheck(this,Abide);this.$element=element;this.options=$.extend({},Abide.defaults,this.$element.data(),options);this._init();Foundation.registerPlugin(this,'Abide');}/**\n     * Initializes the Abide plugin and calls functions to get Abide functioning on load.\n     * @private\n     */_createClass(Abide,[{key:'_init',value:function _init(){this.$inputs=this.$element.find('input, textarea, select');this._events();}/**\n       * Initializes events for Abide.\n       * @private\n       */},{key:'_events',value:function _events(){var _this2=this;this.$element.off('.abide').on('reset.zf.abide',function(){_this2.resetForm();}).on('submit.zf.abide',function(){return _this2.validateForm();});if(this.options.validateOn==='fieldChange'){this.$inputs.off('change.zf.abide').on('change.zf.abide',function(e){_this2.validateInput($(e.target));});}if(this.options.liveValidate){this.$inputs.off('input.zf.abide').on('input.zf.abide',function(e){_this2.validateInput($(e.target));});}}/**\n       * Calls necessary functions to update Abide upon DOM change\n       * @private\n       */},{key:'_reflow',value:function _reflow(){this._init();}/**\n       * Checks whether or not a form element has the required attribute and if it's checked or not\n       * @param {Object} element - jQuery object to check for required attribute\n       * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty\n       */},{key:'requiredCheck',value:function requiredCheck($el){if(!$el.attr('required'))return true;var isGood=true;switch($el[0].type){case'checkbox':isGood=$el[0].checked;break;case'select':case'select-one':case'select-multiple':var opt=$el.find('option:selected');if(!opt.length||!opt.val())isGood=false;break;default:if(!$el.val()||!$el.val().length)isGood=false;}return isGood;}/**\n       * Based on $el, get the first element with selector in this order:\n       * 1. The element's direct sibling('s).\n       * 3. The element's parent's children.\n       *\n       * This allows for multiple form errors per input, though if none are found, no form errors will be shown.\n       *\n       * @param {Object} $el - jQuery object to use as reference to find the form error selector.\n       * @returns {Object} jQuery object with the selector.\n       */},{key:'findFormError',value:function findFormError($el){var $error=$el.siblings(this.options.formErrorSelector);if(!$error.length){$error=$el.parent().find(this.options.formErrorSelector);}return $error;}/**\n       * Get the first element in this order:\n       * 2. The <label> with the attribute `[for=\"someInputId\"]`\n       * 3. The `.closest()` <label>\n       *\n       * @param {Object} $el - jQuery object to check for required attribute\n       * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty\n       */},{key:'findLabel',value:function findLabel($el){var id=$el[0].id;var $label=this.$element.find('label[for=\"'+id+'\"]');if(!$label.length){return $el.closest('label');}return $label;}/**\n       * Get the set of labels associated with a set of radio els in this order\n       * 2. The <label> with the attribute `[for=\"someInputId\"]`\n       * 3. The `.closest()` <label>\n       *\n       * @param {Object} $el - jQuery object to check for required attribute\n       * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty\n       */},{key:'findRadioLabels',value:function findRadioLabels($els){var _this3=this;var labels=$els.map(function(i,el){var id=el.id;var $label=_this3.$element.find('label[for=\"'+id+'\"]');if(!$label.length){$label=$(el).closest('label');}return $label[0];});return $(labels);}/**\n       * Adds the CSS error class as specified by the Abide settings to the label, input, and the form\n       * @param {Object} $el - jQuery object to add the class to\n       */},{key:'addErrorClasses',value:function addErrorClasses($el){var $label=this.findLabel($el);var $formError=this.findFormError($el);if($label.length){$label.addClass(this.options.labelErrorClass);}if($formError.length){$formError.addClass(this.options.formErrorClass);}$el.addClass(this.options.inputErrorClass).attr('data-invalid','');}/**\n       * Remove CSS error classes etc from an entire radio button group\n       * @param {String} groupName - A string that specifies the name of a radio button group\n       *\n       */},{key:'removeRadioErrorClasses',value:function removeRadioErrorClasses(groupName){var $els=this.$element.find(':radio[name=\"'+groupName+'\"]');var $labels=this.findRadioLabels($els);var $formErrors=this.findFormError($els);if($labels.length){$labels.removeClass(this.options.labelErrorClass);}if($formErrors.length){$formErrors.removeClass(this.options.formErrorClass);}$els.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');}/**\n       * Removes CSS error class as specified by the Abide settings from the label, input, and the form\n       * @param {Object} $el - jQuery object to remove the class from\n       */},{key:'removeErrorClasses',value:function removeErrorClasses($el){// radios need to clear all of the els\nif($el[0].type=='radio'){return this.removeRadioErrorClasses($el.attr('name'));}var $label=this.findLabel($el);var $formError=this.findFormError($el);if($label.length){$label.removeClass(this.options.labelErrorClass);}if($formError.length){$formError.removeClass(this.options.formErrorClass);}$el.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');}/**\n       * Goes through a form to find inputs and proceeds to validate them in ways specific to their type\n       * @fires Abide#invalid\n       * @fires Abide#valid\n       * @param {Object} element - jQuery object to validate, should be an HTML input\n       * @returns {Boolean} goodToGo - If the input is valid or not.\n       */},{key:'validateInput',value:function validateInput($el){var clearRequire=this.requiredCheck($el),validated=false,customValidator=true,validator=$el.attr('data-validator'),equalTo=true;// don't validate ignored inputs or hidden inputs\nif($el.is('[data-abide-ignore]')||$el.is('[type=\"hidden\"]')){return true;}switch($el[0].type){case'radio':validated=this.validateRadio($el.attr('name'));break;case'checkbox':validated=clearRequire;break;case'select':case'select-one':case'select-multiple':validated=clearRequire;break;default:validated=this.validateText($el);}if(validator){customValidator=this.matchValidation($el,validator,$el.attr('required'));}if($el.attr('data-equalto')){equalTo=this.options.validators.equalTo($el);}var goodToGo=[clearRequire,validated,customValidator,equalTo].indexOf(false)===-1;var message=(goodToGo?'valid':'invalid')+'.zf.abide';this[goodToGo?'removeErrorClasses':'addErrorClasses']($el);/**\n         * Fires when the input is done checking for validation. Event trigger is either `valid.zf.abide` or `invalid.zf.abide`\n         * Trigger includes the DOM element of the input.\n         * @event Abide#valid\n         * @event Abide#invalid\n         */$el.trigger(message,[$el]);return goodToGo;}/**\n       * Goes through a form and if there are any invalid inputs, it will display the form error element\n       * @returns {Boolean} noError - true if no errors were detected...\n       * @fires Abide#formvalid\n       * @fires Abide#forminvalid\n       */},{key:'validateForm',value:function validateForm(){var acc=[];var _this=this;this.$inputs.each(function(){acc.push(_this.validateInput($(this)));});var noError=acc.indexOf(false)===-1;this.$element.find('[data-abide-error]').css('display',noError?'none':'block');/**\n         * Fires when the form is finished validating. Event trigger is either `formvalid.zf.abide` or `forminvalid.zf.abide`.\n         * Trigger includes the element of the form.\n         * @event Abide#formvalid\n         * @event Abide#forminvalid\n         */this.$element.trigger((noError?'formvalid':'forminvalid')+'.zf.abide',[this.$element]);return noError;}/**\n       * Determines whether or a not a text input is valid based on the pattern specified in the attribute. If no matching pattern is found, returns true.\n       * @param {Object} $el - jQuery object to validate, should be a text input HTML element\n       * @param {String} pattern - string value of one of the RegEx patterns in Abide.options.patterns\n       * @returns {Boolean} Boolean value depends on whether or not the input value matches the pattern specified\n       */},{key:'validateText',value:function validateText($el,pattern){// A pattern can be passed to this function, or it will be infered from the input's \"pattern\" attribute, or it's \"type\" attribute\npattern=pattern||$el.attr('pattern')||$el.attr('type');var inputText=$el.val();var valid=false;if(inputText.length){// If the pattern attribute on the element is in Abide's list of patterns, then test that regexp\nif(this.options.patterns.hasOwnProperty(pattern)){valid=this.options.patterns[pattern].test(inputText);}// If the pattern name isn't also the type attribute of the field, then test it as a regexp\nelse if(pattern!==$el.attr('type')){valid=new RegExp(pattern).test(inputText);}else{valid=true;}}// An empty field is valid if it's not required\nelse if(!$el.prop('required')){valid=true;}return valid;}/**\n       * Determines whether or a not a radio input is valid based on whether or not it is required and selected. Although the function targets a single `<input>`, it validates by checking the `required` and `checked` properties of all radio buttons in its group.\n       * @param {String} groupName - A string that specifies the name of a radio button group\n       * @returns {Boolean} Boolean value depends on whether or not at least one radio input has been selected (if it's required)\n       */},{key:'validateRadio',value:function validateRadio(groupName){// If at least one radio in the group has the `required` attribute, the group is considered required\n// Per W3C spec, all radio buttons in a group should have `required`, but we're being nice\nvar $group=this.$element.find(':radio[name=\"'+groupName+'\"]');var valid=false,required=false;// For the group to be required, at least one radio needs to be required\n$group.each(function(i,e){if($(e).attr('required')){required=true;}});if(!required)valid=true;if(!valid){// For the group to be valid, at least one radio needs to be checked\n$group.each(function(i,e){if($(e).prop('checked')){valid=true;}});};return valid;}/**\n       * Determines if a selected input passes a custom validation function. Multiple validations can be used, if passed to the element with `data-validator=\"foo bar baz\"` in a space separated listed.\n       * @param {Object} $el - jQuery input element.\n       * @param {String} validators - a string of function names matching functions in the Abide.options.validators object.\n       * @param {Boolean} required - self explanatory?\n       * @returns {Boolean} - true if validations passed.\n       */},{key:'matchValidation',value:function matchValidation($el,validators,required){var _this4=this;required=required?true:false;var clear=validators.split(' ').map(function(v){return _this4.options.validators[v]($el,required,$el.parent());});return clear.indexOf(false)===-1;}/**\n       * Resets form inputs and styles\n       * @fires Abide#formreset\n       */},{key:'resetForm',value:function resetForm(){var $form=this.$element,opts=this.options;$('.'+opts.labelErrorClass,$form).not('small').removeClass(opts.labelErrorClass);$('.'+opts.inputErrorClass,$form).not('small').removeClass(opts.inputErrorClass);$(opts.formErrorSelector+'.'+opts.formErrorClass).removeClass(opts.formErrorClass);$form.find('[data-abide-error]').css('display','none');$(':input',$form).not(':button, :submit, :reset, :hidden, :radio, :checkbox, [data-abide-ignore]').val('').removeAttr('data-invalid');$(':input:radio',$form).not('[data-abide-ignore]').prop('checked',false).removeAttr('data-invalid');$(':input:checkbox',$form).not('[data-abide-ignore]').prop('checked',false).removeAttr('data-invalid');/**\n         * Fires when the form has been reset.\n         * @event Abide#formreset\n         */$form.trigger('formreset.zf.abide',[$form]);}/**\n       * Destroys an instance of Abide.\n       * Removes error styles and classes from elements, without resetting their values.\n       */},{key:'destroy',value:function destroy(){var _this=this;this.$element.off('.abide').find('[data-abide-error]').css('display','none');this.$inputs.off('.abide').each(function(){_this.removeErrorClasses($(this));});Foundation.unregisterPlugin(this);}}]);return Abide;}();/**\n   * Default settings for plugin\n   */Abide.defaults={/**\n     * The default event to validate inputs. Checkboxes and radios validate immediately.\n     * Remove or change this value for manual validation.\n     * @option\n     * @example 'fieldChange'\n     */validateOn:'fieldChange',/**\n     * Class to be applied to input labels on failed validation.\n     * @option\n     * @example 'is-invalid-label'\n     */labelErrorClass:'is-invalid-label',/**\n     * Class to be applied to inputs on failed validation.\n     * @option\n     * @example 'is-invalid-input'\n     */inputErrorClass:'is-invalid-input',/**\n     * Class selector to use to target Form Errors for show/hide.\n     * @option\n     * @example '.form-error'\n     */formErrorSelector:'.form-error',/**\n     * Class added to Form Errors on failed validation.\n     * @option\n     * @example 'is-visible'\n     */formErrorClass:'is-visible',/**\n     * Set to true to validate text inputs on any value change.\n     * @option\n     * @example false\n     */liveValidate:false,patterns:{alpha:/^[a-zA-Z]+$/,alpha_numeric:/^[a-zA-Z0-9]+$/,integer:/^[-+]?\\d+$/,number:/^[-+]?\\d*(?:[\\.\\,]\\d+)?$/,// amex, visa, diners\ncard:/^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$/,cvv:/^([0-9]){3,4}$/,// http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#valid-e-mail-address\nemail:/^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/,url:/^(https?|ftp|file|ssh):\\/\\/(((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/,// abc.de\ndomain:/^([a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z]{2,8}$/,datetime:/^([0-2][0-9]{3})\\-([0-1][0-9])\\-([0-3][0-9])T([0-5][0-9])\\:([0-5][0-9])\\:([0-5][0-9])(Z|([\\-\\+]([0-1][0-9])\\:00))$/,// YYYY-MM-DD\ndate:/(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31))$/,// HH:MM:SS\ntime:/^(0[0-9]|1[0-9]|2[0-3])(:[0-5][0-9]){2}$/,dateISO:/^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}$/,// MM/DD/YYYY\nmonth_day_year:/^(0[1-9]|1[012])[- \\/.](0[1-9]|[12][0-9]|3[01])[- \\/.]\\d{4}$/,// DD/MM/YYYY\nday_month_year:/^(0[1-9]|[12][0-9]|3[01])[- \\/.](0[1-9]|1[012])[- \\/.]\\d{4}$/,// #FFF or #FFFFFF\ncolor:/^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/},/**\n     * Optional validation functions to be used. `equalTo` being the only default included function.\n     * Functions should return only a boolean if the input is valid or not. Functions are given the following arguments:\n     * el : The jQuery element to validate.\n     * required : Boolean value of the required attribute be present or not.\n     * parent : The direct parent of the input.\n     * @option\n     */validators:{equalTo:function equalTo(el,required,parent){return $('#'+el.attr('data-equalto')).val()===el.val();}}};// Window exports\nFoundation.plugin(Abide,'Abide');}(jQuery);'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}!function($){/**\n   * Accordion module.\n   * @module foundation.accordion\n   * @requires foundation.util.keyboard\n   * @requires foundation.util.motion\n   */var Accordion=function(){/**\n     * Creates a new instance of an accordion.\n     * @class\n     * @fires Accordion#init\n     * @param {jQuery} element - jQuery object to make into an accordion.\n     * @param {Object} options - a plain object with settings to override the default options.\n     */function Accordion(element,options){_classCallCheck(this,Accordion);this.$element=element;this.options=$.extend({},Accordion.defaults,this.$element.data(),options);this._init();Foundation.registerPlugin(this,'Accordion');Foundation.Keyboard.register('Accordion',{'ENTER':'toggle','SPACE':'toggle','ARROW_DOWN':'next','ARROW_UP':'previous'});}/**\n     * Initializes the accordion by animating the preset active pane(s).\n     * @private\n     */_createClass(Accordion,[{key:'_init',value:function _init(){this.$element.attr('role','tablist');this.$tabs=this.$element.children('li, [data-accordion-item]');this.$tabs.each(function(idx,el){var $el=$(el),$content=$el.children('[data-tab-content]'),id=$content[0].id||Foundation.GetYoDigits(6,'accordion'),linkId=el.id||id+'-label';$el.find('a:first').attr({'aria-controls':id,'role':'tab','id':linkId,'aria-expanded':false,'aria-selected':false});$content.attr({'role':'tabpanel','aria-labelledby':linkId,'aria-hidden':true,'id':id});});var $initActive=this.$element.find('.is-active').children('[data-tab-content]');if($initActive.length){this.down($initActive,true);}this._events();}/**\n       * Adds event handlers for items within the accordion.\n       * @private\n       */},{key:'_events',value:function _events(){var _this=this;this.$tabs.each(function(){var $elem=$(this);var $tabContent=$elem.children('[data-tab-content]');if($tabContent.length){$elem.children('a').off('click.zf.accordion keydown.zf.accordion').on('click.zf.accordion',function(e){// $(this).children('a').on('click.zf.accordion', function(e) {\ne.preventDefault();if($elem.hasClass('is-active')){if(_this.options.allowAllClosed||$elem.siblings().hasClass('is-active')){_this.up($tabContent);}}else{_this.down($tabContent);}}).on('keydown.zf.accordion',function(e){Foundation.Keyboard.handleKey(e,'Accordion',{toggle:function toggle(){_this.toggle($tabContent);},next:function next(){var $a=$elem.next().find('a').focus();if(!_this.options.multiExpand){$a.trigger('click.zf.accordion');}},previous:function previous(){var $a=$elem.prev().find('a').focus();if(!_this.options.multiExpand){$a.trigger('click.zf.accordion');}},handled:function handled(){e.preventDefault();e.stopPropagation();}});});}});}/**\n       * Toggles the selected content pane's open/close state.\n       * @param {jQuery} $target - jQuery object of the pane to toggle.\n       * @function\n       */},{key:'toggle',value:function toggle($target){if($target.parent().hasClass('is-active')){if(this.options.allowAllClosed||$target.parent().siblings().hasClass('is-active')){this.up($target);}else{return;}}else{this.down($target);}}/**\n       * Opens the accordion tab defined by `$target`.\n       * @param {jQuery} $target - Accordion pane to open.\n       * @param {Boolean} firstTime - flag to determine if reflow should happen.\n       * @fires Accordion#down\n       * @function\n       */},{key:'down',value:function down($target,firstTime){var _this2=this;if(!this.options.multiExpand&&!firstTime){var $currentActive=this.$element.children('.is-active').children('[data-tab-content]');if($currentActive.length){this.up($currentActive);}}$target.attr('aria-hidden',false).parent('[data-tab-content]').addBack().parent().addClass('is-active');$target.slideDown(this.options.slideSpeed,function(){/**\n           * Fires when the tab is done opening.\n           * @event Accordion#down\n           */_this2.$element.trigger('down.zf.accordion',[$target]);});$('#'+$target.attr('aria-labelledby')).attr({'aria-expanded':true,'aria-selected':true});}/**\n       * Closes the tab defined by `$target`.\n       * @param {jQuery} $target - Accordion tab to close.\n       * @fires Accordion#up\n       * @function\n       */},{key:'up',value:function up($target){var $aunts=$target.parent().siblings(),_this=this;var canClose=this.options.multiExpand?$aunts.hasClass('is-active'):$target.parent().hasClass('is-active');if(!this.options.allowAllClosed&&!canClose){return;}// Foundation.Move(this.options.slideSpeed, $target, function(){\n$target.slideUp(_this.options.slideSpeed,function(){/**\n           * Fires when the tab is done collapsing up.\n           * @event Accordion#up\n           */_this.$element.trigger('up.zf.accordion',[$target]);});// });\n$target.attr('aria-hidden',true).parent().removeClass('is-active');$('#'+$target.attr('aria-labelledby')).attr({'aria-expanded':false,'aria-selected':false});}/**\n       * Destroys an instance of an accordion.\n       * @fires Accordion#destroyed\n       * @function\n       */},{key:'destroy',value:function destroy(){this.$element.find('[data-tab-content]').stop(true).slideUp(0).css('display','');this.$element.find('a').off('.zf.accordion');Foundation.unregisterPlugin(this);}}]);return Accordion;}();Accordion.defaults={/**\n     * Amount of time to animate the opening of an accordion pane.\n     * @option\n     * @example 250\n     */slideSpeed:250,/**\n     * Allow the accordion to have multiple open panes.\n     * @option\n     * @example false\n     */multiExpand:false,/**\n     * Allow the accordion to close all panes.\n     * @option\n     * @example false\n     */allowAllClosed:false};// Window exports\nFoundation.plugin(Accordion,'Accordion');}(jQuery);'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}!function($){/**\n   * AccordionMenu module.\n   * @module foundation.accordionMenu\n   * @requires foundation.util.keyboard\n   * @requires foundation.util.motion\n   * @requires foundation.util.nest\n   */var AccordionMenu=function(){/**\n     * Creates a new instance of an accordion menu.\n     * @class\n     * @fires AccordionMenu#init\n     * @param {jQuery} element - jQuery object to make into an accordion menu.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */function AccordionMenu(element,options){_classCallCheck(this,AccordionMenu);this.$element=element;this.options=$.extend({},AccordionMenu.defaults,this.$element.data(),options);Foundation.Nest.Feather(this.$element,'accordion');this._init();Foundation.registerPlugin(this,'AccordionMenu');Foundation.Keyboard.register('AccordionMenu',{'ENTER':'toggle','SPACE':'toggle','ARROW_RIGHT':'open','ARROW_UP':'up','ARROW_DOWN':'down','ARROW_LEFT':'close','ESCAPE':'closeAll','TAB':'down','SHIFT_TAB':'up'});}/**\n     * Initializes the accordion menu by hiding all nested menus.\n     * @private\n     */_createClass(AccordionMenu,[{key:'_init',value:function _init(){this.$element.find('[data-submenu]').not('.is-active').slideUp(0);//.find('a').css('padding-left', '1rem');\nthis.$element.attr({'role':'tablist','aria-multiselectable':this.options.multiOpen});this.$menuLinks=this.$element.find('.is-accordion-submenu-parent');this.$menuLinks.each(function(){var linkId=this.id||Foundation.GetYoDigits(6,'acc-menu-link'),$elem=$(this),$sub=$elem.children('[data-submenu]'),subId=$sub[0].id||Foundation.GetYoDigits(6,'acc-menu'),isActive=$sub.hasClass('is-active');$elem.attr({'aria-controls':subId,'aria-expanded':isActive,'role':'tab','id':linkId});$sub.attr({'aria-labelledby':linkId,'aria-hidden':!isActive,'role':'tabpanel','id':subId});});var initPanes=this.$element.find('.is-active');if(initPanes.length){var _this=this;initPanes.each(function(){_this.down($(this));});}this._events();}/**\n       * Adds event handlers for items within the menu.\n       * @private\n       */},{key:'_events',value:function _events(){var _this=this;this.$element.find('li').each(function(){var $submenu=$(this).children('[data-submenu]');if($submenu.length){$(this).children('a').off('click.zf.accordionMenu').on('click.zf.accordionMenu',function(e){e.preventDefault();_this.toggle($submenu);});}}).on('keydown.zf.accordionmenu',function(e){var $element=$(this),$elements=$element.parent('ul').children('li'),$prevElement,$nextElement,$target=$element.children('[data-submenu]');$elements.each(function(i){if($(this).is($element)){$prevElement=$elements.eq(Math.max(0,i-1)).find('a').first();$nextElement=$elements.eq(Math.min(i+1,$elements.length-1)).find('a').first();if($(this).children('[data-submenu]:visible').length){// has open sub menu\n$nextElement=$element.find('li:first-child').find('a').first();}if($(this).is(':first-child')){// is first element of sub menu\n$prevElement=$element.parents('li').first().find('a').first();}else if($prevElement.children('[data-submenu]:visible').length){// if previous element has open sub menu\n$prevElement=$prevElement.find('li:last-child').find('a').first();}if($(this).is(':last-child')){// is last element of sub menu\n$nextElement=$element.parents('li').first().next('li').find('a').first();}return;}});Foundation.Keyboard.handleKey(e,'AccordionMenu',{open:function open(){if($target.is(':hidden')){_this.down($target);$target.find('li').first().find('a').first().focus();}},close:function close(){if($target.length&&!$target.is(':hidden')){// close active sub of this item\n_this.up($target);}else if($element.parent('[data-submenu]').length){// close currently open sub\n_this.up($element.parent('[data-submenu]'));$element.parents('li').first().find('a').first().focus();}},up:function up(){$prevElement.attr('tabindex',-1).focus();return true;},down:function down(){$nextElement.attr('tabindex',-1).focus();return true;},toggle:function toggle(){if($element.children('[data-submenu]').length){_this.toggle($element.children('[data-submenu]'));}},closeAll:function closeAll(){_this.hideAll();},handled:function handled(preventDefault){if(preventDefault){e.preventDefault();}e.stopImmediatePropagation();}});});//.attr('tabindex', 0);\n}/**\n       * Closes all panes of the menu.\n       * @function\n       */},{key:'hideAll',value:function hideAll(){this.$element.find('[data-submenu]').slideUp(this.options.slideSpeed);}/**\n       * Toggles the open/close state of a submenu.\n       * @function\n       * @param {jQuery} $target - the submenu to toggle\n       */},{key:'toggle',value:function toggle($target){if(!$target.is(':animated')){if(!$target.is(':hidden')){this.up($target);}else{this.down($target);}}}/**\n       * Opens the sub-menu defined by `$target`.\n       * @param {jQuery} $target - Sub-menu to open.\n       * @fires AccordionMenu#down\n       */},{key:'down',value:function down($target){var _this=this;if(!this.options.multiOpen){this.up(this.$element.find('.is-active').not($target.parentsUntil(this.$element).add($target)));}$target.addClass('is-active').attr({'aria-hidden':false}).parent('.is-accordion-submenu-parent').attr({'aria-expanded':true});//Foundation.Move(this.options.slideSpeed, $target, function() {\n$target.slideDown(_this.options.slideSpeed,function(){/**\n           * Fires when the menu is done opening.\n           * @event AccordionMenu#down\n           */_this.$element.trigger('down.zf.accordionMenu',[$target]);});//});\n}/**\n       * Closes the sub-menu defined by `$target`. All sub-menus inside the target will be closed as well.\n       * @param {jQuery} $target - Sub-menu to close.\n       * @fires AccordionMenu#up\n       */},{key:'up',value:function up($target){var _this=this;//Foundation.Move(this.options.slideSpeed, $target, function(){\n$target.slideUp(_this.options.slideSpeed,function(){/**\n           * Fires when the menu is done collapsing up.\n           * @event AccordionMenu#up\n           */_this.$element.trigger('up.zf.accordionMenu',[$target]);});//});\nvar $menus=$target.find('[data-submenu]').slideUp(0).addBack().attr('aria-hidden',true);$menus.parent('.is-accordion-submenu-parent').attr('aria-expanded',false);}/**\n       * Destroys an instance of accordion menu.\n       * @fires AccordionMenu#destroyed\n       */},{key:'destroy',value:function destroy(){this.$element.find('[data-submenu]').slideDown(0).css('display','');this.$element.find('a').off('click.zf.accordionMenu');Foundation.Nest.Burn(this.$element,'accordion');Foundation.unregisterPlugin(this);}}]);return AccordionMenu;}();AccordionMenu.defaults={/**\n     * Amount of time to animate the opening of a submenu in ms.\n     * @option\n     * @example 250\n     */slideSpeed:250,/**\n     * Allow the menu to have multiple open panes.\n     * @option\n     * @example true\n     */multiOpen:true};// Window exports\nFoundation.plugin(AccordionMenu,'AccordionMenu');}(jQuery);'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}!function($){/**\n   * Drilldown module.\n   * @module foundation.drilldown\n   * @requires foundation.util.keyboard\n   * @requires foundation.util.motion\n   * @requires foundation.util.nest\n   */var Drilldown=function(){/**\n     * Creates a new instance of a drilldown menu.\n     * @class\n     * @param {jQuery} element - jQuery object to make into an accordion menu.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */function Drilldown(element,options){_classCallCheck(this,Drilldown);this.$element=element;this.options=$.extend({},Drilldown.defaults,this.$element.data(),options);Foundation.Nest.Feather(this.$element,'drilldown');this._init();Foundation.registerPlugin(this,'Drilldown');Foundation.Keyboard.register('Drilldown',{'ENTER':'open','SPACE':'open','ARROW_RIGHT':'next','ARROW_UP':'up','ARROW_DOWN':'down','ARROW_LEFT':'previous','ESCAPE':'close','TAB':'down','SHIFT_TAB':'up'});}/**\n     * Initializes the drilldown by creating jQuery collections of elements\n     * @private\n     */_createClass(Drilldown,[{key:'_init',value:function _init(){this.$submenuAnchors=this.$element.find('li.is-drilldown-submenu-parent').children('a');this.$submenus=this.$submenuAnchors.parent('li').children('[data-submenu]');this.$menuItems=this.$element.find('li').not('.js-drilldown-back').attr('role','menuitem').find('a');this._prepareMenu();this._keyboardEvents();}/**\n       * prepares drilldown menu by setting attributes to links and elements\n       * sets a min height to prevent content jumping\n       * wraps the element if not already wrapped\n       * @private\n       * @function\n       */},{key:'_prepareMenu',value:function _prepareMenu(){var _this=this;// if(!this.options.holdOpen){\n//   this._menuLinkEvents();\n// }\nthis.$submenuAnchors.each(function(){var $link=$(this);var $sub=$link.parent();if(_this.options.parentLink){$link.clone().prependTo($sub.children('[data-submenu]')).wrap('<li class=\"is-submenu-parent-item is-submenu-item is-drilldown-submenu-item\" role=\"menu-item\"></li>');}$link.data('savedHref',$link.attr('href')).removeAttr('href');$link.children('[data-submenu]').attr({'aria-hidden':true,'tabindex':0,'role':'menu'});_this._events($link);});this.$submenus.each(function(){var $menu=$(this),$back=$menu.find('.js-drilldown-back');if(!$back.length){$menu.prepend(_this.options.backButton);}_this._back($menu);});if(!this.$element.parent().hasClass('is-drilldown')){this.$wrapper=$(this.options.wrapper).addClass('is-drilldown');this.$wrapper=this.$element.wrap(this.$wrapper).parent().css(this._getMaxDims());}}/**\n       * Adds event handlers to elements in the menu.\n       * @function\n       * @private\n       * @param {jQuery} $elem - the current menu item to add handlers to.\n       */},{key:'_events',value:function _events($elem){var _this=this;$elem.off('click.zf.drilldown').on('click.zf.drilldown',function(e){if($(e.target).parentsUntil('ul','li').hasClass('is-drilldown-submenu-parent')){e.stopImmediatePropagation();e.preventDefault();}// if(e.target !== e.currentTarget.firstElementChild){\n//   return false;\n// }\n_this._show($elem.parent('li'));if(_this.options.closeOnClick){var $body=$('body');$body.off('.zf.drilldown').on('click.zf.drilldown',function(e){if(e.target===_this.$element[0]||$.contains(_this.$element[0],e.target)){return;}e.preventDefault();_this._hideAll();$body.off('.zf.drilldown');});}});}/**\n       * Adds keydown event listener to `li`'s in the menu.\n       * @private\n       */},{key:'_keyboardEvents',value:function _keyboardEvents(){var _this=this;this.$menuItems.add(this.$element.find('.js-drilldown-back > a')).on('keydown.zf.drilldown',function(e){var $element=$(this),$elements=$element.parent('li').parent('ul').children('li').children('a'),$prevElement,$nextElement;$elements.each(function(i){if($(this).is($element)){$prevElement=$elements.eq(Math.max(0,i-1));$nextElement=$elements.eq(Math.min(i+1,$elements.length-1));return;}});Foundation.Keyboard.handleKey(e,'Drilldown',{next:function next(){if($element.is(_this.$submenuAnchors)){_this._show($element.parent('li'));$element.parent('li').one(Foundation.transitionend($element),function(){$element.parent('li').find('ul li a').filter(_this.$menuItems).first().focus();});return true;}},previous:function previous(){_this._hide($element.parent('li').parent('ul'));$element.parent('li').parent('ul').one(Foundation.transitionend($element),function(){setTimeout(function(){$element.parent('li').parent('ul').parent('li').children('a').first().focus();},1);});return true;},up:function up(){$prevElement.focus();return true;},down:function down(){$nextElement.focus();return true;},close:function close(){_this._back();//_this.$menuItems.first().focus(); // focus to first element\n},open:function open(){if(!$element.is(_this.$menuItems)){// not menu item means back button\n_this._hide($element.parent('li').parent('ul'));$element.parent('li').parent('ul').one(Foundation.transitionend($element),function(){setTimeout(function(){$element.parent('li').parent('ul').parent('li').children('a').first().focus();},1);});}else if($element.is(_this.$submenuAnchors)){_this._show($element.parent('li'));$element.parent('li').one(Foundation.transitionend($element),function(){$element.parent('li').find('ul li a').filter(_this.$menuItems).first().focus();});}return true;},handled:function handled(preventDefault){if(preventDefault){e.preventDefault();}e.stopImmediatePropagation();}});});// end keyboardAccess\n}/**\n       * Closes all open elements, and returns to root menu.\n       * @function\n       * @fires Drilldown#closed\n       */},{key:'_hideAll',value:function _hideAll(){var $elem=this.$element.find('.is-drilldown-submenu.is-active').addClass('is-closing');$elem.one(Foundation.transitionend($elem),function(e){$elem.removeClass('is-active is-closing');});/**\n         * Fires when the menu is fully closed.\n         * @event Drilldown#closed\n         */this.$element.trigger('closed.zf.drilldown');}/**\n       * Adds event listener for each `back` button, and closes open menus.\n       * @function\n       * @fires Drilldown#back\n       * @param {jQuery} $elem - the current sub-menu to add `back` event.\n       */},{key:'_back',value:function _back($elem){var _this=this;$elem.off('click.zf.drilldown');$elem.children('.js-drilldown-back').on('click.zf.drilldown',function(e){e.stopImmediatePropagation();// console.log('mouseup on back');\n_this._hide($elem);});}/**\n       * Adds event listener to menu items w/o submenus to close open menus on click.\n       * @function\n       * @private\n       */},{key:'_menuLinkEvents',value:function _menuLinkEvents(){var _this=this;this.$menuItems.not('.is-drilldown-submenu-parent').off('click.zf.drilldown').on('click.zf.drilldown',function(e){// e.stopImmediatePropagation();\nsetTimeout(function(){_this._hideAll();},0);});}/**\n       * Opens a submenu.\n       * @function\n       * @fires Drilldown#open\n       * @param {jQuery} $elem - the current element with a submenu to open, i.e. the `li` tag.\n       */},{key:'_show',value:function _show($elem){$elem.children('[data-submenu]').addClass('is-active');/**\n         * Fires when the submenu has opened.\n         * @event Drilldown#open\n         */this.$element.trigger('open.zf.drilldown',[$elem]);}},{key:'_hide',/**\n       * Hides a submenu\n       * @function\n       * @fires Drilldown#hide\n       * @param {jQuery} $elem - the current sub-menu to hide, i.e. the `ul` tag.\n       */value:function _hide($elem){var _this=this;$elem.addClass('is-closing').one(Foundation.transitionend($elem),function(){$elem.removeClass('is-active is-closing');$elem.blur();});/**\n         * Fires when the submenu has closed.\n         * @event Drilldown#hide\n         */$elem.trigger('hide.zf.drilldown',[$elem]);}/**\n       * Iterates through the nested menus to calculate the min-height, and max-width for the menu.\n       * Prevents content jumping.\n       * @function\n       * @private\n       */},{key:'_getMaxDims',value:function _getMaxDims(){var max=0,result={};this.$submenus.add(this.$element).each(function(){var numOfElems=$(this).children('li').length;max=numOfElems>max?numOfElems:max;});result['min-height']=max*this.$menuItems[0].getBoundingClientRect().height+'px';result['max-width']=this.$element[0].getBoundingClientRect().width+'px';return result;}/**\n       * Destroys the Drilldown Menu\n       * @function\n       */},{key:'destroy',value:function destroy(){this._hideAll();Foundation.Nest.Burn(this.$element,'drilldown');this.$element.unwrap().find('.js-drilldown-back, .is-submenu-parent-item').remove().end().find('.is-active, .is-closing, .is-drilldown-submenu').removeClass('is-active is-closing is-drilldown-submenu').end().find('[data-submenu]').removeAttr('aria-hidden tabindex role');this.$submenuAnchors.each(function(){$(this).off('.zf.drilldown');});this.$element.find('a').each(function(){var $link=$(this);if($link.data('savedHref')){$link.attr('href',$link.data('savedHref')).removeData('savedHref');}else{return;}});Foundation.unregisterPlugin(this);}}]);return Drilldown;}();Drilldown.defaults={/**\n     * Markup used for JS generated back button. Prepended to submenu lists and deleted on `destroy` method, 'js-drilldown-back' class required. Remove the backslash (`\\`) if copy and pasting.\n     * @option\n     * @example '<\\li><\\a>Back<\\/a><\\/li>'\n     */backButton:'<li class=\"js-drilldown-back\"><a tabindex=\"0\">Back</a></li>',/**\n     * Markup used to wrap drilldown menu. Use a class name for independent styling; the JS applied class: `is-drilldown` is required. Remove the backslash (`\\`) if copy and pasting.\n     * @option\n     * @example '<\\div class=\"is-drilldown\"><\\/div>'\n     */wrapper:'<div></div>',/**\n     * Adds the parent link to the submenu.\n     * @option\n     * @example false\n     */parentLink:false,/**\n     * Allow the menu to return to root list on body click.\n     * @option\n     * @example false\n     */closeOnClick:false// holdOpen: false\n};// Window exports\nFoundation.plugin(Drilldown,'Drilldown');}(jQuery);'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}!function($){/**\n   * Dropdown module.\n   * @module foundation.dropdown\n   * @requires foundation.util.keyboard\n   * @requires foundation.util.box\n   * @requires foundation.util.triggers\n   */var Dropdown=function(){/**\n     * Creates a new instance of a dropdown.\n     * @class\n     * @param {jQuery} element - jQuery object to make into a dropdown.\n     *        Object should be of the dropdown panel, rather than its anchor.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */function Dropdown(element,options){_classCallCheck(this,Dropdown);this.$element=element;this.options=$.extend({},Dropdown.defaults,this.$element.data(),options);this._init();Foundation.registerPlugin(this,'Dropdown');Foundation.Keyboard.register('Dropdown',{'ENTER':'open','SPACE':'open','ESCAPE':'close','TAB':'tab_forward','SHIFT_TAB':'tab_backward'});}/**\n     * Initializes the plugin by setting/checking options and attributes, adding helper variables, and saving the anchor.\n     * @function\n     * @private\n     */_createClass(Dropdown,[{key:'_init',value:function _init(){var $id=this.$element.attr('id');this.$anchor=$('[data-toggle=\"'+$id+'\"]')||$('[data-open=\"'+$id+'\"]');this.$anchor.attr({'aria-controls':$id,'data-is-focus':false,'data-yeti-box':$id,'aria-haspopup':true,'aria-expanded':false});this.options.positionClass=this.getPositionClass();this.counter=4;this.usedPositions=[];this.$element.attr({'aria-hidden':'true','data-yeti-box':$id,'data-resize':$id,'aria-labelledby':this.$anchor[0].id||Foundation.GetYoDigits(6,'dd-anchor')});this._events();}/**\n       * Helper function to determine current orientation of dropdown pane.\n       * @function\n       * @returns {String} position - string value of a position class.\n       */},{key:'getPositionClass',value:function getPositionClass(){var verticalPosition=this.$element[0].className.match(/(top|left|right|bottom)/g);verticalPosition=verticalPosition?verticalPosition[0]:'';var horizontalPosition=/float-(\\S+)\\s/.exec(this.$anchor[0].className);horizontalPosition=horizontalPosition?horizontalPosition[1]:'';var position=horizontalPosition?horizontalPosition+' '+verticalPosition:verticalPosition;return position;}/**\n       * Adjusts the dropdown panes orientation by adding/removing positioning classes.\n       * @function\n       * @private\n       * @param {String} position - position class to remove.\n       */},{key:'_reposition',value:function _reposition(position){this.usedPositions.push(position?position:'bottom');//default, try switching to opposite side\nif(!position&&this.usedPositions.indexOf('top')<0){this.$element.addClass('top');}else if(position==='top'&&this.usedPositions.indexOf('bottom')<0){this.$element.removeClass(position);}else if(position==='left'&&this.usedPositions.indexOf('right')<0){this.$element.removeClass(position).addClass('right');}else if(position==='right'&&this.usedPositions.indexOf('left')<0){this.$element.removeClass(position).addClass('left');}//if default change didn't work, try bottom or left first\nelse if(!position&&this.usedPositions.indexOf('top')>-1&&this.usedPositions.indexOf('left')<0){this.$element.addClass('left');}else if(position==='top'&&this.usedPositions.indexOf('bottom')>-1&&this.usedPositions.indexOf('left')<0){this.$element.removeClass(position).addClass('left');}else if(position==='left'&&this.usedPositions.indexOf('right')>-1&&this.usedPositions.indexOf('bottom')<0){this.$element.removeClass(position);}else if(position==='right'&&this.usedPositions.indexOf('left')>-1&&this.usedPositions.indexOf('bottom')<0){this.$element.removeClass(position);}//if nothing cleared, set to bottom\nelse{this.$element.removeClass(position);}this.classChanged=true;this.counter--;}/**\n       * Sets the position and orientation of the dropdown pane, checks for collisions.\n       * Recursively calls itself if a collision is detected, with a new position class.\n       * @function\n       * @private\n       */},{key:'_setPosition',value:function _setPosition(){if(this.$anchor.attr('aria-expanded')==='false'){return false;}var position=this.getPositionClass(),$eleDims=Foundation.Box.GetDimensions(this.$element),$anchorDims=Foundation.Box.GetDimensions(this.$anchor),_this=this,direction=position==='left'?'left':position==='right'?'left':'top',param=direction==='top'?'height':'width',offset=param==='height'?this.options.vOffset:this.options.hOffset;if($eleDims.width>=$eleDims.windowDims.width||!this.counter&&!Foundation.Box.ImNotTouchingYou(this.$element)){this.$element.offset(Foundation.Box.GetOffsets(this.$element,this.$anchor,'center bottom',this.options.vOffset,this.options.hOffset,true)).css({'width':$eleDims.windowDims.width-this.options.hOffset*2,'height':'auto'});this.classChanged=true;return false;}this.$element.offset(Foundation.Box.GetOffsets(this.$element,this.$anchor,position,this.options.vOffset,this.options.hOffset));while(!Foundation.Box.ImNotTouchingYou(this.$element,false,true)&&this.counter){this._reposition(position);this._setPosition();}}/**\n       * Adds event listeners to the element utilizing the triggers utility library.\n       * @function\n       * @private\n       */},{key:'_events',value:function _events(){var _this=this;this.$element.on({'open.zf.trigger':this.open.bind(this),'close.zf.trigger':this.close.bind(this),'toggle.zf.trigger':this.toggle.bind(this),'resizeme.zf.trigger':this._setPosition.bind(this)});if(this.options.hover){this.$anchor.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown',function(){clearTimeout(_this.timeout);_this.timeout=setTimeout(function(){_this.open();_this.$anchor.data('hover',true);},_this.options.hoverDelay);}).on('mouseleave.zf.dropdown',function(){clearTimeout(_this.timeout);_this.timeout=setTimeout(function(){_this.close();_this.$anchor.data('hover',false);},_this.options.hoverDelay);});if(this.options.hoverPane){this.$element.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown',function(){clearTimeout(_this.timeout);}).on('mouseleave.zf.dropdown',function(){clearTimeout(_this.timeout);_this.timeout=setTimeout(function(){_this.close();_this.$anchor.data('hover',false);},_this.options.hoverDelay);});}}this.$anchor.add(this.$element).on('keydown.zf.dropdown',function(e){var $target=$(this),visibleFocusableElements=Foundation.Keyboard.findFocusable(_this.$element);Foundation.Keyboard.handleKey(e,'Dropdown',{tab_forward:function tab_forward(){if(_this.$element.find(':focus').is(visibleFocusableElements.eq(-1))){// left modal downwards, setting focus to first element\nif(_this.options.trapFocus){// if focus shall be trapped\nvisibleFocusableElements.eq(0).focus();e.preventDefault();}else{// if focus is not trapped, close dropdown on focus out\n_this.close();}}},tab_backward:function tab_backward(){if(_this.$element.find(':focus').is(visibleFocusableElements.eq(0))||_this.$element.is(':focus')){// left modal upwards, setting focus to last element\nif(_this.options.trapFocus){// if focus shall be trapped\nvisibleFocusableElements.eq(-1).focus();e.preventDefault();}else{// if focus is not trapped, close dropdown on focus out\n_this.close();}}},open:function open(){if($target.is(_this.$anchor)){_this.open();_this.$element.attr('tabindex',-1).focus();e.preventDefault();}},close:function close(){_this.close();_this.$anchor.focus();}});});}/**\n       * Adds an event handler to the body to close any dropdowns on a click.\n       * @function\n       * @private\n       */},{key:'_addBodyHandler',value:function _addBodyHandler(){var $body=$(document.body).not(this.$element),_this=this;$body.off('click.zf.dropdown').on('click.zf.dropdown',function(e){if(_this.$anchor.is(e.target)||_this.$anchor.find(e.target).length){return;}if(_this.$element.find(e.target).length){return;}_this.close();$body.off('click.zf.dropdown');});}/**\n       * Opens the dropdown pane, and fires a bubbling event to close other dropdowns.\n       * @function\n       * @fires Dropdown#closeme\n       * @fires Dropdown#show\n       */},{key:'open',value:function open(){// var _this = this;\n/**\n         * Fires to close other open dropdowns\n         * @event Dropdown#closeme\n         */this.$element.trigger('closeme.zf.dropdown',this.$element.attr('id'));this.$anchor.addClass('hover').attr({'aria-expanded':true});// this.$element/*.show()*/;\nthis._setPosition();this.$element.addClass('is-open').attr({'aria-hidden':false});if(this.options.autoFocus){var $focusable=Foundation.Keyboard.findFocusable(this.$element);if($focusable.length){$focusable.eq(0).focus();}}if(this.options.closeOnClick){this._addBodyHandler();}/**\n         * Fires once the dropdown is visible.\n         * @event Dropdown#show\n         */this.$element.trigger('show.zf.dropdown',[this.$element]);}/**\n       * Closes the open dropdown pane.\n       * @function\n       * @fires Dropdown#hide\n       */},{key:'close',value:function close(){if(!this.$element.hasClass('is-open')){return false;}this.$element.removeClass('is-open').attr({'aria-hidden':true});this.$anchor.removeClass('hover').attr('aria-expanded',false);if(this.classChanged){var curPositionClass=this.getPositionClass();if(curPositionClass){this.$element.removeClass(curPositionClass);}this.$element.addClass(this.options.positionClass)/*.hide()*/.css({height:'',width:''});this.classChanged=false;this.counter=4;this.usedPositions.length=0;}this.$element.trigger('hide.zf.dropdown',[this.$element]);}/**\n       * Toggles the dropdown pane's visibility.\n       * @function\n       */},{key:'toggle',value:function toggle(){if(this.$element.hasClass('is-open')){if(this.$anchor.data('hover'))return;this.close();}else{this.open();}}/**\n       * Destroys the dropdown.\n       * @function\n       */},{key:'destroy',value:function destroy(){this.$element.off('.zf.trigger').hide();this.$anchor.off('.zf.dropdown');Foundation.unregisterPlugin(this);}}]);return Dropdown;}();Dropdown.defaults={/**\n     * Amount of time to delay opening a submenu on hover event.\n     * @option\n     * @example 250\n     */hoverDelay:250,/**\n     * Allow submenus to open on hover events\n     * @option\n     * @example false\n     */hover:false,/**\n     * Don't close dropdown when hovering over dropdown pane\n     * @option\n     * @example true\n     */hoverPane:false,/**\n     * Number of pixels between the dropdown pane and the triggering element on open.\n     * @option\n     * @example 1\n     */vOffset:1,/**\n     * Number of pixels between the dropdown pane and the triggering element on open.\n     * @option\n     * @example 1\n     */hOffset:1,/**\n     * Class applied to adjust open position. JS will test and fill this in.\n     * @option\n     * @example 'top'\n     */positionClass:'',/**\n     * Allow the plugin to trap focus to the dropdown pane if opened with keyboard commands.\n     * @option\n     * @example false\n     */trapFocus:false,/**\n     * Allow the plugin to set focus to the first focusable element within the pane, regardless of method of opening.\n     * @option\n     * @example true\n     */autoFocus:false,/**\n     * Allows a click on the body to close the dropdown.\n     * @option\n     * @example false\n     */closeOnClick:false};// Window exports\nFoundation.plugin(Dropdown,'Dropdown');}(jQuery);'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}!function($){/**\n   * DropdownMenu module.\n   * @module foundation.dropdown-menu\n   * @requires foundation.util.keyboard\n   * @requires foundation.util.box\n   * @requires foundation.util.nest\n   */var DropdownMenu=function(){/**\n     * Creates a new instance of DropdownMenu.\n     * @class\n     * @fires DropdownMenu#init\n     * @param {jQuery} element - jQuery object to make into a dropdown menu.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */function DropdownMenu(element,options){_classCallCheck(this,DropdownMenu);this.$element=element;this.options=$.extend({},DropdownMenu.defaults,this.$element.data(),options);Foundation.Nest.Feather(this.$element,'dropdown');this._init();Foundation.registerPlugin(this,'DropdownMenu');Foundation.Keyboard.register('DropdownMenu',{'ENTER':'open','SPACE':'open','ARROW_RIGHT':'next','ARROW_UP':'up','ARROW_DOWN':'down','ARROW_LEFT':'previous','ESCAPE':'close'});}/**\n     * Initializes the plugin, and calls _prepareMenu\n     * @private\n     * @function\n     */_createClass(DropdownMenu,[{key:'_init',value:function _init(){var subs=this.$element.find('li.is-dropdown-submenu-parent');this.$element.children('.is-dropdown-submenu-parent').children('.is-dropdown-submenu').addClass('first-sub');this.$menuItems=this.$element.find('[role=\"menuitem\"]');this.$tabs=this.$element.children('[role=\"menuitem\"]');this.$tabs.find('ul.is-dropdown-submenu').addClass(this.options.verticalClass);if(this.$element.hasClass(this.options.rightClass)||this.options.alignment==='right'||Foundation.rtl()||this.$element.parents('.top-bar-right').is('*')){this.options.alignment='right';subs.addClass('opens-left');}else{subs.addClass('opens-right');}this.changed=false;this._events();}},{key:'_events',/**\n       * Adds event listeners to elements within the menu\n       * @private\n       * @function\n       */value:function _events(){var _this=this,hasTouch='ontouchstart'in window||typeof window.ontouchstart!=='undefined',parClass='is-dropdown-submenu-parent';// used for onClick and in the keyboard handlers\nvar handleClickFn=function handleClickFn(e){var $elem=$(e.target).parentsUntil('ul','.'+parClass),hasSub=$elem.hasClass(parClass),hasClicked=$elem.attr('data-is-click')==='true',$sub=$elem.children('.is-dropdown-submenu');if(hasSub){if(hasClicked){if(!_this.options.closeOnClick||!_this.options.clickOpen&&!hasTouch||_this.options.forceFollow&&hasTouch){return;}else{e.stopImmediatePropagation();e.preventDefault();_this._hide($elem);}}else{e.preventDefault();e.stopImmediatePropagation();_this._show($elem.children('.is-dropdown-submenu'));$elem.add($elem.parentsUntil(_this.$element,'.'+parClass)).attr('data-is-click',true);}}else{return;}};if(this.options.clickOpen||hasTouch){this.$menuItems.on('click.zf.dropdownmenu touchstart.zf.dropdownmenu',handleClickFn);}if(!this.options.disableHover){this.$menuItems.on('mouseenter.zf.dropdownmenu',function(e){var $elem=$(this),hasSub=$elem.hasClass(parClass);if(hasSub){clearTimeout(_this.delay);_this.delay=setTimeout(function(){_this._show($elem.children('.is-dropdown-submenu'));},_this.options.hoverDelay);}}).on('mouseleave.zf.dropdownmenu',function(e){var $elem=$(this),hasSub=$elem.hasClass(parClass);if(hasSub&&_this.options.autoclose){if($elem.attr('data-is-click')==='true'&&_this.options.clickOpen){return false;}clearTimeout(_this.delay);_this.delay=setTimeout(function(){_this._hide($elem);},_this.options.closingTime);}});}this.$menuItems.on('keydown.zf.dropdownmenu',function(e){var $element=$(e.target).parentsUntil('ul','[role=\"menuitem\"]'),isTab=_this.$tabs.index($element)>-1,$elements=isTab?_this.$tabs:$element.siblings('li').add($element),$prevElement,$nextElement;$elements.each(function(i){if($(this).is($element)){$prevElement=$elements.eq(i-1);$nextElement=$elements.eq(i+1);return;}});var nextSibling=function nextSibling(){if(!$element.is(':last-child')){$nextElement.children('a:first').focus();e.preventDefault();}},prevSibling=function prevSibling(){$prevElement.children('a:first').focus();e.preventDefault();},openSub=function openSub(){var $sub=$element.children('ul.is-dropdown-submenu');if($sub.length){_this._show($sub);$element.find('li > a:first').focus();e.preventDefault();}else{return;}},closeSub=function closeSub(){//if ($element.is(':first-child')) {\nvar close=$element.parent('ul').parent('li');close.children('a:first').focus();_this._hide(close);e.preventDefault();//}\n};var functions={open:openSub,close:function close(){_this._hide(_this.$element);_this.$menuItems.find('a:first').focus();// focus to first element\ne.preventDefault();},handled:function handled(){e.stopImmediatePropagation();}};if(isTab){if(_this.$element.hasClass(_this.options.verticalClass)){// vertical menu\nif(_this.options.alignment==='left'){// left aligned\n$.extend(functions,{down:nextSibling,up:prevSibling,next:openSub,previous:closeSub});}else{// right aligned\n$.extend(functions,{down:nextSibling,up:prevSibling,next:closeSub,previous:openSub});}}else{// horizontal menu\n$.extend(functions,{next:nextSibling,previous:prevSibling,down:openSub,up:closeSub});}}else{// not tabs -> one sub\nif(_this.options.alignment==='left'){// left aligned\n$.extend(functions,{next:openSub,previous:closeSub,down:nextSibling,up:prevSibling});}else{// right aligned\n$.extend(functions,{next:closeSub,previous:openSub,down:nextSibling,up:prevSibling});}}Foundation.Keyboard.handleKey(e,'DropdownMenu',functions);});}/**\n       * Adds an event handler to the body to close any dropdowns on a click.\n       * @function\n       * @private\n       */},{key:'_addBodyHandler',value:function _addBodyHandler(){var $body=$(document.body),_this=this;$body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu').on('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu',function(e){var $link=_this.$element.find(e.target);if($link.length){return;}_this._hide();$body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu');});}/**\n       * Opens a dropdown pane, and checks for collisions first.\n       * @param {jQuery} $sub - ul element that is a submenu to show\n       * @function\n       * @private\n       * @fires DropdownMenu#show\n       */},{key:'_show',value:function _show($sub){var idx=this.$tabs.index(this.$tabs.filter(function(i,el){return $(el).find($sub).length>0;}));var $sibs=$sub.parent('li.is-dropdown-submenu-parent').siblings('li.is-dropdown-submenu-parent');this._hide($sibs,idx);$sub.css('visibility','hidden').addClass('js-dropdown-active').attr({'aria-hidden':false}).parent('li.is-dropdown-submenu-parent').addClass('is-active').attr({'aria-expanded':true});var clear=Foundation.Box.ImNotTouchingYou($sub,null,true);if(!clear){var oldClass=this.options.alignment==='left'?'-right':'-left',$parentLi=$sub.parent('.is-dropdown-submenu-parent');$parentLi.removeClass('opens'+oldClass).addClass('opens-'+this.options.alignment);clear=Foundation.Box.ImNotTouchingYou($sub,null,true);if(!clear){$parentLi.removeClass('opens-'+this.options.alignment).addClass('opens-inner');}this.changed=true;}$sub.css('visibility','');if(this.options.closeOnClick){this._addBodyHandler();}/**\n         * Fires when the new dropdown pane is visible.\n         * @event DropdownMenu#show\n         */this.$element.trigger('show.zf.dropdownmenu',[$sub]);}/**\n       * Hides a single, currently open dropdown pane, if passed a parameter, otherwise, hides everything.\n       * @function\n       * @param {jQuery} $elem - element with a submenu to hide\n       * @param {Number} idx - index of the $tabs collection to hide\n       * @private\n       */},{key:'_hide',value:function _hide($elem,idx){var $toClose;if($elem&&$elem.length){$toClose=$elem;}else if(idx!==undefined){$toClose=this.$tabs.not(function(i,el){return i===idx;});}else{$toClose=this.$element;}var somethingToClose=$toClose.hasClass('is-active')||$toClose.find('.is-active').length>0;if(somethingToClose){$toClose.find('li.is-active').add($toClose).attr({'aria-expanded':false,'data-is-click':false}).removeClass('is-active');$toClose.find('ul.js-dropdown-active').attr({'aria-hidden':true}).removeClass('js-dropdown-active');if(this.changed||$toClose.find('opens-inner').length){var oldClass=this.options.alignment==='left'?'right':'left';$toClose.find('li.is-dropdown-submenu-parent').add($toClose).removeClass('opens-inner opens-'+this.options.alignment).addClass('opens-'+oldClass);this.changed=false;}/**\n           * Fires when the open menus are closed.\n           * @event DropdownMenu#hide\n           */this.$element.trigger('hide.zf.dropdownmenu',[$toClose]);}}/**\n       * Destroys the plugin.\n       * @function\n       */},{key:'destroy',value:function destroy(){this.$menuItems.off('.zf.dropdownmenu').removeAttr('data-is-click').removeClass('is-right-arrow is-left-arrow is-down-arrow opens-right opens-left opens-inner');$(document.body).off('.zf.dropdownmenu');Foundation.Nest.Burn(this.$element,'dropdown');Foundation.unregisterPlugin(this);}}]);return DropdownMenu;}();/**\n   * Default settings for plugin\n   */DropdownMenu.defaults={/**\n     * Disallows hover events from opening submenus\n     * @option\n     * @example false\n     */disableHover:false,/**\n     * Allow a submenu to automatically close on a mouseleave event, if not clicked open.\n     * @option\n     * @example true\n     */autoclose:true,/**\n     * Amount of time to delay opening a submenu on hover event.\n     * @option\n     * @example 50\n     */hoverDelay:50,/**\n     * Allow a submenu to open/remain open on parent click event. Allows cursor to move away from menu.\n     * @option\n     * @example true\n     */clickOpen:false,/**\n     * Amount of time to delay closing a submenu on a mouseleave event.\n     * @option\n     * @example 500\n     */closingTime:500,/**\n     * Position of the menu relative to what direction the submenus should open. Handled by JS.\n     * @option\n     * @example 'left'\n     */alignment:'left',/**\n     * Allow clicks on the body to close any open submenus.\n     * @option\n     * @example true\n     */closeOnClick:true,/**\n     * Class applied to vertical oriented menus, Foundation default is `vertical`. Update this if using your own class.\n     * @option\n     * @example 'vertical'\n     */verticalClass:'vertical',/**\n     * Class applied to right-side oriented menus, Foundation default is `align-right`. Update this if using your own class.\n     * @option\n     * @example 'align-right'\n     */rightClass:'align-right',/**\n     * Boolean to force overide the clicking of links to perform default action, on second touch event for mobile.\n     * @option\n     * @example false\n     */forceFollow:true};// Window exports\nFoundation.plugin(DropdownMenu,'DropdownMenu');}(jQuery);'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}!function($){/**\n   * Equalizer module.\n   * @module foundation.equalizer\n   */var Equalizer=function(){/**\n     * Creates a new instance of Equalizer.\n     * @class\n     * @fires Equalizer#init\n     * @param {Object} element - jQuery object to add the trigger to.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */function Equalizer(element,options){_classCallCheck(this,Equalizer);this.$element=element;this.options=$.extend({},Equalizer.defaults,this.$element.data(),options);this._init();Foundation.registerPlugin(this,'Equalizer');}/**\n     * Initializes the Equalizer plugin and calls functions to get equalizer functioning on load.\n     * @private\n     */_createClass(Equalizer,[{key:'_init',value:function _init(){var eqId=this.$element.attr('data-equalizer')||'';var $watched=this.$element.find('[data-equalizer-watch=\"'+eqId+'\"]');this.$watched=$watched.length?$watched:this.$element.find('[data-equalizer-watch]');this.$element.attr('data-resize',eqId||Foundation.GetYoDigits(6,'eq'));this.hasNested=this.$element.find('[data-equalizer]').length>0;this.isNested=this.$element.parentsUntil(document.body,'[data-equalizer]').length>0;this.isOn=false;this._bindHandler={onResizeMeBound:this._onResizeMe.bind(this),onPostEqualizedBound:this._onPostEqualized.bind(this)};var imgs=this.$element.find('img');var tooSmall;if(this.options.equalizeOn){tooSmall=this._checkMQ();$(window).on('changed.zf.mediaquery',this._checkMQ.bind(this));}else{this._events();}if(tooSmall!==undefined&&tooSmall===false||tooSmall===undefined){if(imgs.length){Foundation.onImagesLoaded(imgs,this._reflow.bind(this));}else{this._reflow();}}}/**\n       * Removes event listeners if the breakpoint is too small.\n       * @private\n       */},{key:'_pauseEvents',value:function _pauseEvents(){this.isOn=false;this.$element.off({'.zf.equalizer':this._bindHandler.onPostEqualizedBound,'resizeme.zf.trigger':this._bindHandler.onResizeMeBound});}/**\n       * function to handle $elements resizeme.zf.trigger, with bound this on _bindHandler.onResizeMeBound\n       * @private\n       */},{key:'_onResizeMe',value:function _onResizeMe(e){this._reflow();}/**\n       * function to handle $elements postequalized.zf.equalizer, with bound this on _bindHandler.onPostEqualizedBound\n       * @private\n       */},{key:'_onPostEqualized',value:function _onPostEqualized(e){if(e.target!==this.$element[0]){this._reflow();}}/**\n       * Initializes events for Equalizer.\n       * @private\n       */},{key:'_events',value:function _events(){var _this=this;this._pauseEvents();if(this.hasNested){this.$element.on('postequalized.zf.equalizer',this._bindHandler.onPostEqualizedBound);}else{this.$element.on('resizeme.zf.trigger',this._bindHandler.onResizeMeBound);}this.isOn=true;}/**\n       * Checks the current breakpoint to the minimum required size.\n       * @private\n       */},{key:'_checkMQ',value:function _checkMQ(){var tooSmall=!Foundation.MediaQuery.atLeast(this.options.equalizeOn);if(tooSmall){if(this.isOn){this._pauseEvents();this.$watched.css('height','auto');}}else{if(!this.isOn){this._events();}}return tooSmall;}/**\n       * A noop version for the plugin\n       * @private\n       */},{key:'_killswitch',value:function _killswitch(){return;}/**\n       * Calls necessary functions to update Equalizer upon DOM change\n       * @private\n       */},{key:'_reflow',value:function _reflow(){if(!this.options.equalizeOnStack){if(this._isStacked()){this.$watched.css('height','auto');return false;}}if(this.options.equalizeByRow){this.getHeightsByRow(this.applyHeightByRow.bind(this));}else{this.getHeights(this.applyHeight.bind(this));}}/**\n       * Manually determines if the first 2 elements are *NOT* stacked.\n       * @private\n       */},{key:'_isStacked',value:function _isStacked(){return this.$watched[0].getBoundingClientRect().top!==this.$watched[1].getBoundingClientRect().top;}/**\n       * Finds the outer heights of children contained within an Equalizer parent and returns them in an array\n       * @param {Function} cb - A non-optional callback to return the heights array to.\n       * @returns {Array} heights - An array of heights of children within Equalizer container\n       */},{key:'getHeights',value:function getHeights(cb){var heights=[];for(var i=0,len=this.$watched.length;i<len;i++){this.$watched[i].style.height='auto';heights.push(this.$watched[i].offsetHeight);}cb(heights);}/**\n       * Finds the outer heights of children contained within an Equalizer parent and returns them in an array\n       * @param {Function} cb - A non-optional callback to return the heights array to.\n       * @returns {Array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child\n       */},{key:'getHeightsByRow',value:function getHeightsByRow(cb){var lastElTopOffset=this.$watched.length?this.$watched.first().offset().top:0,groups=[],group=0;//group by Row\ngroups[group]=[];for(var i=0,len=this.$watched.length;i<len;i++){this.$watched[i].style.height='auto';//maybe could use this.$watched[i].offsetTop\nvar elOffsetTop=$(this.$watched[i]).offset().top;if(elOffsetTop!=lastElTopOffset){group++;groups[group]=[];lastElTopOffset=elOffsetTop;}groups[group].push([this.$watched[i],this.$watched[i].offsetHeight]);}for(var j=0,ln=groups.length;j<ln;j++){var heights=$(groups[j]).map(function(){return this[1];}).get();var max=Math.max.apply(null,heights);groups[j].push(max);}cb(groups);}/**\n       * Changes the CSS height property of each child in an Equalizer parent to match the tallest\n       * @param {array} heights - An array of heights of children within Equalizer container\n       * @fires Equalizer#preequalized\n       * @fires Equalizer#postequalized\n       */},{key:'applyHeight',value:function applyHeight(heights){var max=Math.max.apply(null,heights);/**\n         * Fires before the heights are applied\n         * @event Equalizer#preequalized\n         */this.$element.trigger('preequalized.zf.equalizer');this.$watched.css('height',max);/**\n         * Fires when the heights have been applied\n         * @event Equalizer#postequalized\n         */this.$element.trigger('postequalized.zf.equalizer');}/**\n       * Changes the CSS height property of each child in an Equalizer parent to match the tallest by row\n       * @param {array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child\n       * @fires Equalizer#preequalized\n       * @fires Equalizer#preequalizedRow\n       * @fires Equalizer#postequalizedRow\n       * @fires Equalizer#postequalized\n       */},{key:'applyHeightByRow',value:function applyHeightByRow(groups){/**\n         * Fires before the heights are applied\n         */this.$element.trigger('preequalized.zf.equalizer');for(var i=0,len=groups.length;i<len;i++){var groupsILength=groups[i].length,max=groups[i][groupsILength-1];if(groupsILength<=2){$(groups[i][0][0]).css({'height':'auto'});continue;}/**\n            * Fires before the heights per row are applied\n            * @event Equalizer#preequalizedRow\n            */this.$element.trigger('preequalizedrow.zf.equalizer');for(var j=0,lenJ=groupsILength-1;j<lenJ;j++){$(groups[i][j][0]).css({'height':max});}/**\n            * Fires when the heights per row have been applied\n            * @event Equalizer#postequalizedRow\n            */this.$element.trigger('postequalizedrow.zf.equalizer');}/**\n         * Fires when the heights have been applied\n         */this.$element.trigger('postequalized.zf.equalizer');}/**\n       * Destroys an instance of Equalizer.\n       * @function\n       */},{key:'destroy',value:function destroy(){this._pauseEvents();this.$watched.css('height','auto');Foundation.unregisterPlugin(this);}}]);return Equalizer;}();/**\n   * Default settings for plugin\n   */Equalizer.defaults={/**\n     * Enable height equalization when stacked on smaller screens.\n     * @option\n     * @example true\n     */equalizeOnStack:true,/**\n     * Enable height equalization row by row.\n     * @option\n     * @example false\n     */equalizeByRow:false,/**\n     * String representing the minimum breakpoint size the plugin should equalize heights on.\n     * @option\n     * @example 'medium'\n     */equalizeOn:''};// Window exports\nFoundation.plugin(Equalizer,'Equalizer');}(jQuery);'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}!function($){/**\n   * Interchange module.\n   * @module foundation.interchange\n   * @requires foundation.util.mediaQuery\n   * @requires foundation.util.timerAndImageLoader\n   */var Interchange=function(){/**\n     * Creates a new instance of Interchange.\n     * @class\n     * @fires Interchange#init\n     * @param {Object} element - jQuery object to add the trigger to.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */function Interchange(element,options){_classCallCheck(this,Interchange);this.$element=element;this.options=$.extend({},Interchange.defaults,options);this.rules=[];this.currentPath='';this._init();this._events();Foundation.registerPlugin(this,'Interchange');}/**\n     * Initializes the Interchange plugin and calls functions to get interchange functioning on load.\n     * @function\n     * @private\n     */_createClass(Interchange,[{key:'_init',value:function _init(){this._addBreakpoints();this._generateRules();this._reflow();}/**\n       * Initializes events for Interchange.\n       * @function\n       * @private\n       */},{key:'_events',value:function _events(){$(window).on('resize.zf.interchange',Foundation.util.throttle(this._reflow.bind(this),50));}/**\n       * Calls necessary functions to update Interchange upon DOM change\n       * @function\n       * @private\n       */},{key:'_reflow',value:function _reflow(){var match;// Iterate through each rule, but only save the last match\nfor(var i in this.rules){if(this.rules.hasOwnProperty(i)){var rule=this.rules[i];if(window.matchMedia(rule.query).matches){match=rule;}}}if(match){this.replace(match.path);}}/**\n       * Gets the Foundation breakpoints and adds them to the Interchange.SPECIAL_QUERIES object.\n       * @function\n       * @private\n       */},{key:'_addBreakpoints',value:function _addBreakpoints(){for(var i in Foundation.MediaQuery.queries){if(Foundation.MediaQuery.queries.hasOwnProperty(i)){var query=Foundation.MediaQuery.queries[i];Interchange.SPECIAL_QUERIES[query.name]=query.value;}}}/**\n       * Checks the Interchange element for the provided media query + content pairings\n       * @function\n       * @private\n       * @param {Object} element - jQuery object that is an Interchange instance\n       * @returns {Array} scenarios - Array of objects that have 'mq' and 'path' keys with corresponding keys\n       */},{key:'_generateRules',value:function _generateRules(element){var rulesList=[];var rules;if(this.options.rules){rules=this.options.rules;}else{rules=this.$element.data('interchange').match(/\\[.*?\\]/g);}for(var i in rules){if(rules.hasOwnProperty(i)){var rule=rules[i].slice(1,-1).split(', ');var path=rule.slice(0,-1).join('');var query=rule[rule.length-1];if(Interchange.SPECIAL_QUERIES[query]){query=Interchange.SPECIAL_QUERIES[query];}rulesList.push({path:path,query:query});}}this.rules=rulesList;}/**\n       * Update the `src` property of an image, or change the HTML of a container, to the specified path.\n       * @function\n       * @param {String} path - Path to the image or HTML partial.\n       * @fires Interchange#replaced\n       */},{key:'replace',value:function replace(path){if(this.currentPath===path)return;var _this=this,trigger='replaced.zf.interchange';// Replacing images\nif(this.$element[0].nodeName==='IMG'){this.$element.attr('src',path).load(function(){_this.currentPath=path;}).trigger(trigger);}// Replacing background images\nelse if(path.match(/\\.(gif|jpg|jpeg|png|svg|tiff)([?#].*)?/i)){this.$element.css({'background-image':'url('+path+')'}).trigger(trigger);}// Replacing HTML\nelse{$.get(path,function(response){_this.$element.html(response).trigger(trigger);$(response).foundation();_this.currentPath=path;});}/**\n         * Fires when content in an Interchange element is done being loaded.\n         * @event Interchange#replaced\n         */// this.$element.trigger('replaced.zf.interchange');\n}/**\n       * Destroys an instance of interchange.\n       * @function\n       */},{key:'destroy',value:function destroy(){//TODO this.\n}}]);return Interchange;}();/**\n   * Default settings for plugin\n   */Interchange.defaults={/**\n     * Rules to be applied to Interchange elements. Set with the `data-interchange` array notation.\n     * @option\n     */rules:null};Interchange.SPECIAL_QUERIES={'landscape':'screen and (orientation: landscape)','portrait':'screen and (orientation: portrait)','retina':'only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx)'};// Window exports\nFoundation.plugin(Interchange,'Interchange');}(jQuery);'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}!function($){/**\n   * Magellan module.\n   * @module foundation.magellan\n   */var Magellan=function(){/**\n     * Creates a new instance of Magellan.\n     * @class\n     * @fires Magellan#init\n     * @param {Object} element - jQuery object to add the trigger to.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */function Magellan(element,options){_classCallCheck(this,Magellan);this.$element=element;this.options=$.extend({},Magellan.defaults,this.$element.data(),options);this._init();Foundation.registerPlugin(this,'Magellan');}/**\n     * Initializes the Magellan plugin and calls functions to get equalizer functioning on load.\n     * @private\n     */_createClass(Magellan,[{key:'_init',value:function _init(){var id=this.$element[0].id||Foundation.GetYoDigits(6,'magellan');var _this=this;this.$targets=$('[data-magellan-target]');this.$links=this.$element.find('a');this.$element.attr({'data-resize':id,'data-scroll':id,'id':id});this.$active=$();this.scrollPos=parseInt(window.pageYOffset,10);this._events();}/**\n       * Calculates an array of pixel values that are the demarcation lines between locations on the page.\n       * Can be invoked if new elements are added or the size of a location changes.\n       * @function\n       */},{key:'calcPoints',value:function calcPoints(){var _this=this,body=document.body,html=document.documentElement;this.points=[];this.winHeight=Math.round(Math.max(window.innerHeight,html.clientHeight));this.docHeight=Math.round(Math.max(body.scrollHeight,body.offsetHeight,html.clientHeight,html.scrollHeight,html.offsetHeight));this.$targets.each(function(){var $tar=$(this),pt=Math.round($tar.offset().top-_this.options.threshold);$tar.targetPoint=pt;_this.points.push(pt);});}/**\n       * Initializes events for Magellan.\n       * @private\n       */},{key:'_events',value:function _events(){var _this=this,$body=$('html, body'),opts={duration:_this.options.animationDuration,easing:_this.options.animationEasing};$(window).one('load',function(){if(_this.options.deepLinking){if(location.hash){_this.scrollToLoc(location.hash);}}_this.calcPoints();_this._updateActive();});this.$element.on({'resizeme.zf.trigger':this.reflow.bind(this),'scrollme.zf.trigger':this._updateActive.bind(this)}).on('click.zf.magellan','a[href^=\"#\"]',function(e){e.preventDefault();var arrival=this.getAttribute('href');_this.scrollToLoc(arrival);});}/**\n       * Function to scroll to a given location on the page.\n       * @param {String} loc - a properly formatted jQuery id selector. Example: '#foo'\n       * @function\n       */},{key:'scrollToLoc',value:function scrollToLoc(loc){var scrollPos=Math.round($(loc).offset().top-this.options.threshold/2-this.options.barOffset);$('html, body').stop(true).animate({scrollTop:scrollPos},this.options.animationDuration,this.options.animationEasing);}/**\n       * Calls necessary functions to update Magellan upon DOM change\n       * @function\n       */},{key:'reflow',value:function reflow(){this.calcPoints();this._updateActive();}/**\n       * Updates the visibility of an active location link, and updates the url hash for the page, if deepLinking enabled.\n       * @private\n       * @function\n       * @fires Magellan#update\n       */},{key:'_updateActive',value:function _updateActive()/*evt, elem, scrollPos*/{var winPos=/*scrollPos ||*/parseInt(window.pageYOffset,10),curIdx;if(winPos+this.winHeight===this.docHeight){curIdx=this.points.length-1;}else if(winPos<this.points[0]){curIdx=0;}else{var isDown=this.scrollPos<winPos,_this=this,curVisible=this.points.filter(function(p,i){return isDown?p-_this.options.barOffset<=winPos:p-_this.options.barOffset-_this.options.threshold<=winPos;});curIdx=curVisible.length?curVisible.length-1:0;}this.$active.removeClass(this.options.activeClass);this.$active=this.$links.eq(curIdx).addClass(this.options.activeClass);if(this.options.deepLinking){var hash=this.$active[0].getAttribute('href');if(window.history.pushState){window.history.pushState(null,null,hash);}else{window.location.hash=hash;}}this.scrollPos=winPos;/**\n         * Fires when magellan is finished updating to the new active element.\n         * @event Magellan#update\n         */this.$element.trigger('update.zf.magellan',[this.$active]);}/**\n       * Destroys an instance of Magellan and resets the url of the window.\n       * @function\n       */},{key:'destroy',value:function destroy(){this.$element.off('.zf.trigger .zf.magellan').find('.'+this.options.activeClass).removeClass(this.options.activeClass);if(this.options.deepLinking){var hash=this.$active[0].getAttribute('href');window.location.hash.replace(hash,'');}Foundation.unregisterPlugin(this);}}]);return Magellan;}();/**\n   * Default settings for plugin\n   */Magellan.defaults={/**\n     * Amount of time, in ms, the animated scrolling should take between locations.\n     * @option\n     * @example 500\n     */animationDuration:500,/**\n     * Animation style to use when scrolling between locations.\n     * @option\n     * @example 'ease-in-out'\n     */animationEasing:'linear',/**\n     * Number of pixels to use as a marker for location changes.\n     * @option\n     * @example 50\n     */threshold:50,/**\n     * Class applied to the active locations link on the magellan container.\n     * @option\n     * @example 'active'\n     */activeClass:'active',/**\n     * Allows the script to manipulate the url of the current page, and if supported, alter the history.\n     * @option\n     * @example true\n     */deepLinking:false,/**\n     * Number of pixels to offset the scroll of the page on item click if using a sticky nav bar.\n     * @option\n     * @example 25\n     */barOffset:0};// Window exports\nFoundation.plugin(Magellan,'Magellan');}(jQuery);'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}!function($){/**\n   * OffCanvas module.\n   * @module foundation.offcanvas\n   * @requires foundation.util.mediaQuery\n   * @requires foundation.util.triggers\n   * @requires foundation.util.motion\n   */var OffCanvas=function(){/**\n     * Creates a new instance of an off-canvas wrapper.\n     * @class\n     * @fires OffCanvas#init\n     * @param {Object} element - jQuery object to initialize.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */function OffCanvas(element,options){_classCallCheck(this,OffCanvas);this.$element=element;this.options=$.extend({},OffCanvas.defaults,this.$element.data(),options);this.$lastTrigger=$();this.$triggers=$();this._init();this._events();Foundation.registerPlugin(this,'OffCanvas');}/**\n     * Initializes the off-canvas wrapper by adding the exit overlay (if needed).\n     * @function\n     * @private\n     */_createClass(OffCanvas,[{key:'_init',value:function _init(){var id=this.$element.attr('id');this.$element.attr('aria-hidden','true');// Find triggers that affect this element and add aria-expanded to them\nthis.$triggers=$(document).find('[data-open=\"'+id+'\"], [data-close=\"'+id+'\"], [data-toggle=\"'+id+'\"]').attr('aria-expanded','false').attr('aria-controls',id);// Add a close trigger over the body if necessary\nif(this.options.closeOnClick){if($('.js-off-canvas-exit').length){this.$exiter=$('.js-off-canvas-exit');}else{var exiter=document.createElement('div');exiter.setAttribute('class','js-off-canvas-exit');$('[data-off-canvas-content]').append(exiter);this.$exiter=$(exiter);}}this.options.isRevealed=this.options.isRevealed||new RegExp(this.options.revealClass,'g').test(this.$element[0].className);if(this.options.isRevealed){this.options.revealOn=this.options.revealOn||this.$element[0].className.match(/(reveal-for-medium|reveal-for-large)/g)[0].split('-')[2];this._setMQChecker();}if(!this.options.transitionTime){this.options.transitionTime=parseFloat(window.getComputedStyle($('[data-off-canvas-wrapper]')[0]).transitionDuration)*1000;}}/**\n       * Adds event handlers to the off-canvas wrapper and the exit overlay.\n       * @function\n       * @private\n       */},{key:'_events',value:function _events(){this.$element.off('.zf.trigger .zf.offcanvas').on({'open.zf.trigger':this.open.bind(this),'close.zf.trigger':this.close.bind(this),'toggle.zf.trigger':this.toggle.bind(this),'keydown.zf.offcanvas':this._handleKeyboard.bind(this)});if(this.options.closeOnClick&&this.$exiter.length){this.$exiter.on({'click.zf.offcanvas':this.close.bind(this)});}}/**\n       * Applies event listener for elements that will reveal at certain breakpoints.\n       * @private\n       */},{key:'_setMQChecker',value:function _setMQChecker(){var _this=this;$(window).on('changed.zf.mediaquery',function(){if(Foundation.MediaQuery.atLeast(_this.options.revealOn)){_this.reveal(true);}else{_this.reveal(false);}}).one('load.zf.offcanvas',function(){if(Foundation.MediaQuery.atLeast(_this.options.revealOn)){_this.reveal(true);}});}/**\n       * Handles the revealing/hiding the off-canvas at breakpoints, not the same as open.\n       * @param {Boolean} isRevealed - true if element should be revealed.\n       * @function\n       */},{key:'reveal',value:function reveal(isRevealed){var $closer=this.$element.find('[data-close]');if(isRevealed){this.close();this.isRevealed=true;// if (!this.options.forceTop) {\n//   var scrollPos = parseInt(window.pageYOffset);\n//   this.$element[0].style.transform = 'translate(0,' + scrollPos + 'px)';\n// }\n// if (this.options.isSticky) { this._stick(); }\nthis.$element.off('open.zf.trigger toggle.zf.trigger');if($closer.length){$closer.hide();}}else{this.isRevealed=false;// if (this.options.isSticky || !this.options.forceTop) {\n//   this.$element[0].style.transform = '';\n//   $(window).off('scroll.zf.offcanvas');\n// }\nthis.$element.on({'open.zf.trigger':this.open.bind(this),'toggle.zf.trigger':this.toggle.bind(this)});if($closer.length){$closer.show();}}}/**\n       * Opens the off-canvas menu.\n       * @function\n       * @param {Object} event - Event object passed from listener.\n       * @param {jQuery} trigger - element that triggered the off-canvas to open.\n       * @fires OffCanvas#opened\n       */},{key:'open',value:function open(event,trigger){if(this.$element.hasClass('is-open')||this.isRevealed){return;}var _this=this,$body=$(document.body);if(this.options.forceTop){$('body').scrollTop(0);}// window.pageYOffset = 0;\n// if (!this.options.forceTop) {\n//   var scrollPos = parseInt(window.pageYOffset);\n//   this.$element[0].style.transform = 'translate(0,' + scrollPos + 'px)';\n//   if (this.$exiter.length) {\n//     this.$exiter[0].style.transform = 'translate(0,' + scrollPos + 'px)';\n//   }\n// }\n/**\n         * Fires when the off-canvas menu opens.\n         * @event OffCanvas#opened\n         */Foundation.Move(this.options.transitionTime,this.$element,function(){$('[data-off-canvas-wrapper]').addClass('is-off-canvas-open is-open-'+_this.options.position);_this.$element.addClass('is-open');// if (_this.options.isSticky) {\n//   _this._stick();\n// }\n});this.$triggers.attr('aria-expanded','true');this.$element.attr('aria-hidden','false').trigger('opened.zf.offcanvas');if(this.options.closeOnClick){this.$exiter.addClass('is-visible');}if(trigger){this.$lastTrigger=trigger;}if(this.options.autoFocus){this.$element.one(Foundation.transitionend(this.$element),function(){_this.$element.find('a, button').eq(0).focus();});}if(this.options.trapFocus){$('[data-off-canvas-content]').attr('tabindex','-1');this._trapFocus();}}/**\n       * Traps focus within the offcanvas on open.\n       * @private\n       */},{key:'_trapFocus',value:function _trapFocus(){var focusable=Foundation.Keyboard.findFocusable(this.$element),first=focusable.eq(0),last=focusable.eq(-1);focusable.off('.zf.offcanvas').on('keydown.zf.offcanvas',function(e){if(e.which===9||e.keycode===9){if(e.target===last[0]&&!e.shiftKey){e.preventDefault();first.focus();}if(e.target===first[0]&&e.shiftKey){e.preventDefault();last.focus();}}});}/**\n       * Allows the offcanvas to appear sticky utilizing translate properties.\n       * @private\n       */// OffCanvas.prototype._stick = function() {\n//   var elStyle = this.$element[0].style;\n//\n//   if (this.options.closeOnClick) {\n//     var exitStyle = this.$exiter[0].style;\n//   }\n//\n//   $(window).on('scroll.zf.offcanvas', function(e) {\n//     console.log(e);\n//     var pageY = window.pageYOffset;\n//     elStyle.transform = 'translate(0,' + pageY + 'px)';\n//     if (exitStyle !== undefined) { exitStyle.transform = 'translate(0,' + pageY + 'px)'; }\n//   });\n//   // this.$element.trigger('stuck.zf.offcanvas');\n// };\n/**\n       * Closes the off-canvas menu.\n       * @function\n       * @param {Function} cb - optional cb to fire after closure.\n       * @fires OffCanvas#closed\n       */},{key:'close',value:function close(cb){if(!this.$element.hasClass('is-open')||this.isRevealed){return;}var _this=this;//  Foundation.Move(this.options.transitionTime, this.$element, function() {\n$('[data-off-canvas-wrapper]').removeClass('is-off-canvas-open is-open-'+_this.options.position);_this.$element.removeClass('is-open');// Foundation._reflow();\n// });\nthis.$element.attr('aria-hidden','true')/**\n         * Fires when the off-canvas menu opens.\n         * @event OffCanvas#closed\n         */.trigger('closed.zf.offcanvas');// if (_this.options.isSticky || !_this.options.forceTop) {\n//   setTimeout(function() {\n//     _this.$element[0].style.transform = '';\n//     $(window).off('scroll.zf.offcanvas');\n//   }, this.options.transitionTime);\n// }\nif(this.options.closeOnClick){this.$exiter.removeClass('is-visible');}this.$triggers.attr('aria-expanded','false');if(this.options.trapFocus){$('[data-off-canvas-content]').removeAttr('tabindex');}}/**\n       * Toggles the off-canvas menu open or closed.\n       * @function\n       * @param {Object} event - Event object passed from listener.\n       * @param {jQuery} trigger - element that triggered the off-canvas to open.\n       */},{key:'toggle',value:function toggle(event,trigger){if(this.$element.hasClass('is-open')){this.close(event,trigger);}else{this.open(event,trigger);}}/**\n       * Handles keyboard input when detected. When the escape key is pressed, the off-canvas menu closes, and focus is restored to the element that opened the menu.\n       * @function\n       * @private\n       */},{key:'_handleKeyboard',value:function _handleKeyboard(event){if(event.which!==27)return;event.stopPropagation();event.preventDefault();this.close();this.$lastTrigger.focus();}/**\n       * Destroys the offcanvas plugin.\n       * @function\n       */},{key:'destroy',value:function destroy(){this.close();this.$element.off('.zf.trigger .zf.offcanvas');this.$exiter.off('.zf.offcanvas');Foundation.unregisterPlugin(this);}}]);return OffCanvas;}();OffCanvas.defaults={/**\n     * Allow the user to click outside of the menu to close it.\n     * @option\n     * @example true\n     */closeOnClick:true,/**\n     * Amount of time in ms the open and close transition requires. If none selected, pulls from body style.\n     * @option\n     * @example 500\n     */transitionTime:0,/**\n     * Direction the offcanvas opens from. Determines class applied to body.\n     * @option\n     * @example left\n     */position:'left',/**\n     * Force the page to scroll to top on open.\n     * @option\n     * @example true\n     */forceTop:true,/**\n     * Allow the offcanvas to remain open for certain breakpoints.\n     * @option\n     * @example false\n     */isRevealed:false,/**\n     * Breakpoint at which to reveal. JS will use a RegExp to target standard classes, if changing classnames, pass your class with the `revealClass` option.\n     * @option\n     * @example reveal-for-large\n     */revealOn:null,/**\n     * Force focus to the offcanvas on open. If true, will focus the opening trigger on close.\n     * @option\n     * @example true\n     */autoFocus:true,/**\n     * Class used to force an offcanvas to remain open. Foundation defaults for this are `reveal-for-large` & `reveal-for-medium`.\n     * @option\n     * TODO improve the regex testing for this.\n     * @example reveal-for-large\n     */revealClass:'reveal-for-',/**\n     * Triggers optional focus trapping when opening an offcanvas. Sets tabindex of [data-off-canvas-content] to -1 for accessibility purposes.\n     * @option\n     * @example true\n     */trapFocus:false};// Window exports\nFoundation.plugin(OffCanvas,'OffCanvas');}(jQuery);'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}!function($){/**\n   * Orbit module.\n   * @module foundation.orbit\n   * @requires foundation.util.keyboard\n   * @requires foundation.util.motion\n   * @requires foundation.util.timerAndImageLoader\n   * @requires foundation.util.touch\n   */var Orbit=function(){/**\n    * Creates a new instance of an orbit carousel.\n    * @class\n    * @param {jQuery} element - jQuery object to make into an Orbit Carousel.\n    * @param {Object} options - Overrides to the default plugin settings.\n    */function Orbit(element,options){_classCallCheck(this,Orbit);this.$element=element;this.options=$.extend({},Orbit.defaults,this.$element.data(),options);this._init();Foundation.registerPlugin(this,'Orbit');Foundation.Keyboard.register('Orbit',{'ltr':{'ARROW_RIGHT':'next','ARROW_LEFT':'previous'},'rtl':{'ARROW_LEFT':'next','ARROW_RIGHT':'previous'}});}/**\n    * Initializes the plugin by creating jQuery collections, setting attributes, and starting the animation.\n    * @function\n    * @private\n    */_createClass(Orbit,[{key:'_init',value:function _init(){this.$wrapper=this.$element.find('.'+this.options.containerClass);this.$slides=this.$element.find('.'+this.options.slideClass);var $images=this.$element.find('img'),initActive=this.$slides.filter('.is-active');if(!initActive.length){this.$slides.eq(0).addClass('is-active');}if(!this.options.useMUI){this.$slides.addClass('no-motionui');}if($images.length){Foundation.onImagesLoaded($images,this._prepareForOrbit.bind(this));}else{this._prepareForOrbit();//hehe\n}if(this.options.bullets){this._loadBullets();}this._events();if(this.options.autoPlay&&this.$slides.length>1){this.geoSync();}if(this.options.accessible){// allow wrapper to be focusable to enable arrow navigation\nthis.$wrapper.attr('tabindex',0);}}/**\n      * Creates a jQuery collection of bullets, if they are being used.\n      * @function\n      * @private\n      */},{key:'_loadBullets',value:function _loadBullets(){this.$bullets=this.$element.find('.'+this.options.boxOfBullets).find('button');}/**\n      * Sets a `timer` object on the orbit, and starts the counter for the next slide.\n      * @function\n      */},{key:'geoSync',value:function geoSync(){var _this=this;this.timer=new Foundation.Timer(this.$element,{duration:this.options.timerDelay,infinite:false},function(){_this.changeSlide(true);});this.timer.start();}/**\n      * Sets wrapper and slide heights for the orbit.\n      * @function\n      * @private\n      */},{key:'_prepareForOrbit',value:function _prepareForOrbit(){var _this=this;this._setWrapperHeight(function(max){_this._setSlideHeight(max);});}/**\n      * Calulates the height of each slide in the collection, and uses the tallest one for the wrapper height.\n      * @function\n      * @private\n      * @param {Function} cb - a callback function to fire when complete.\n      */},{key:'_setWrapperHeight',value:function _setWrapperHeight(cb){//rewrite this to `for` loop\nvar max=0,temp,counter=0;this.$slides.each(function(){temp=this.getBoundingClientRect().height;$(this).attr('data-slide',counter);if(counter){//if not the first slide, set css position and display property\n$(this).css({'position':'relative','display':'none'});}max=temp>max?temp:max;counter++;});if(counter===this.$slides.length){this.$wrapper.css({'height':max});//only change the wrapper height property once.\ncb(max);//fire callback with max height dimension.\n}}/**\n      * Sets the max-height of each slide.\n      * @function\n      * @private\n      */},{key:'_setSlideHeight',value:function _setSlideHeight(height){this.$slides.each(function(){$(this).css('max-height',height);});}/**\n      * Adds event listeners to basically everything within the element.\n      * @function\n      * @private\n      */},{key:'_events',value:function _events(){var _this=this;//***************************************\n//**Now using custom event - thanks to:**\n//**      Yohai Ararat of Toronto      **\n//***************************************\nif(this.$slides.length>1){if(this.options.swipe){this.$slides.off('swipeleft.zf.orbit swiperight.zf.orbit').on('swipeleft.zf.orbit',function(e){e.preventDefault();_this.changeSlide(true);}).on('swiperight.zf.orbit',function(e){e.preventDefault();_this.changeSlide(false);});}//***************************************\nif(this.options.autoPlay){this.$slides.on('click.zf.orbit',function(){_this.$element.data('clickedOn',_this.$element.data('clickedOn')?false:true);_this.timer[_this.$element.data('clickedOn')?'pause':'start']();});if(this.options.pauseOnHover){this.$element.on('mouseenter.zf.orbit',function(){_this.timer.pause();}).on('mouseleave.zf.orbit',function(){if(!_this.$element.data('clickedOn')){_this.timer.start();}});}}if(this.options.navButtons){var $controls=this.$element.find('.'+this.options.nextClass+', .'+this.options.prevClass);$controls.attr('tabindex',0)//also need to handle enter/return and spacebar key presses\n.on('click.zf.orbit touchend.zf.orbit',function(e){e.preventDefault();_this.changeSlide($(this).hasClass(_this.options.nextClass));});}if(this.options.bullets){this.$bullets.on('click.zf.orbit touchend.zf.orbit',function(){if(/is-active/g.test(this.className)){return false;}//if this is active, kick out of function.\nvar idx=$(this).data('slide'),ltr=idx>_this.$slides.filter('.is-active').data('slide'),$slide=_this.$slides.eq(idx);_this.changeSlide(ltr,$slide,idx);});}this.$wrapper.add(this.$bullets).on('keydown.zf.orbit',function(e){// handle keyboard event with keyboard util\nFoundation.Keyboard.handleKey(e,'Orbit',{next:function next(){_this.changeSlide(true);},previous:function previous(){_this.changeSlide(false);},handled:function handled(){// if bullet is focused, make sure focus moves\nif($(e.target).is(_this.$bullets)){_this.$bullets.filter('.is-active').focus();}}});});}}/**\n      * Changes the current slide to a new one.\n      * @function\n      * @param {Boolean} isLTR - flag if the slide should move left to right.\n      * @param {jQuery} chosenSlide - the jQuery element of the slide to show next, if one is selected.\n      * @param {Number} idx - the index of the new slide in its collection, if one chosen.\n      * @fires Orbit#slidechange\n      */},{key:'changeSlide',value:function changeSlide(isLTR,chosenSlide,idx){var $curSlide=this.$slides.filter('.is-active').eq(0);if(/mui/g.test($curSlide[0].className)){return false;}//if the slide is currently animating, kick out of the function\nvar $firstSlide=this.$slides.first(),$lastSlide=this.$slides.last(),dirIn=isLTR?'Right':'Left',dirOut=isLTR?'Left':'Right',_this=this,$newSlide;if(!chosenSlide){//most of the time, this will be auto played or clicked from the navButtons.\n$newSlide=isLTR?//if wrapping enabled, check to see if there is a `next` or `prev` sibling, if not, select the first or last slide to fill in. if wrapping not enabled, attempt to select `next` or `prev`, if there's nothing there, the function will kick out on next step. CRAZY NESTED TERNARIES!!!!!\nthis.options.infiniteWrap?$curSlide.next('.'+this.options.slideClass).length?$curSlide.next('.'+this.options.slideClass):$firstSlide:$curSlide.next('.'+this.options.slideClass)://pick next slide if moving left to right\nthis.options.infiniteWrap?$curSlide.prev('.'+this.options.slideClass).length?$curSlide.prev('.'+this.options.slideClass):$lastSlide:$curSlide.prev('.'+this.options.slideClass);//pick prev slide if moving right to left\n}else{$newSlide=chosenSlide;}if($newSlide.length){if(this.options.bullets){idx=idx||this.$slides.index($newSlide);//grab index to update bullets\nthis._updateBullets(idx);}if(this.options.useMUI){Foundation.Motion.animateIn($newSlide.addClass('is-active').css({'position':'absolute','top':0}),this.options['animInFrom'+dirIn],function(){$newSlide.css({'position':'relative','display':'block'}).attr('aria-live','polite');});Foundation.Motion.animateOut($curSlide.removeClass('is-active'),this.options['animOutTo'+dirOut],function(){$curSlide.removeAttr('aria-live');if(_this.options.autoPlay&&!_this.timer.isPaused){_this.timer.restart();}//do stuff?\n});}else{$curSlide.removeClass('is-active is-in').removeAttr('aria-live').hide();$newSlide.addClass('is-active is-in').attr('aria-live','polite').show();if(this.options.autoPlay&&!this.timer.isPaused){this.timer.restart();}}/**\n          * Triggers when the slide has finished animating in.\n          * @event Orbit#slidechange\n          */this.$element.trigger('slidechange.zf.orbit',[$newSlide]);}}/**\n      * Updates the active state of the bullets, if displayed.\n      * @function\n      * @private\n      * @param {Number} idx - the index of the current slide.\n      */},{key:'_updateBullets',value:function _updateBullets(idx){var $oldBullet=this.$element.find('.'+this.options.boxOfBullets).find('.is-active').removeClass('is-active').blur(),span=$oldBullet.find('span:last').detach(),$newBullet=this.$bullets.eq(idx).addClass('is-active').append(span);}/**\n      * Destroys the carousel and hides the element.\n      * @function\n      */},{key:'destroy',value:function destroy(){this.$element.off('.zf.orbit').find('*').off('.zf.orbit').end().hide();Foundation.unregisterPlugin(this);}}]);return Orbit;}();Orbit.defaults={/**\n    * Tells the JS to look for and loadBullets.\n    * @option\n    * @example true\n    */bullets:true,/**\n    * Tells the JS to apply event listeners to nav buttons\n    * @option\n    * @example true\n    */navButtons:true,/**\n    * motion-ui animation class to apply\n    * @option\n    * @example 'slide-in-right'\n    */animInFromRight:'slide-in-right',/**\n    * motion-ui animation class to apply\n    * @option\n    * @example 'slide-out-right'\n    */animOutToRight:'slide-out-right',/**\n    * motion-ui animation class to apply\n    * @option\n    * @example 'slide-in-left'\n    *\n    */animInFromLeft:'slide-in-left',/**\n    * motion-ui animation class to apply\n    * @option\n    * @example 'slide-out-left'\n    */animOutToLeft:'slide-out-left',/**\n    * Allows Orbit to automatically animate on page load.\n    * @option\n    * @example true\n    */autoPlay:true,/**\n    * Amount of time, in ms, between slide transitions\n    * @option\n    * @example 5000\n    */timerDelay:5000,/**\n    * Allows Orbit to infinitely loop through the slides\n    * @option\n    * @example true\n    */infiniteWrap:true,/**\n    * Allows the Orbit slides to bind to swipe events for mobile, requires an additional util library\n    * @option\n    * @example true\n    */swipe:true,/**\n    * Allows the timing function to pause animation on hover.\n    * @option\n    * @example true\n    */pauseOnHover:true,/**\n    * Allows Orbit to bind keyboard events to the slider, to animate frames with arrow keys\n    * @option\n    * @example true\n    */accessible:true,/**\n    * Class applied to the container of Orbit\n    * @option\n    * @example 'orbit-container'\n    */containerClass:'orbit-container',/**\n    * Class applied to individual slides.\n    * @option\n    * @example 'orbit-slide'\n    */slideClass:'orbit-slide',/**\n    * Class applied to the bullet container. You're welcome.\n    * @option\n    * @example 'orbit-bullets'\n    */boxOfBullets:'orbit-bullets',/**\n    * Class applied to the `next` navigation button.\n    * @option\n    * @example 'orbit-next'\n    */nextClass:'orbit-next',/**\n    * Class applied to the `previous` navigation button.\n    * @option\n    * @example 'orbit-previous'\n    */prevClass:'orbit-previous',/**\n    * Boolean to flag the js to use motion ui classes or not. Default to true for backwards compatability.\n    * @option\n    * @example true\n    */useMUI:true};// Window exports\nFoundation.plugin(Orbit,'Orbit');}(jQuery);'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}!function($){/**\n   * ResponsiveMenu module.\n   * @module foundation.responsiveMenu\n   * @requires foundation.util.triggers\n   * @requires foundation.util.mediaQuery\n   * @requires foundation.util.accordionMenu\n   * @requires foundation.util.drilldown\n   * @requires foundation.util.dropdown-menu\n   */var ResponsiveMenu=function(){/**\n     * Creates a new instance of a responsive menu.\n     * @class\n     * @fires ResponsiveMenu#init\n     * @param {jQuery} element - jQuery object to make into a dropdown menu.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */function ResponsiveMenu(element,options){_classCallCheck(this,ResponsiveMenu);this.$element=$(element);this.rules=this.$element.data('responsive-menu');this.currentMq=null;this.currentPlugin=null;this._init();this._events();Foundation.registerPlugin(this,'ResponsiveMenu');}/**\n     * Initializes the Menu by parsing the classes from the 'data-ResponsiveMenu' attribute on the element.\n     * @function\n     * @private\n     */_createClass(ResponsiveMenu,[{key:'_init',value:function _init(){// The first time an Interchange plugin is initialized, this.rules is converted from a string of \"classes\" to an object of rules\nif(typeof this.rules==='string'){var rulesTree={};// Parse rules from \"classes\" pulled from data attribute\nvar rules=this.rules.split(' ');// Iterate through every rule found\nfor(var i=0;i<rules.length;i++){var rule=rules[i].split('-');var ruleSize=rule.length>1?rule[0]:'small';var rulePlugin=rule.length>1?rule[1]:rule[0];if(MenuPlugins[rulePlugin]!==null){rulesTree[ruleSize]=MenuPlugins[rulePlugin];}}this.rules=rulesTree;}if(!$.isEmptyObject(this.rules)){this._checkMediaQueries();}}/**\n       * Initializes events for the Menu.\n       * @function\n       * @private\n       */},{key:'_events',value:function _events(){var _this=this;$(window).on('changed.zf.mediaquery',function(){_this._checkMediaQueries();});// $(window).on('resize.zf.ResponsiveMenu', function() {\n//   _this._checkMediaQueries();\n// });\n}/**\n       * Checks the current screen width against available media queries. If the media query has changed, and the plugin needed has changed, the plugins will swap out.\n       * @function\n       * @private\n       */},{key:'_checkMediaQueries',value:function _checkMediaQueries(){var matchedMq,_this=this;// Iterate through each rule and find the last matching rule\n$.each(this.rules,function(key){if(Foundation.MediaQuery.atLeast(key)){matchedMq=key;}});// No match? No dice\nif(!matchedMq)return;// Plugin already initialized? We good\nif(this.currentPlugin instanceof this.rules[matchedMq].plugin)return;// Remove existing plugin-specific CSS classes\n$.each(MenuPlugins,function(key,value){_this.$element.removeClass(value.cssClass);});// Add the CSS class for the new plugin\nthis.$element.addClass(this.rules[matchedMq].cssClass);// Create an instance of the new plugin\nif(this.currentPlugin)this.currentPlugin.destroy();this.currentPlugin=new this.rules[matchedMq].plugin(this.$element,{});}/**\n       * Destroys the instance of the current plugin on this element, as well as the window resize handler that switches the plugins out.\n       * @function\n       */},{key:'destroy',value:function destroy(){this.currentPlugin.destroy();$(window).off('.zf.ResponsiveMenu');Foundation.unregisterPlugin(this);}}]);return ResponsiveMenu;}();ResponsiveMenu.defaults={};// The plugin matches the plugin classes with these plugin instances.\nvar MenuPlugins={dropdown:{cssClass:'dropdown',plugin:Foundation._plugins['dropdown-menu']||null},drilldown:{cssClass:'drilldown',plugin:Foundation._plugins['drilldown']||null},accordion:{cssClass:'accordion-menu',plugin:Foundation._plugins['accordion-menu']||null}};// Window exports\nFoundation.plugin(ResponsiveMenu,'ResponsiveMenu');}(jQuery);'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}!function($){/**\n   * ResponsiveToggle module.\n   * @module foundation.responsiveToggle\n   * @requires foundation.util.mediaQuery\n   */var ResponsiveToggle=function(){/**\n     * Creates a new instance of Tab Bar.\n     * @class\n     * @fires ResponsiveToggle#init\n     * @param {jQuery} element - jQuery object to attach tab bar functionality to.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */function ResponsiveToggle(element,options){_classCallCheck(this,ResponsiveToggle);this.$element=$(element);this.options=$.extend({},ResponsiveToggle.defaults,this.$element.data(),options);this._init();this._events();Foundation.registerPlugin(this,'ResponsiveToggle');}/**\n     * Initializes the tab bar by finding the target element, toggling element, and running update().\n     * @function\n     * @private\n     */_createClass(ResponsiveToggle,[{key:'_init',value:function _init(){var targetID=this.$element.data('responsive-toggle');if(!targetID){console.error('Your tab bar needs an ID of a Menu as the value of data-tab-bar.');}this.$targetMenu=$('#'+targetID);this.$toggler=this.$element.find('[data-toggle]');this._update();}/**\n       * Adds necessary event handlers for the tab bar to work.\n       * @function\n       * @private\n       */},{key:'_events',value:function _events(){var _this=this;this._updateMqHandler=this._update.bind(this);$(window).on('changed.zf.mediaquery',this._updateMqHandler);this.$toggler.on('click.zf.responsiveToggle',this.toggleMenu.bind(this));}/**\n       * Checks the current media query to determine if the tab bar should be visible or hidden.\n       * @function\n       * @private\n       */},{key:'_update',value:function _update(){// Mobile\nif(!Foundation.MediaQuery.atLeast(this.options.hideFor)){this.$element.show();this.$targetMenu.hide();}// Desktop\nelse{this.$element.hide();this.$targetMenu.show();}}/**\n       * Toggles the element attached to the tab bar. The toggle only happens if the screen is small enough to allow it.\n       * @function\n       * @fires ResponsiveToggle#toggled\n       */},{key:'toggleMenu',value:function toggleMenu(){if(!Foundation.MediaQuery.atLeast(this.options.hideFor)){this.$targetMenu.toggle(0);/**\n           * Fires when the element attached to the tab bar toggles.\n           * @event ResponsiveToggle#toggled\n           */this.$element.trigger('toggled.zf.responsiveToggle');}}},{key:'destroy',value:function destroy(){this.$element.off('.zf.responsiveToggle');this.$toggler.off('.zf.responsiveToggle');$(window).off('changed.zf.mediaquery',this._updateMqHandler);Foundation.unregisterPlugin(this);}}]);return ResponsiveToggle;}();ResponsiveToggle.defaults={/**\n     * The breakpoint after which the menu is always shown, and the tab bar is hidden.\n     * @option\n     * @example 'medium'\n     */hideFor:'medium'};// Window exports\nFoundation.plugin(ResponsiveToggle,'ResponsiveToggle');}(jQuery);'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}!function($){/**\n   * Reveal module.\n   * @module foundation.reveal\n   * @requires foundation.util.keyboard\n   * @requires foundation.util.box\n   * @requires foundation.util.triggers\n   * @requires foundation.util.mediaQuery\n   * @requires foundation.util.motion if using animations\n   */var Reveal=function(){/**\n     * Creates a new instance of Reveal.\n     * @class\n     * @param {jQuery} element - jQuery object to use for the modal.\n     * @param {Object} options - optional parameters.\n     */function Reveal(element,options){_classCallCheck(this,Reveal);this.$element=element;this.options=$.extend({},Reveal.defaults,this.$element.data(),options);this._init();Foundation.registerPlugin(this,'Reveal');Foundation.Keyboard.register('Reveal',{'ENTER':'open','SPACE':'open','ESCAPE':'close','TAB':'tab_forward','SHIFT_TAB':'tab_backward'});}/**\n     * Initializes the modal by adding the overlay and close buttons, (if selected).\n     * @private\n     */_createClass(Reveal,[{key:'_init',value:function _init(){this.id=this.$element.attr('id');this.isActive=false;this.cached={mq:Foundation.MediaQuery.current};this.isMobile=mobileSniff();this.$anchor=$('[data-open=\"'+this.id+'\"]').length?$('[data-open=\"'+this.id+'\"]'):$('[data-toggle=\"'+this.id+'\"]');this.$anchor.attr({'aria-controls':this.id,'aria-haspopup':true,'tabindex':0});if(this.options.fullScreen||this.$element.hasClass('full')){this.options.fullScreen=true;this.options.overlay=false;}if(this.options.overlay&&!this.$overlay){this.$overlay=this._makeOverlay(this.id);}this.$element.attr({'role':'dialog','aria-hidden':true,'data-yeti-box':this.id,'data-resize':this.id});if(this.$overlay){this.$element.detach().appendTo(this.$overlay);}else{this.$element.detach().appendTo($('body'));this.$element.addClass('without-overlay');}this._events();if(this.options.deepLink&&window.location.hash==='#'+this.id){$(window).one('load.zf.reveal',this.open.bind(this));}}/**\n       * Creates an overlay div to display behind the modal.\n       * @private\n       */},{key:'_makeOverlay',value:function _makeOverlay(id){var $overlay=$('<div></div>').addClass('reveal-overlay').appendTo('body');return $overlay;}/**\n       * Updates position of modal\n       * TODO:  Figure out if we actually need to cache these values or if it doesn't matter\n       * @private\n       */},{key:'_updatePosition',value:function _updatePosition(){var width=this.$element.outerWidth();var outerWidth=$(window).width();var height=this.$element.outerHeight();var outerHeight=$(window).height();var left,top;if(this.options.hOffset==='auto'){left=parseInt((outerWidth-width)/2,10);}else{left=parseInt(this.options.hOffset,10);}if(this.options.vOffset==='auto'){if(height>outerHeight){top=parseInt(Math.min(100,outerHeight/10),10);}else{top=parseInt((outerHeight-height)/4,10);}}else{top=parseInt(this.options.vOffset,10);}this.$element.css({top:top+'px'});// only worry about left if we don't have an overlay or we havea  horizontal offset,\n// otherwise we're perfectly in the middle\nif(!this.$overlay||this.options.hOffset!=='auto'){this.$element.css({left:left+'px'});this.$element.css({margin:'0px'});}}/**\n       * Adds event handlers for the modal.\n       * @private\n       */},{key:'_events',value:function _events(){var _this2=this;var _this=this;this.$element.on({'open.zf.trigger':this.open.bind(this),'close.zf.trigger':function closeZfTrigger(event,$element){if(event.target===_this.$element[0]||$(event.target).parents('[data-closable]')[0]===$element){// only close reveal when it's explicitly called\nreturn _this2.close.apply(_this2);}},'toggle.zf.trigger':this.toggle.bind(this),'resizeme.zf.trigger':function resizemeZfTrigger(){_this._updatePosition();}});if(this.$anchor.length){this.$anchor.on('keydown.zf.reveal',function(e){if(e.which===13||e.which===32){e.stopPropagation();e.preventDefault();_this.open();}});}if(this.options.closeOnClick&&this.options.overlay){this.$overlay.off('.zf.reveal').on('click.zf.reveal',function(e){if(e.target===_this.$element[0]||$.contains(_this.$element[0],e.target)){return;}_this.close();});}if(this.options.deepLink){$(window).on('popstate.zf.reveal:'+this.id,this._handleState.bind(this));}}/**\n       * Handles modal methods on back/forward button clicks or any other event that triggers popstate.\n       * @private\n       */},{key:'_handleState',value:function _handleState(e){if(window.location.hash==='#'+this.id&&!this.isActive){this.open();}else{this.close();}}/**\n       * Opens the modal controlled by `this.$anchor`, and closes all others by default.\n       * @function\n       * @fires Reveal#closeme\n       * @fires Reveal#open\n       */},{key:'open',value:function open(){var _this3=this;if(this.options.deepLink){var hash='#'+this.id;if(window.history.pushState){window.history.pushState(null,null,hash);}else{window.location.hash=hash;}}this.isActive=true;// Make elements invisible, but remove display: none so we can get size and positioning\nthis.$element.css({'visibility':'hidden'}).show().scrollTop(0);if(this.options.overlay){this.$overlay.css({'visibility':'hidden'}).show();}this._updatePosition();this.$element.hide().css({'visibility':''});if(this.$overlay){this.$overlay.css({'visibility':''}).hide();if(this.$element.hasClass('fast')){this.$overlay.addClass('fast');}else if(this.$element.hasClass('slow')){this.$overlay.addClass('slow');}}if(!this.options.multipleOpened){/**\n           * Fires immediately before the modal opens.\n           * Closes any other modals that are currently open\n           * @event Reveal#closeme\n           */this.$element.trigger('closeme.zf.reveal',this.id);}// Motion UI method of reveal\nif(this.options.animationIn){var _this;(function(){var afterAnimationFocus=function afterAnimationFocus(){_this.$element.attr({'aria-hidden':false,'tabindex':-1}).focus();console.log('focus');};_this=_this3;if(_this3.options.overlay){Foundation.Motion.animateIn(_this3.$overlay,'fade-in');}Foundation.Motion.animateIn(_this3.$element,_this3.options.animationIn,function(){_this3.focusableElements=Foundation.Keyboard.findFocusable(_this3.$element);afterAnimationFocus();});})();}// jQuery method of reveal\nelse{if(this.options.overlay){this.$overlay.show(0);}this.$element.show(this.options.showDelay);}// handle accessibility\nthis.$element.attr({'aria-hidden':false,'tabindex':-1}).focus();/**\n         * Fires when the modal has successfully opened.\n         * @event Reveal#open\n         */this.$element.trigger('open.zf.reveal');if(this.isMobile){this.originalScrollPos=window.pageYOffset;$('html, body').addClass('is-reveal-open');}else{$('body').addClass('is-reveal-open');}setTimeout(function(){_this3._extraHandlers();},0);}/**\n       * Adds extra event handlers for the body and window if necessary.\n       * @private\n       */},{key:'_extraHandlers',value:function _extraHandlers(){var _this=this;this.focusableElements=Foundation.Keyboard.findFocusable(this.$element);if(!this.options.overlay&&this.options.closeOnClick&&!this.options.fullScreen){$('body').on('click.zf.reveal',function(e){if(e.target===_this.$element[0]||$.contains(_this.$element[0],e.target)){return;}_this.close();});}if(this.options.closeOnEsc){$(window).on('keydown.zf.reveal',function(e){Foundation.Keyboard.handleKey(e,'Reveal',{close:function close(){if(_this.options.closeOnEsc){_this.close();_this.$anchor.focus();}}});});}// lock focus within modal while tabbing\nthis.$element.on('keydown.zf.reveal',function(e){var $target=$(this);// handle keyboard event with keyboard util\nFoundation.Keyboard.handleKey(e,'Reveal',{tab_forward:function tab_forward(){if(_this.$element.find(':focus').is(_this.focusableElements.eq(-1))){// left modal downwards, setting focus to first element\n_this.focusableElements.eq(0).focus();return true;}if(_this.focusableElements.length===0){// no focusable elements inside the modal at all, prevent tabbing in general\nreturn true;}},tab_backward:function tab_backward(){if(_this.$element.find(':focus').is(_this.focusableElements.eq(0))||_this.$element.is(':focus')){// left modal upwards, setting focus to last element\n_this.focusableElements.eq(-1).focus();return true;}if(_this.focusableElements.length===0){// no focusable elements inside the modal at all, prevent tabbing in general\nreturn true;}},open:function open(){if(_this.$element.find(':focus').is(_this.$element.find('[data-close]'))){setTimeout(function(){// set focus back to anchor if close button has been activated\n_this.$anchor.focus();},1);}else if($target.is(_this.focusableElements)){// dont't trigger if acual element has focus (i.e. inputs, links, ...)\n_this.open();}},close:function close(){if(_this.options.closeOnEsc){_this.close();_this.$anchor.focus();}},handled:function handled(preventDefault){if(preventDefault){e.preventDefault();}}});});}/**\n       * Closes the modal.\n       * @function\n       * @fires Reveal#closed\n       */},{key:'close',value:function close(){if(!this.isActive||!this.$element.is(':visible')){return false;}var _this=this;// Motion UI method of hiding\nif(this.options.animationOut){if(this.options.overlay){Foundation.Motion.animateOut(this.$overlay,'fade-out',finishUp);}else{finishUp();}Foundation.Motion.animateOut(this.$element,this.options.animationOut);}// jQuery method of hiding\nelse{if(this.options.overlay){this.$overlay.hide(0,finishUp);}else{finishUp();}this.$element.hide(this.options.hideDelay);}// Conditionals to remove extra event listeners added on open\nif(this.options.closeOnEsc){$(window).off('keydown.zf.reveal');}if(!this.options.overlay&&this.options.closeOnClick){$('body').off('click.zf.reveal');}this.$element.off('keydown.zf.reveal');function finishUp(){if(_this.isMobile){$('html, body').removeClass('is-reveal-open');if(_this.originalScrollPos){$('body').scrollTop(_this.originalScrollPos);_this.originalScrollPos=null;}}else{$('body').removeClass('is-reveal-open');}_this.$element.attr('aria-hidden',true);/**\n          * Fires when the modal is done closing.\n          * @event Reveal#closed\n          */_this.$element.trigger('closed.zf.reveal');}/**\n        * Resets the modal content\n        * This prevents a running video to keep going in the background\n        */if(this.options.resetOnClose){this.$element.html(this.$element.html());}this.isActive=false;if(_this.options.deepLink){if(window.history.replaceState){window.history.replaceState(\"\",document.title,window.location.pathname);}else{window.location.hash='';}}}/**\n       * Toggles the open/closed state of a modal.\n       * @function\n       */},{key:'toggle',value:function toggle(){if(this.isActive){this.close();}else{this.open();}}},{key:'destroy',/**\n       * Destroys an instance of a modal.\n       * @function\n       */value:function destroy(){if(this.options.overlay){this.$element.appendTo($('body'));// move $element outside of $overlay to prevent error unregisterPlugin()\nthis.$overlay.hide().off().remove();}this.$element.hide().off();this.$anchor.off('.zf');$(window).off('.zf.reveal:'+this.id);Foundation.unregisterPlugin(this);}}]);return Reveal;}();Reveal.defaults={/**\n     * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.\n     * @option\n     * @example 'slide-in-left'\n     */animationIn:'',/**\n     * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.\n     * @option\n     * @example 'slide-out-right'\n     */animationOut:'',/**\n     * Time, in ms, to delay the opening of a modal after a click if no animation used.\n     * @option\n     * @example 10\n     */showDelay:0,/**\n     * Time, in ms, to delay the closing of a modal after a click if no animation used.\n     * @option\n     * @example 10\n     */hideDelay:0,/**\n     * Allows a click on the body/overlay to close the modal.\n     * @option\n     * @example true\n     */closeOnClick:true,/**\n     * Allows the modal to close if the user presses the `ESCAPE` key.\n     * @option\n     * @example true\n     */closeOnEsc:true,/**\n     * If true, allows multiple modals to be displayed at once.\n     * @option\n     * @example false\n     */multipleOpened:false,/**\n     * Distance, in pixels, the modal should push down from the top of the screen.\n     * @option\n     * @example auto\n     */vOffset:'auto',/**\n     * Distance, in pixels, the modal should push in from the side of the screen.\n     * @option\n     * @example auto\n     */hOffset:'auto',/**\n     * Allows the modal to be fullscreen, completely blocking out the rest of the view. JS checks for this as well.\n     * @option\n     * @example false\n     */fullScreen:false,/**\n     * Percentage of screen height the modal should push up from the bottom of the view.\n     * @option\n     * @example 10\n     */btmOffsetPct:10,/**\n     * Allows the modal to generate an overlay div, which will cover the view when modal opens.\n     * @option\n     * @example true\n     */overlay:true,/**\n     * Allows the modal to remove and reinject markup on close. Should be true if using video elements w/o using provider's api, otherwise, videos will continue to play in the background.\n     * @option\n     * @example false\n     */resetOnClose:false,/**\n     * Allows the modal to alter the url on open/close, and allows the use of the `back` button to close modals. ALSO, allows a modal to auto-maniacally open on page load IF the hash === the modal's user-set id.\n     * @option\n     * @example false\n     */deepLink:false};// Window exports\nFoundation.plugin(Reveal,'Reveal');function iPhoneSniff(){return /iP(ad|hone|od).*OS/.test(window.navigator.userAgent);}function androidSniff(){return /Android/.test(window.navigator.userAgent);}function mobileSniff(){return iPhoneSniff()||androidSniff();}}(jQuery);'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}!function($){/**\n   * Slider module.\n   * @module foundation.slider\n   * @requires foundation.util.motion\n   * @requires foundation.util.triggers\n   * @requires foundation.util.keyboard\n   * @requires foundation.util.touch\n   */var Slider=function(){/**\n     * Creates a new instance of a drilldown menu.\n     * @class\n     * @param {jQuery} element - jQuery object to make into an accordion menu.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */function Slider(element,options){_classCallCheck(this,Slider);this.$element=element;this.options=$.extend({},Slider.defaults,this.$element.data(),options);this._init();Foundation.registerPlugin(this,'Slider');Foundation.Keyboard.register('Slider',{'ltr':{'ARROW_RIGHT':'increase','ARROW_UP':'increase','ARROW_DOWN':'decrease','ARROW_LEFT':'decrease','SHIFT_ARROW_RIGHT':'increase_fast','SHIFT_ARROW_UP':'increase_fast','SHIFT_ARROW_DOWN':'decrease_fast','SHIFT_ARROW_LEFT':'decrease_fast'},'rtl':{'ARROW_LEFT':'increase','ARROW_RIGHT':'decrease','SHIFT_ARROW_LEFT':'increase_fast','SHIFT_ARROW_RIGHT':'decrease_fast'}});}/**\n     * Initilizes the plugin by reading/setting attributes, creating collections and setting the initial position of the handle(s).\n     * @function\n     * @private\n     */_createClass(Slider,[{key:'_init',value:function _init(){this.inputs=this.$element.find('input');this.handles=this.$element.find('[data-slider-handle]');this.$handle=this.handles.eq(0);this.$input=this.inputs.length?this.inputs.eq(0):$('#'+this.$handle.attr('aria-controls'));this.$fill=this.$element.find('[data-slider-fill]').css(this.options.vertical?'height':'width',0);var isDbl=false,_this=this;if(this.options.disabled||this.$element.hasClass(this.options.disabledClass)){this.options.disabled=true;this.$element.addClass(this.options.disabledClass);}if(!this.inputs.length){this.inputs=$().add(this.$input);this.options.binding=true;}this._setInitAttr(0);this._events(this.$handle);if(this.handles[1]){this.options.doubleSided=true;this.$handle2=this.handles.eq(1);this.$input2=this.inputs.length>1?this.inputs.eq(1):$('#'+this.$handle2.attr('aria-controls'));if(!this.inputs[1]){this.inputs=this.inputs.add(this.$input2);}isDbl=true;this._setHandlePos(this.$handle,this.options.initialStart,true,function(){_this._setHandlePos(_this.$handle2,_this.options.initialEnd,true);});// this.$handle.triggerHandler('click.zf.slider');\nthis._setInitAttr(1);this._events(this.$handle2);}if(!isDbl){this._setHandlePos(this.$handle,this.options.initialStart,true);}}/**\n       * Sets the position of the selected handle and fill bar.\n       * @function\n       * @private\n       * @param {jQuery} $hndl - the selected handle to move.\n       * @param {Number} location - floating point between the start and end values of the slider bar.\n       * @param {Function} cb - callback function to fire on completion.\n       * @fires Slider#moved\n       * @fires Slider#changed\n       */},{key:'_setHandlePos',value:function _setHandlePos($hndl,location,noInvert,cb){// don't move if the slider has been disabled since its initialization\nif(this.$element.hasClass(this.options.disabledClass)){return;}//might need to alter that slightly for bars that will have odd number selections.\nlocation=parseFloat(location);//on input change events, convert string to number...grumble.\n// prevent slider from running out of bounds, if value exceeds the limits set through options, override the value to min/max\nif(location<this.options.start){location=this.options.start;}else if(location>this.options.end){location=this.options.end;}var isDbl=this.options.doubleSided;if(isDbl){//this block is to prevent 2 handles from crossing eachother. Could/should be improved.\nif(this.handles.index($hndl)===0){var h2Val=parseFloat(this.$handle2.attr('aria-valuenow'));location=location>=h2Val?h2Val-this.options.step:location;}else{var h1Val=parseFloat(this.$handle.attr('aria-valuenow'));location=location<=h1Val?h1Val+this.options.step:location;}}//this is for single-handled vertical sliders, it adjusts the value to account for the slider being \"upside-down\"\n//for click and drag events, it's weird due to the scale(-1, 1) css property\nif(this.options.vertical&&!noInvert){location=this.options.end-location;}var _this=this,vert=this.options.vertical,hOrW=vert?'height':'width',lOrT=vert?'top':'left',handleDim=$hndl[0].getBoundingClientRect()[hOrW],elemDim=this.$element[0].getBoundingClientRect()[hOrW],//percentage of bar min/max value based on click or drag point\npctOfBar=percent(location-this.options.start,this.options.end-this.options.start).toFixed(2),//number of actual pixels to shift the handle, based on the percentage obtained above\npxToMove=(elemDim-handleDim)*pctOfBar,//percentage of bar to shift the handle\nmovement=(percent(pxToMove,elemDim)*100).toFixed(this.options.decimal);//fixing the decimal value for the location number, is passed to other methods as a fixed floating-point value\nlocation=parseFloat(location.toFixed(this.options.decimal));// declare empty object for css adjustments, only used with 2 handled-sliders\nvar css={};this._setValues($hndl,location);// TODO update to calculate based on values set to respective inputs??\nif(isDbl){var isLeftHndl=this.handles.index($hndl)===0,//empty variable, will be used for min-height/width for fill bar\ndim,//percentage w/h of the handle compared to the slider bar\nhandlePct=~~(percent(handleDim,elemDim)*100);//if left handle, the math is slightly different than if it's the right handle, and the left/top property needs to be changed for the fill bar\nif(isLeftHndl){//left or top percentage value to apply to the fill bar.\ncss[lOrT]=movement+'%';//calculate the new min-height/width for the fill bar.\ndim=parseFloat(this.$handle2[0].style[lOrT])-movement+handlePct;//this callback is necessary to prevent errors and allow the proper placement and initialization of a 2-handled slider\n//plus, it means we don't care if 'dim' isNaN on init, it won't be in the future.\nif(cb&&typeof cb==='function'){cb();}//this is only needed for the initialization of 2 handled sliders\n}else{//just caching the value of the left/bottom handle's left/top property\nvar handlePos=parseFloat(this.$handle[0].style[lOrT]);//calculate the new min-height/width for the fill bar. Use isNaN to prevent false positives for numbers <= 0\n//based on the percentage of movement of the handle being manipulated, less the opposing handle's left/top position, plus the percentage w/h of the handle itself\ndim=movement-(isNaN(handlePos)?this.options.initialStart/((this.options.end-this.options.start)/100):handlePos)+handlePct;}// assign the min-height/width to our css object\ncss['min-'+hOrW]=dim+'%';}this.$element.one('finished.zf.animate',function(){/**\n           * Fires when the handle is done moving.\n           * @event Slider#moved\n           */_this.$element.trigger('moved.zf.slider',[$hndl]);});//because we don't know exactly how the handle will be moved, check the amount of time it should take to move.\nvar moveTime=this.$element.data('dragging')?1000/60:this.options.moveTime;Foundation.Move(moveTime,$hndl,function(){//adjusting the left/top property of the handle, based on the percentage calculated above\n$hndl.css(lOrT,movement+'%');if(!_this.options.doubleSided){//if single-handled, a simple method to expand the fill bar\n_this.$fill.css(hOrW,pctOfBar*100+'%');}else{//otherwise, use the css object we created above\n_this.$fill.css(css);}});/**\n         * Fires when the value has not been change for a given time.\n         * @event Slider#changed\n         */clearTimeout(_this.timeout);_this.timeout=setTimeout(function(){_this.$element.trigger('changed.zf.slider',[$hndl]);},_this.options.changedDelay);}/**\n       * Sets the initial attribute for the slider element.\n       * @function\n       * @private\n       * @param {Number} idx - index of the current handle/input to use.\n       */},{key:'_setInitAttr',value:function _setInitAttr(idx){var id=this.inputs.eq(idx).attr('id')||Foundation.GetYoDigits(6,'slider');this.inputs.eq(idx).attr({'id':id,'max':this.options.end,'min':this.options.start,'step':this.options.step});this.handles.eq(idx).attr({'role':'slider','aria-controls':id,'aria-valuemax':this.options.end,'aria-valuemin':this.options.start,'aria-valuenow':idx===0?this.options.initialStart:this.options.initialEnd,'aria-orientation':this.options.vertical?'vertical':'horizontal','tabindex':0});}/**\n       * Sets the input and `aria-valuenow` values for the slider element.\n       * @function\n       * @private\n       * @param {jQuery} $handle - the currently selected handle.\n       * @param {Number} val - floating point of the new value.\n       */},{key:'_setValues',value:function _setValues($handle,val){var idx=this.options.doubleSided?this.handles.index($handle):0;this.inputs.eq(idx).val(val);$handle.attr('aria-valuenow',val);}/**\n       * Handles events on the slider element.\n       * Calculates the new location of the current handle.\n       * If there are two handles and the bar was clicked, it determines which handle to move.\n       * @function\n       * @private\n       * @param {Object} e - the `event` object passed from the listener.\n       * @param {jQuery} $handle - the current handle to calculate for, if selected.\n       * @param {Number} val - floating point number for the new value of the slider.\n       * TODO clean this up, there's a lot of repeated code between this and the _setHandlePos fn.\n       */},{key:'_handleEvent',value:function _handleEvent(e,$handle,val){var value,hasVal;if(!val){//click or drag events\ne.preventDefault();var _this=this,vertical=this.options.vertical,param=vertical?'height':'width',direction=vertical?'top':'left',eventOffset=vertical?e.pageY:e.pageX,halfOfHandle=this.$handle[0].getBoundingClientRect()[param]/2,barDim=this.$element[0].getBoundingClientRect()[param],windowScroll=vertical?$(window).scrollTop():$(window).scrollLeft();var elemOffset=this.$element.offset()[direction];// touch events emulated by the touch util give position relative to screen, add window.scroll to event coordinates...\n// best way to guess this is simulated is if clientY == pageY\nif(e.clientY===e.pageY){eventOffset=eventOffset+windowScroll;}var eventFromBar=eventOffset-elemOffset;var barXY;if(eventFromBar<0){barXY=0;}else if(eventFromBar>barDim){barXY=barDim;}else{barXY=eventFromBar;}offsetPct=percent(barXY,barDim);value=(this.options.end-this.options.start)*offsetPct+this.options.start;// turn everything around for RTL, yay math!\nif(Foundation.rtl()&&!this.options.vertical){value=this.options.end-value;}value=_this._adjustValue(null,value);//boolean flag for the setHandlePos fn, specifically for vertical sliders\nhasVal=false;if(!$handle){//figure out which handle it is, pass it to the next function.\nvar firstHndlPos=absPosition(this.$handle,direction,barXY,param),secndHndlPos=absPosition(this.$handle2,direction,barXY,param);$handle=firstHndlPos<=secndHndlPos?this.$handle:this.$handle2;}}else{//change event on input\nvalue=this._adjustValue(null,val);hasVal=true;}this._setHandlePos($handle,value,hasVal);}/**\n       * Adjustes value for handle in regard to step value. returns adjusted value\n       * @function\n       * @private\n       * @param {jQuery} $handle - the selected handle.\n       * @param {Number} value - value to adjust. used if $handle is falsy\n       */},{key:'_adjustValue',value:function _adjustValue($handle,value){var val,step=this.options.step,div=parseFloat(step/2),left,prev_val,next_val;if(!!$handle){val=parseFloat($handle.attr('aria-valuenow'));}else{val=value;}left=val%step;prev_val=val-left;next_val=prev_val+step;if(left===0){return val;}val=val>=prev_val+div?next_val:prev_val;return val;}/**\n       * Adds event listeners to the slider elements.\n       * @function\n       * @private\n       * @param {jQuery} $handle - the current handle to apply listeners to.\n       */},{key:'_events',value:function _events($handle){var _this=this,curHandle,timer;this.inputs.off('change.zf.slider').on('change.zf.slider',function(e){var idx=_this.inputs.index($(this));_this._handleEvent(e,_this.handles.eq(idx),$(this).val());});if(this.options.clickSelect){this.$element.off('click.zf.slider').on('click.zf.slider',function(e){if(_this.$element.data('dragging')){return false;}if(!$(e.target).is('[data-slider-handle]')){if(_this.options.doubleSided){_this._handleEvent(e);}else{_this._handleEvent(e,_this.$handle);}}});}if(this.options.draggable){this.handles.addTouch();var $body=$('body');$handle.off('mousedown.zf.slider').on('mousedown.zf.slider',function(e){$handle.addClass('is-dragging');_this.$fill.addClass('is-dragging');//\n_this.$element.data('dragging',true);curHandle=$(e.currentTarget);$body.on('mousemove.zf.slider',function(e){e.preventDefault();_this._handleEvent(e,curHandle);}).on('mouseup.zf.slider',function(e){_this._handleEvent(e,curHandle);$handle.removeClass('is-dragging');_this.$fill.removeClass('is-dragging');_this.$element.data('dragging',false);$body.off('mousemove.zf.slider mouseup.zf.slider');});})// prevent events triggered by touch\n.on('selectstart.zf.slider touchmove.zf.slider',function(e){e.preventDefault();});}$handle.off('keydown.zf.slider').on('keydown.zf.slider',function(e){var _$handle=$(this),idx=_this.options.doubleSided?_this.handles.index(_$handle):0,oldValue=parseFloat(_this.inputs.eq(idx).val()),newValue;// handle keyboard event with keyboard util\nFoundation.Keyboard.handleKey(e,'Slider',{decrease:function decrease(){newValue=oldValue-_this.options.step;},increase:function increase(){newValue=oldValue+_this.options.step;},decrease_fast:function decrease_fast(){newValue=oldValue-_this.options.step*10;},increase_fast:function increase_fast(){newValue=oldValue+_this.options.step*10;},handled:function handled(){// only set handle pos when event was handled specially\ne.preventDefault();_this._setHandlePos(_$handle,newValue,true);}});/*if (newValue) { // if pressed key has special function, update value\n            e.preventDefault();\n            _this._setHandlePos(_$handle, newValue);\n          }*/});}/**\n       * Destroys the slider plugin.\n       */},{key:'destroy',value:function destroy(){this.handles.off('.zf.slider');this.inputs.off('.zf.slider');this.$element.off('.zf.slider');Foundation.unregisterPlugin(this);}}]);return Slider;}();Slider.defaults={/**\n     * Minimum value for the slider scale.\n     * @option\n     * @example 0\n     */start:0,/**\n     * Maximum value for the slider scale.\n     * @option\n     * @example 100\n     */end:100,/**\n     * Minimum value change per change event.\n     * @option\n     * @example 1\n     */step:1,/**\n     * Value at which the handle/input *(left handle/first input)* should be set to on initialization.\n     * @option\n     * @example 0\n     */initialStart:0,/**\n     * Value at which the right handle/second input should be set to on initialization.\n     * @option\n     * @example 100\n     */initialEnd:100,/**\n     * Allows the input to be located outside the container and visible. Set to by the JS\n     * @option\n     * @example false\n     */binding:false,/**\n     * Allows the user to click/tap on the slider bar to select a value.\n     * @option\n     * @example true\n     */clickSelect:true,/**\n     * Set to true and use the `vertical` class to change alignment to vertical.\n     * @option\n     * @example false\n     */vertical:false,/**\n     * Allows the user to drag the slider handle(s) to select a value.\n     * @option\n     * @example true\n     */draggable:true,/**\n     * Disables the slider and prevents event listeners from being applied. Double checked by JS with `disabledClass`.\n     * @option\n     * @example false\n     */disabled:false,/**\n     * Allows the use of two handles. Double checked by the JS. Changes some logic handling.\n     * @option\n     * @example false\n     */doubleSided:false,/**\n     * Potential future feature.\n     */// steps: 100,\n/**\n     * Number of decimal places the plugin should go to for floating point precision.\n     * @option\n     * @example 2\n     */decimal:2,/**\n     * Time delay for dragged elements.\n     */// dragDelay: 0,\n/**\n     * Time, in ms, to animate the movement of a slider handle if user clicks/taps on the bar. Needs to be manually set if updating the transition time in the Sass settings.\n     * @option\n     * @example 200\n     */moveTime:200,//update this if changing the transition time in the sass\n/**\n     * Class applied to disabled sliders.\n     * @option\n     * @example 'disabled'\n     */disabledClass:'disabled',/**\n     * Will invert the default layout for a vertical<span data-tooltip title=\"who would do this???\"> </span>slider.\n     * @option\n     * @example false\n     */invertVertical:false,/**\n     * Milliseconds before the `changed.zf-slider` event is triggered after value change.\n     * @option\n     * @example 500\n     */changedDelay:500};function percent(frac,num){return frac/num;}function absPosition($handle,dir,clickPos,param){return Math.abs($handle.position()[dir]+$handle[param]()/2-clickPos);}// Window exports\nFoundation.plugin(Slider,'Slider');}(jQuery);//*********this is in case we go to static, absolute positions instead of dynamic positioning********\n// this.setSteps(function() {\n//   _this._events();\n//   var initStart = _this.options.positions[_this.options.initialStart - 1] || null;\n//   var initEnd = _this.options.initialEnd ? _this.options.position[_this.options.initialEnd - 1] : null;\n//   if (initStart || initEnd) {\n//     _this._handleEvent(initStart, initEnd);\n//   }\n// });\n//***********the other part of absolute positions*************\n// Slider.prototype.setSteps = function(cb) {\n//   var posChange = this.$element.outerWidth() / this.options.steps;\n//   var counter = 0\n//   while(counter < this.options.steps) {\n//     if (counter) {\n//       this.options.positions.push(this.options.positions[counter - 1] + posChange);\n//     } else {\n//       this.options.positions.push(posChange);\n//     }\n//     counter++;\n//   }\n//   cb();\n// };\n'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}!function($){/**\n   * Sticky module.\n   * @module foundation.sticky\n   * @requires foundation.util.triggers\n   * @requires foundation.util.mediaQuery\n   */var Sticky=function(){/**\n     * Creates a new instance of a sticky thing.\n     * @class\n     * @param {jQuery} element - jQuery object to make sticky.\n     * @param {Object} options - options object passed when creating the element programmatically.\n     */function Sticky(element,options){_classCallCheck(this,Sticky);this.$element=element;this.options=$.extend({},Sticky.defaults,this.$element.data(),options);this._init();Foundation.registerPlugin(this,'Sticky');}/**\n     * Initializes the sticky element by adding classes, getting/setting dimensions, breakpoints and attributes\n     * @function\n     * @private\n     */_createClass(Sticky,[{key:'_init',value:function _init(){var $parent=this.$element.parent('[data-sticky-container]'),id=this.$element[0].id||Foundation.GetYoDigits(6,'sticky'),_this=this;if(!$parent.length){this.wasWrapped=true;}this.$container=$parent.length?$parent:$(this.options.container).wrapInner(this.$element);this.$container.addClass(this.options.containerClass);this.$element.addClass(this.options.stickyClass).attr({'data-resize':id});this.scrollCount=this.options.checkEvery;this.isStuck=false;$(window).one('load.zf.sticky',function(){if(_this.options.anchor!==''){_this.$anchor=$('#'+_this.options.anchor);}else{_this._parsePoints();}_this._setSizes(function(){_this._calc(false);});_this._events(id.split('-').reverse().join('-'));});}/**\n       * If using multiple elements as anchors, calculates the top and bottom pixel values the sticky thing should stick and unstick on.\n       * @function\n       * @private\n       */},{key:'_parsePoints',value:function _parsePoints(){var top=this.options.topAnchor==\"\"?1:this.options.topAnchor,btm=this.options.btmAnchor==\"\"?document.documentElement.scrollHeight:this.options.btmAnchor,pts=[top,btm],breaks={};for(var i=0,len=pts.length;i<len&&pts[i];i++){var pt;if(typeof pts[i]==='number'){pt=pts[i];}else{var place=pts[i].split(':'),anchor=$('#'+place[0]);pt=anchor.offset().top;if(place[1]&&place[1].toLowerCase()==='bottom'){pt+=anchor[0].getBoundingClientRect().height;}}breaks[i]=pt;}this.points=breaks;return;}/**\n       * Adds event handlers for the scrolling element.\n       * @private\n       * @param {String} id - psuedo-random id for unique scroll event listener.\n       */},{key:'_events',value:function _events(id){var _this=this,scrollListener=this.scrollListener='scroll.zf.'+id;if(this.isOn){return;}if(this.canStick){this.isOn=true;$(window).off(scrollListener).on(scrollListener,function(e){if(_this.scrollCount===0){_this.scrollCount=_this.options.checkEvery;_this._setSizes(function(){_this._calc(false,window.pageYOffset);});}else{_this.scrollCount--;_this._calc(false,window.pageYOffset);}});}this.$element.off('resizeme.zf.trigger').on('resizeme.zf.trigger',function(e,el){_this._setSizes(function(){_this._calc(false);if(_this.canStick){if(!_this.isOn){_this._events(id);}}else if(_this.isOn){_this._pauseListeners(scrollListener);}});});}/**\n       * Removes event handlers for scroll and change events on anchor.\n       * @fires Sticky#pause\n       * @param {String} scrollListener - unique, namespaced scroll listener attached to `window`\n       */},{key:'_pauseListeners',value:function _pauseListeners(scrollListener){this.isOn=false;$(window).off(scrollListener);/**\n         * Fires when the plugin is paused due to resize event shrinking the view.\n         * @event Sticky#pause\n         * @private\n         */this.$element.trigger('pause.zf.sticky');}/**\n       * Called on every `scroll` event and on `_init`\n       * fires functions based on booleans and cached values\n       * @param {Boolean} checkSizes - true if plugin should recalculate sizes and breakpoints.\n       * @param {Number} scroll - current scroll position passed from scroll event cb function. If not passed, defaults to `window.pageYOffset`.\n       */},{key:'_calc',value:function _calc(checkSizes,scroll){if(checkSizes){this._setSizes();}if(!this.canStick){if(this.isStuck){this._removeSticky(true);}return false;}if(!scroll){scroll=window.pageYOffset;}if(scroll>=this.topPoint){if(scroll<=this.bottomPoint){if(!this.isStuck){this._setSticky();}}else{if(this.isStuck){this._removeSticky(false);}}}else{if(this.isStuck){this._removeSticky(true);}}}/**\n       * Causes the $element to become stuck.\n       * Adds `position: fixed;`, and helper classes.\n       * @fires Sticky#stuckto\n       * @function\n       * @private\n       */},{key:'_setSticky',value:function _setSticky(){var _this=this,stickTo=this.options.stickTo,mrgn=stickTo==='top'?'marginTop':'marginBottom',notStuckTo=stickTo==='top'?'bottom':'top',css={};css[mrgn]=this.options[mrgn]+'em';css[stickTo]=0;css[notStuckTo]='auto';css['left']=this.$container.offset().left+parseInt(window.getComputedStyle(this.$container[0])[\"padding-left\"],10);this.isStuck=true;this.$element.removeClass('is-anchored is-at-'+notStuckTo).addClass('is-stuck is-at-'+stickTo).css(css)/**\n         * Fires when the $element has become `position: fixed;`\n         * Namespaced to `top` or `bottom`, e.g. `sticky.zf.stuckto:top`\n         * @event Sticky#stuckto\n         */.trigger('sticky.zf.stuckto:'+stickTo);this.$element.on(\"transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd\",function(){_this._setSizes();});}/**\n       * Causes the $element to become unstuck.\n       * Removes `position: fixed;`, and helper classes.\n       * Adds other helper classes.\n       * @param {Boolean} isTop - tells the function if the $element should anchor to the top or bottom of its $anchor element.\n       * @fires Sticky#unstuckfrom\n       * @private\n       */},{key:'_removeSticky',value:function _removeSticky(isTop){var stickTo=this.options.stickTo,stickToTop=stickTo==='top',css={},anchorPt=(this.points?this.points[1]-this.points[0]:this.anchorHeight)-this.elemHeight,mrgn=stickToTop?'marginTop':'marginBottom',notStuckTo=stickToTop?'bottom':'top',topOrBottom=isTop?'top':'bottom';css[mrgn]=0;css['bottom']='auto';if(isTop){css['top']=0;}else{css['top']=anchorPt;}css['left']='';this.isStuck=false;this.$element.removeClass('is-stuck is-at-'+stickTo).addClass('is-anchored is-at-'+topOrBottom).css(css)/**\n         * Fires when the $element has become anchored.\n         * Namespaced to `top` or `bottom`, e.g. `sticky.zf.unstuckfrom:bottom`\n         * @event Sticky#unstuckfrom\n         */.trigger('sticky.zf.unstuckfrom:'+topOrBottom);}/**\n       * Sets the $element and $container sizes for plugin.\n       * Calls `_setBreakPoints`.\n       * @param {Function} cb - optional callback function to fire on completion of `_setBreakPoints`.\n       * @private\n       */},{key:'_setSizes',value:function _setSizes(cb){this.canStick=Foundation.MediaQuery.atLeast(this.options.stickyOn);if(!this.canStick){cb();}var _this=this,newElemWidth=this.$container[0].getBoundingClientRect().width,comp=window.getComputedStyle(this.$container[0]),pdng=parseInt(comp['padding-right'],10);if(this.$anchor&&this.$anchor.length){this.anchorHeight=this.$anchor[0].getBoundingClientRect().height;}else{this._parsePoints();}this.$element.css({'max-width':newElemWidth-pdng+'px'});var newContainerHeight=this.$element[0].getBoundingClientRect().height||this.containerHeight;if(this.$element.css(\"display\")==\"none\"){newContainerHeight=0;}this.containerHeight=newContainerHeight;this.$container.css({height:newContainerHeight});this.elemHeight=newContainerHeight;if(this.isStuck){this.$element.css({\"left\":this.$container.offset().left+parseInt(comp['padding-left'],10)});}this._setBreakPoints(newContainerHeight,function(){if(cb){cb();}});}/**\n       * Sets the upper and lower breakpoints for the element to become sticky/unsticky.\n       * @param {Number} elemHeight - px value for sticky.$element height, calculated by `_setSizes`.\n       * @param {Function} cb - optional callback function to be called on completion.\n       * @private\n       */},{key:'_setBreakPoints',value:function _setBreakPoints(elemHeight,cb){if(!this.canStick){if(cb){cb();}else{return false;}}var mTop=emCalc(this.options.marginTop),mBtm=emCalc(this.options.marginBottom),topPoint=this.points?this.points[0]:this.$anchor.offset().top,bottomPoint=this.points?this.points[1]:topPoint+this.anchorHeight,// topPoint = this.$anchor.offset().top || this.points[0],\n// bottomPoint = topPoint + this.anchorHeight || this.points[1],\nwinHeight=window.innerHeight;if(this.options.stickTo==='top'){topPoint-=mTop;bottomPoint-=elemHeight+mTop;}else if(this.options.stickTo==='bottom'){topPoint-=winHeight-(elemHeight+mBtm);bottomPoint-=winHeight-mBtm;}else{//this would be the stickTo: both option... tricky\n}this.topPoint=topPoint;this.bottomPoint=bottomPoint;if(cb){cb();}}/**\n       * Destroys the current sticky element.\n       * Resets the element to the top position first.\n       * Removes event listeners, JS-added css properties and classes, and unwraps the $element if the JS added the $container.\n       * @function\n       */},{key:'destroy',value:function destroy(){this._removeSticky(true);this.$element.removeClass(this.options.stickyClass+' is-anchored is-at-top').css({height:'',top:'',bottom:'','max-width':''}).off('resizeme.zf.trigger');if(this.$anchor&&this.$anchor.length){this.$anchor.off('change.zf.sticky');}$(window).off(this.scrollListener);if(this.wasWrapped){this.$element.unwrap();}else{this.$container.removeClass(this.options.containerClass).css({height:''});}Foundation.unregisterPlugin(this);}}]);return Sticky;}();Sticky.defaults={/**\n     * Customizable container template. Add your own classes for styling and sizing.\n     * @option\n     * @example '&lt;div data-sticky-container class=\"small-6 columns\"&gt;&lt;/div&gt;'\n     */container:'<div data-sticky-container></div>',/**\n     * Location in the view the element sticks to.\n     * @option\n     * @example 'top'\n     */stickTo:'top',/**\n     * If anchored to a single element, the id of that element.\n     * @option\n     * @example 'exampleId'\n     */anchor:'',/**\n     * If using more than one element as anchor points, the id of the top anchor.\n     * @option\n     * @example 'exampleId:top'\n     */topAnchor:'',/**\n     * If using more than one element as anchor points, the id of the bottom anchor.\n     * @option\n     * @example 'exampleId:bottom'\n     */btmAnchor:'',/**\n     * Margin, in `em`'s to apply to the top of the element when it becomes sticky.\n     * @option\n     * @example 1\n     */marginTop:1,/**\n     * Margin, in `em`'s to apply to the bottom of the element when it becomes sticky.\n     * @option\n     * @example 1\n     */marginBottom:1,/**\n     * Breakpoint string that is the minimum screen size an element should become sticky.\n     * @option\n     * @example 'medium'\n     */stickyOn:'medium',/**\n     * Class applied to sticky element, and removed on destruction. Foundation defaults to `sticky`.\n     * @option\n     * @example 'sticky'\n     */stickyClass:'sticky',/**\n     * Class applied to sticky container. Foundation defaults to `sticky-container`.\n     * @option\n     * @example 'sticky-container'\n     */containerClass:'sticky-container',/**\n     * Number of scroll events between the plugin's recalculating sticky points. Setting it to `0` will cause it to recalc every scroll event, setting it to `-1` will prevent recalc on scroll.\n     * @option\n     * @example 50\n     */checkEvery:-1};/**\n   * Helper function to calculate em values\n   * @param Number {em} - number of em's to calculate into pixels\n   */function emCalc(em){return parseInt(window.getComputedStyle(document.body,null).fontSize,10)*em;}// Window exports\nFoundation.plugin(Sticky,'Sticky');}(jQuery);'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}!function($){/**\n   * Tabs module.\n   * @module foundation.tabs\n   * @requires foundation.util.keyboard\n   * @requires foundation.util.timerAndImageLoader if tabs contain images\n   */var Tabs=function(){/**\n     * Creates a new instance of tabs.\n     * @class\n     * @fires Tabs#init\n     * @param {jQuery} element - jQuery object to make into tabs.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */function Tabs(element,options){_classCallCheck(this,Tabs);this.$element=element;this.options=$.extend({},Tabs.defaults,this.$element.data(),options);this._init();Foundation.registerPlugin(this,'Tabs');Foundation.Keyboard.register('Tabs',{'ENTER':'open','SPACE':'open','ARROW_RIGHT':'next','ARROW_UP':'previous','ARROW_DOWN':'next','ARROW_LEFT':'previous'// 'TAB': 'next',\n// 'SHIFT_TAB': 'previous'\n});}/**\n     * Initializes the tabs by showing and focusing (if autoFocus=true) the preset active tab.\n     * @private\n     */_createClass(Tabs,[{key:'_init',value:function _init(){var _this=this;this.$tabTitles=this.$element.find('.'+this.options.linkClass);this.$tabContent=$('[data-tabs-content=\"'+this.$element[0].id+'\"]');this.$tabTitles.each(function(){var $elem=$(this),$link=$elem.find('a'),isActive=$elem.hasClass('is-active'),hash=$link[0].hash.slice(1),linkId=$link[0].id?$link[0].id:hash+'-label',$tabContent=$('#'+hash);$elem.attr({'role':'presentation'});$link.attr({'role':'tab','aria-controls':hash,'aria-selected':isActive,'id':linkId});$tabContent.attr({'role':'tabpanel','aria-hidden':!isActive,'aria-labelledby':linkId});if(isActive&&_this.options.autoFocus){$link.focus();}});if(this.options.matchHeight){var $images=this.$tabContent.find('img');if($images.length){Foundation.onImagesLoaded($images,this._setHeight.bind(this));}else{this._setHeight();}}this._events();}/**\n       * Adds event handlers for items within the tabs.\n       * @private\n       */},{key:'_events',value:function _events(){this._addKeyHandler();this._addClickHandler();this._setHeightMqHandler=null;if(this.options.matchHeight){this._setHeightMqHandler=this._setHeight.bind(this);$(window).on('changed.zf.mediaquery',this._setHeightMqHandler);}}/**\n       * Adds click handlers for items within the tabs.\n       * @private\n       */},{key:'_addClickHandler',value:function _addClickHandler(){var _this=this;this.$element.off('click.zf.tabs').on('click.zf.tabs','.'+this.options.linkClass,function(e){e.preventDefault();e.stopPropagation();if($(this).hasClass('is-active')){return;}_this._handleTabChange($(this));});}/**\n       * Adds keyboard event handlers for items within the tabs.\n       * @private\n       */},{key:'_addKeyHandler',value:function _addKeyHandler(){var _this=this;var $firstTab=_this.$element.find('li:first-of-type');var $lastTab=_this.$element.find('li:last-of-type');this.$tabTitles.off('keydown.zf.tabs').on('keydown.zf.tabs',function(e){if(e.which===9)return;var $element=$(this),$elements=$element.parent('ul').children('li'),$prevElement,$nextElement;$elements.each(function(i){if($(this).is($element)){if(_this.options.wrapOnKeys){$prevElement=i===0?$elements.last():$elements.eq(i-1);$nextElement=i===$elements.length-1?$elements.first():$elements.eq(i+1);}else{$prevElement=$elements.eq(Math.max(0,i-1));$nextElement=$elements.eq(Math.min(i+1,$elements.length-1));}return;}});// handle keyboard event with keyboard util\nFoundation.Keyboard.handleKey(e,'Tabs',{open:function open(){$element.find('[role=\"tab\"]').focus();_this._handleTabChange($element);},previous:function previous(){$prevElement.find('[role=\"tab\"]').focus();_this._handleTabChange($prevElement);},next:function next(){$nextElement.find('[role=\"tab\"]').focus();_this._handleTabChange($nextElement);},handled:function handled(){e.stopPropagation();e.preventDefault();}});});}/**\n       * Opens the tab `$targetContent` defined by `$target`.\n       * @param {jQuery} $target - Tab to open.\n       * @fires Tabs#change\n       * @function\n       */},{key:'_handleTabChange',value:function _handleTabChange($target){var $tabLink=$target.find('[role=\"tab\"]'),hash=$tabLink[0].hash,$targetContent=this.$tabContent.find(hash),$oldTab=this.$element.find('.'+this.options.linkClass+'.is-active').removeClass('is-active').find('[role=\"tab\"]').attr({'aria-selected':'false'});$('#'+$oldTab.attr('aria-controls')).removeClass('is-active').attr({'aria-hidden':'true'});$target.addClass('is-active');$tabLink.attr({'aria-selected':'true'});$targetContent.addClass('is-active').attr({'aria-hidden':'false'});/**\n         * Fires when the plugin has successfully changed tabs.\n         * @event Tabs#change\n         */this.$element.trigger('change.zf.tabs',[$target]);}/**\n       * Public method for selecting a content pane to display.\n       * @param {jQuery | String} elem - jQuery object or string of the id of the pane to display.\n       * @function\n       */},{key:'selectTab',value:function selectTab(elem){var idStr;if((typeof elem==='undefined'?'undefined':_typeof(elem))==='object'){idStr=elem[0].id;}else{idStr=elem;}if(idStr.indexOf('#')<0){idStr='#'+idStr;}var $target=this.$tabTitles.find('[href=\"'+idStr+'\"]').parent('.'+this.options.linkClass);this._handleTabChange($target);}},{key:'_setHeight',/**\n       * Sets the height of each panel to the height of the tallest panel.\n       * If enabled in options, gets called on media query change.\n       * If loading content via external source, can be called directly or with _reflow.\n       * @function\n       * @private\n       */value:function _setHeight(){var max=0;this.$tabContent.find('.'+this.options.panelClass).css('height','').each(function(){var panel=$(this),isActive=panel.hasClass('is-active');if(!isActive){panel.css({'visibility':'hidden','display':'block'});}var temp=this.getBoundingClientRect().height;if(!isActive){panel.css({'visibility':'','display':''});}max=temp>max?temp:max;}).css('height',max+'px');}/**\n       * Destroys an instance of an tabs.\n       * @fires Tabs#destroyed\n       */},{key:'destroy',value:function destroy(){this.$element.find('.'+this.options.linkClass).off('.zf.tabs').hide().end().find('.'+this.options.panelClass).hide();if(this.options.matchHeight){if(this._setHeightMqHandler!=null){$(window).off('changed.zf.mediaquery',this._setHeightMqHandler);}}Foundation.unregisterPlugin(this);}}]);return Tabs;}();Tabs.defaults={/**\n     * Allows the window to scroll to content of active pane on load if set to true.\n     * @option\n     * @example false\n     */autoFocus:false,/**\n     * Allows keyboard input to 'wrap' around the tab links.\n     * @option\n     * @example true\n     */wrapOnKeys:true,/**\n     * Allows the tab content panes to match heights if set to true.\n     * @option\n     * @example false\n     */matchHeight:false,/**\n     * Class applied to `li`'s in tab link list.\n     * @option\n     * @example 'tabs-title'\n     */linkClass:'tabs-title',/**\n     * Class applied to the content containers.\n     * @option\n     * @example 'tabs-panel'\n     */panelClass:'tabs-panel'};function checkClass($elem){return $elem.hasClass('is-active');}// Window exports\nFoundation.plugin(Tabs,'Tabs');}(jQuery);'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}!function($){/**\n   * Toggler module.\n   * @module foundation.toggler\n   * @requires foundation.util.motion\n   * @requires foundation.util.triggers\n   */var Toggler=function(){/**\n     * Creates a new instance of Toggler.\n     * @class\n     * @fires Toggler#init\n     * @param {Object} element - jQuery object to add the trigger to.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */function Toggler(element,options){_classCallCheck(this,Toggler);this.$element=element;this.options=$.extend({},Toggler.defaults,element.data(),options);this.className='';this._init();this._events();Foundation.registerPlugin(this,'Toggler');}/**\n     * Initializes the Toggler plugin by parsing the toggle class from data-toggler, or animation classes from data-animate.\n     * @function\n     * @private\n     */_createClass(Toggler,[{key:'_init',value:function _init(){var input;// Parse animation classes if they were set\nif(this.options.animate){input=this.options.animate.split(' ');this.animationIn=input[0];this.animationOut=input[1]||null;}// Otherwise, parse toggle class\nelse{input=this.$element.data('toggler');// Allow for a . at the beginning of the string\nthis.className=input[0]==='.'?input.slice(1):input;}// Add ARIA attributes to triggers\nvar id=this.$element[0].id;$('[data-open=\"'+id+'\"], [data-close=\"'+id+'\"], [data-toggle=\"'+id+'\"]').attr('aria-controls',id);// If the target is hidden, add aria-hidden\nthis.$element.attr('aria-expanded',this.$element.is(':hidden')?false:true);}/**\n       * Initializes events for the toggle trigger.\n       * @function\n       * @private\n       */},{key:'_events',value:function _events(){this.$element.off('toggle.zf.trigger').on('toggle.zf.trigger',this.toggle.bind(this));}/**\n       * Toggles the target class on the target element. An event is fired from the original trigger depending on if the resultant state was \"on\" or \"off\".\n       * @function\n       * @fires Toggler#on\n       * @fires Toggler#off\n       */},{key:'toggle',value:function toggle(){this[this.options.animate?'_toggleAnimate':'_toggleClass']();}},{key:'_toggleClass',value:function _toggleClass(){this.$element.toggleClass(this.className);var isOn=this.$element.hasClass(this.className);if(isOn){/**\n           * Fires if the target element has the class after a toggle.\n           * @event Toggler#on\n           */this.$element.trigger('on.zf.toggler');}else{/**\n           * Fires if the target element does not have the class after a toggle.\n           * @event Toggler#off\n           */this.$element.trigger('off.zf.toggler');}this._updateARIA(isOn);}},{key:'_toggleAnimate',value:function _toggleAnimate(){var _this=this;if(this.$element.is(':hidden')){Foundation.Motion.animateIn(this.$element,this.animationIn,function(){_this._updateARIA(true);this.trigger('on.zf.toggler');});}else{Foundation.Motion.animateOut(this.$element,this.animationOut,function(){_this._updateARIA(false);this.trigger('off.zf.toggler');});}}},{key:'_updateARIA',value:function _updateARIA(isOn){this.$element.attr('aria-expanded',isOn?true:false);}/**\n       * Destroys the instance of Toggler on the element.\n       * @function\n       */},{key:'destroy',value:function destroy(){this.$element.off('.zf.toggler');Foundation.unregisterPlugin(this);}}]);return Toggler;}();Toggler.defaults={/**\n     * Tells the plugin if the element should animated when toggled.\n     * @option\n     * @example false\n     */animate:false};// Window exports\nFoundation.plugin(Toggler,'Toggler');}(jQuery);'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}!function($){/**\n   * Tooltip module.\n   * @module foundation.tooltip\n   * @requires foundation.util.box\n   * @requires foundation.util.triggers\n   */var Tooltip=function(){/**\n     * Creates a new instance of a Tooltip.\n     * @class\n     * @fires Tooltip#init\n     * @param {jQuery} element - jQuery object to attach a tooltip to.\n     * @param {Object} options - object to extend the default configuration.\n     */function Tooltip(element,options){_classCallCheck(this,Tooltip);this.$element=element;this.options=$.extend({},Tooltip.defaults,this.$element.data(),options);this.isActive=false;this.isClick=false;this._init();Foundation.registerPlugin(this,'Tooltip');}/**\n     * Initializes the tooltip by setting the creating the tip element, adding it's text, setting private variables and setting attributes on the anchor.\n     * @private\n     */_createClass(Tooltip,[{key:'_init',value:function _init(){var elemId=this.$element.attr('aria-describedby')||Foundation.GetYoDigits(6,'tooltip');this.options.positionClass=this.options.positionClass||this._getPositionClass(this.$element);this.options.tipText=this.options.tipText||this.$element.attr('title');this.template=this.options.template?$(this.options.template):this._buildTemplate(elemId);this.template.appendTo(document.body).text(this.options.tipText).hide();this.$element.attr({'title':'','aria-describedby':elemId,'data-yeti-box':elemId,'data-toggle':elemId,'data-resize':elemId}).addClass(this.triggerClass);//helper variables to track movement on collisions\nthis.usedPositions=[];this.counter=4;this.classChanged=false;this._events();}/**\n       * Grabs the current positioning class, if present, and returns the value or an empty string.\n       * @private\n       */},{key:'_getPositionClass',value:function _getPositionClass(element){if(!element){return'';}// var position = element.attr('class').match(/top|left|right/g);\nvar position=element[0].className.match(/\\b(top|left|right)\\b/g);position=position?position[0]:'';return position;}},{key:'_buildTemplate',/**\n       * builds the tooltip element, adds attributes, and returns the template.\n       * @private\n       */value:function _buildTemplate(id){var templateClasses=(this.options.tooltipClass+' '+this.options.positionClass+' '+this.options.templateClasses).trim();var $template=$('<div></div>').addClass(templateClasses).attr({'role':'tooltip','aria-hidden':true,'data-is-active':false,'data-is-focus':false,'id':id});return $template;}/**\n       * Function that gets called if a collision event is detected.\n       * @param {String} position - positioning class to try\n       * @private\n       */},{key:'_reposition',value:function _reposition(position){this.usedPositions.push(position?position:'bottom');//default, try switching to opposite side\nif(!position&&this.usedPositions.indexOf('top')<0){this.template.addClass('top');}else if(position==='top'&&this.usedPositions.indexOf('bottom')<0){this.template.removeClass(position);}else if(position==='left'&&this.usedPositions.indexOf('right')<0){this.template.removeClass(position).addClass('right');}else if(position==='right'&&this.usedPositions.indexOf('left')<0){this.template.removeClass(position).addClass('left');}//if default change didn't work, try bottom or left first\nelse if(!position&&this.usedPositions.indexOf('top')>-1&&this.usedPositions.indexOf('left')<0){this.template.addClass('left');}else if(position==='top'&&this.usedPositions.indexOf('bottom')>-1&&this.usedPositions.indexOf('left')<0){this.template.removeClass(position).addClass('left');}else if(position==='left'&&this.usedPositions.indexOf('right')>-1&&this.usedPositions.indexOf('bottom')<0){this.template.removeClass(position);}else if(position==='right'&&this.usedPositions.indexOf('left')>-1&&this.usedPositions.indexOf('bottom')<0){this.template.removeClass(position);}//if nothing cleared, set to bottom\nelse{this.template.removeClass(position);}this.classChanged=true;this.counter--;}/**\n       * sets the position class of an element and recursively calls itself until there are no more possible positions to attempt, or the tooltip element is no longer colliding.\n       * if the tooltip is larger than the screen width, default to full width - any user selected margin\n       * @private\n       */},{key:'_setPosition',value:function _setPosition(){var position=this._getPositionClass(this.template),$tipDims=Foundation.Box.GetDimensions(this.template),$anchorDims=Foundation.Box.GetDimensions(this.$element),direction=position==='left'?'left':position==='right'?'left':'top',param=direction==='top'?'height':'width',offset=param==='height'?this.options.vOffset:this.options.hOffset,_this=this;if($tipDims.width>=$tipDims.windowDims.width||!this.counter&&!Foundation.Box.ImNotTouchingYou(this.template)){this.template.offset(Foundation.Box.GetOffsets(this.template,this.$element,'center bottom',this.options.vOffset,this.options.hOffset,true)).css({// this.$element.offset(Foundation.GetOffsets(this.template, this.$element, 'center bottom', this.options.vOffset, this.options.hOffset, true)).css({\n'width':$anchorDims.windowDims.width-this.options.hOffset*2,'height':'auto'});return false;}this.template.offset(Foundation.Box.GetOffsets(this.template,this.$element,'center '+(position||'bottom'),this.options.vOffset,this.options.hOffset));while(!Foundation.Box.ImNotTouchingYou(this.template)&&this.counter){this._reposition(position);this._setPosition();}}/**\n       * reveals the tooltip, and fires an event to close any other open tooltips on the page\n       * @fires Tooltip#closeme\n       * @fires Tooltip#show\n       * @function\n       */},{key:'show',value:function show(){if(this.options.showOn!=='all'&&!Foundation.MediaQuery.atLeast(this.options.showOn)){// console.error('The screen is too small to display this tooltip');\nreturn false;}var _this=this;this.template.css('visibility','hidden').show();this._setPosition();/**\n         * Fires to close all other open tooltips on the page\n         * @event Closeme#tooltip\n         */this.$element.trigger('closeme.zf.tooltip',this.template.attr('id'));this.template.attr({'data-is-active':true,'aria-hidden':false});_this.isActive=true;// console.log(this.template);\nthis.template.stop().hide().css('visibility','').fadeIn(this.options.fadeInDuration,function(){//maybe do stuff?\n});/**\n         * Fires when the tooltip is shown\n         * @event Tooltip#show\n         */this.$element.trigger('show.zf.tooltip');}/**\n       * Hides the current tooltip, and resets the positioning class if it was changed due to collision\n       * @fires Tooltip#hide\n       * @function\n       */},{key:'hide',value:function hide(){// console.log('hiding', this.$element.data('yeti-box'));\nvar _this=this;this.template.stop().attr({'aria-hidden':true,'data-is-active':false}).fadeOut(this.options.fadeOutDuration,function(){_this.isActive=false;_this.isClick=false;if(_this.classChanged){_this.template.removeClass(_this._getPositionClass(_this.template)).addClass(_this.options.positionClass);_this.usedPositions=[];_this.counter=4;_this.classChanged=false;}});/**\n         * fires when the tooltip is hidden\n         * @event Tooltip#hide\n         */this.$element.trigger('hide.zf.tooltip');}/**\n       * adds event listeners for the tooltip and its anchor\n       * TODO combine some of the listeners like focus and mouseenter, etc.\n       * @private\n       */},{key:'_events',value:function _events(){var _this=this;var $template=this.template;var isFocus=false;if(!this.options.disableHover){this.$element.on('mouseenter.zf.tooltip',function(e){if(!_this.isActive){_this.timeout=setTimeout(function(){_this.show();},_this.options.hoverDelay);}}).on('mouseleave.zf.tooltip',function(e){clearTimeout(_this.timeout);if(!isFocus||_this.isClick&&!_this.options.clickOpen){_this.hide();}});}if(this.options.clickOpen){this.$element.on('mousedown.zf.tooltip',function(e){e.stopImmediatePropagation();if(_this.isClick){//_this.hide();\n// _this.isClick = false;\n}else{_this.isClick=true;if((_this.options.disableHover||!_this.$element.attr('tabindex'))&&!_this.isActive){_this.show();}}});}else{this.$element.on('mousedown.zf.tooltip',function(e){e.stopImmediatePropagation();_this.isClick=true;});}if(!this.options.disableForTouch){this.$element.on('tap.zf.tooltip touchend.zf.tooltip',function(e){_this.isActive?_this.hide():_this.show();});}this.$element.on({// 'toggle.zf.trigger': this.toggle.bind(this),\n// 'close.zf.trigger': this.hide.bind(this)\n'close.zf.trigger':this.hide.bind(this)});this.$element.on('focus.zf.tooltip',function(e){isFocus=true;if(_this.isClick){// If we're not showing open on clicks, we need to pretend a click-launched focus isn't\n// a real focus, otherwise on hover and come back we get bad behavior\nif(!_this.options.clickOpen){isFocus=false;}return false;}else{_this.show();}}).on('focusout.zf.tooltip',function(e){isFocus=false;_this.isClick=false;_this.hide();}).on('resizeme.zf.trigger',function(){if(_this.isActive){_this._setPosition();}});}/**\n       * adds a toggle method, in addition to the static show() & hide() functions\n       * @function\n       */},{key:'toggle',value:function toggle(){if(this.isActive){this.hide();}else{this.show();}}/**\n       * Destroys an instance of tooltip, removes template element from the view.\n       * @function\n       */},{key:'destroy',value:function destroy(){this.$element.attr('title',this.template.text()).off('.zf.trigger .zf.tootip')//  .removeClass('has-tip')\n.removeAttr('aria-describedby').removeAttr('data-yeti-box').removeAttr('data-toggle').removeAttr('data-resize');this.template.remove();Foundation.unregisterPlugin(this);}}]);return Tooltip;}();Tooltip.defaults={disableForTouch:false,/**\n     * Time, in ms, before a tooltip should open on hover.\n     * @option\n     * @example 200\n     */hoverDelay:200,/**\n     * Time, in ms, a tooltip should take to fade into view.\n     * @option\n     * @example 150\n     */fadeInDuration:150,/**\n     * Time, in ms, a tooltip should take to fade out of view.\n     * @option\n     * @example 150\n     */fadeOutDuration:150,/**\n     * Disables hover events from opening the tooltip if set to true\n     * @option\n     * @example false\n     */disableHover:false,/**\n     * Optional addtional classes to apply to the tooltip template on init.\n     * @option\n     * @example 'my-cool-tip-class'\n     */templateClasses:'',/**\n     * Non-optional class added to tooltip templates. Foundation default is 'tooltip'.\n     * @option\n     * @example 'tooltip'\n     */tooltipClass:'tooltip',/**\n     * Class applied to the tooltip anchor element.\n     * @option\n     * @example 'has-tip'\n     */triggerClass:'has-tip',/**\n     * Minimum breakpoint size at which to open the tooltip.\n     * @option\n     * @example 'small'\n     */showOn:'small',/**\n     * Custom template to be used to generate markup for tooltip.\n     * @option\n     * @example '&lt;div class=\"tooltip\"&gt;&lt;/div&gt;'\n     */template:'',/**\n     * Text displayed in the tooltip template on open.\n     * @option\n     * @example 'Some cool space fact here.'\n     */tipText:'',touchCloseText:'Tap to close.',/**\n     * Allows the tooltip to remain open if triggered with a click or touch event.\n     * @option\n     * @example true\n     */clickOpen:true,/**\n     * Additional positioning classes, set by the JS\n     * @option\n     * @example 'top'\n     */positionClass:'',/**\n     * Distance, in pixels, the template should push away from the anchor on the Y axis.\n     * @option\n     * @example 10\n     */vOffset:10,/**\n     * Distance, in pixels, the template should push away from the anchor on the X axis, if aligned to a side.\n     * @option\n     * @example 12\n     */hOffset:12};/**\n   * TODO utilize resize event trigger\n   */// Window exports\nFoundation.plugin(Tooltip,'Tooltip');}(jQuery);\n\n},{}],7:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n/*!\n * headroom.js v0.9.3 - Give your page some headroom. Hide your header until you need it\n * Copyright (c) 2016 Nick Williams - http://wicky.nillia.ms/headroom.js\n * License: MIT\n */\n\n(function (root, factory) {\n  'use strict';\n\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {\n    // COMMONJS\n    module.exports = factory();\n  } else {\n    // BROWSER\n    root.Headroom = factory();\n  }\n})(undefined, function () {\n  'use strict';\n\n  /* exported features */\n\n  var features = {\n    bind: !!function () {}.bind,\n    classList: 'classList' in document.documentElement,\n    rAF: !!(window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame)\n  };\n  window.requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame;\n\n  /**\n   * Handles debouncing of events via requestAnimationFrame\n   * @see http://www.html5rocks.com/en/tutorials/speed/animations/\n   * @param {Function} callback The callback to handle whichever event\n   */\n  function Debouncer(callback) {\n    this.callback = callback;\n    this.ticking = false;\n  }\n  Debouncer.prototype = {\n    constructor: Debouncer,\n\n    /**\n     * dispatches the event to the supplied callback\n     * @private\n     */\n    update: function update() {\n      this.callback && this.callback();\n      this.ticking = false;\n    },\n\n    /**\n     * ensures events don't get stacked\n     * @private\n     */\n    requestTick: function requestTick() {\n      if (!this.ticking) {\n        requestAnimationFrame(this.rafCallback || (this.rafCallback = this.update.bind(this)));\n        this.ticking = true;\n      }\n    },\n\n    /**\n     * Attach this as the event listeners\n     */\n    handleEvent: function handleEvent() {\n      this.requestTick();\n    }\n  };\n  /**\n   * Check if object is part of the DOM\n   * @constructor\n   * @param {Object} obj element to check\n   */\n  function isDOMElement(obj) {\n    return obj && typeof window !== 'undefined' && (obj === window || obj.nodeType);\n  }\n\n  /**\n   * Helper function for extending objects\n   */\n  function extend(object /*, objectN ... */) {\n    if (arguments.length <= 0) {\n      throw new Error('Missing arguments in extend function');\n    }\n\n    var result = object || {},\n        key,\n        i;\n\n    for (i = 1; i < arguments.length; i++) {\n      var replacement = arguments[i] || {};\n\n      for (key in replacement) {\n        // Recurse into object except if the object is a DOM element\n        if (_typeof(result[key]) === 'object' && !isDOMElement(result[key])) {\n          result[key] = extend(result[key], replacement[key]);\n        } else {\n          result[key] = result[key] || replacement[key];\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Helper function for normalizing tolerance option to object format\n   */\n  function normalizeTolerance(t) {\n    return t === Object(t) ? t : { down: t, up: t };\n  }\n\n  /**\n   * UI enhancement for fixed headers.\n   * Hides header when scrolling down\n   * Shows header when scrolling up\n   * @constructor\n   * @param {DOMElement} elem the header element\n   * @param {Object} options options for the widget\n   */\n  function Headroom(elem, options) {\n    options = extend(options, Headroom.options);\n\n    this.lastKnownScrollY = 0;\n    this.elem = elem;\n    this.tolerance = normalizeTolerance(options.tolerance);\n    this.classes = options.classes;\n    this.offset = options.offset;\n    this.scroller = options.scroller;\n    this.initialised = false;\n    this.onPin = options.onPin;\n    this.onUnpin = options.onUnpin;\n    this.onTop = options.onTop;\n    this.onNotTop = options.onNotTop;\n    this.onBottom = options.onBottom;\n    this.onNotBottom = options.onNotBottom;\n  }\n  Headroom.prototype = {\n    constructor: Headroom,\n\n    /**\n     * Initialises the widget\n     */\n    init: function init() {\n      if (!Headroom.cutsTheMustard) {\n        return;\n      }\n\n      this.debouncer = new Debouncer(this.update.bind(this));\n      this.elem.classList.add(this.classes.initial);\n\n      // defer event registration to handle browser \n      // potentially restoring previous scroll position\n      setTimeout(this.attachEvent.bind(this), 100);\n\n      return this;\n    },\n\n    /**\n     * Unattaches events and removes any classes that were added\n     */\n    destroy: function destroy() {\n      var classes = this.classes;\n\n      this.initialised = false;\n      this.elem.classList.remove(classes.unpinned, classes.pinned, classes.top, classes.notTop, classes.initial);\n      this.scroller.removeEventListener('scroll', this.debouncer, false);\n    },\n\n    /**\n     * Attaches the scroll event\n     * @private\n     */\n    attachEvent: function attachEvent() {\n      if (!this.initialised) {\n        this.lastKnownScrollY = this.getScrollY();\n        this.initialised = true;\n        this.scroller.addEventListener('scroll', this.debouncer, false);\n\n        this.debouncer.handleEvent();\n      }\n    },\n\n    /**\n     * Unpins the header if it's currently pinned\n     */\n    unpin: function unpin() {\n      var classList = this.elem.classList,\n          classes = this.classes;\n\n      if (classList.contains(classes.pinned) || !classList.contains(classes.unpinned)) {\n        classList.add(classes.unpinned);\n        classList.remove(classes.pinned);\n        this.onUnpin && this.onUnpin.call(this);\n      }\n    },\n\n    /**\n     * Pins the header if it's currently unpinned\n     */\n    pin: function pin() {\n      var classList = this.elem.classList,\n          classes = this.classes;\n\n      if (classList.contains(classes.unpinned)) {\n        classList.remove(classes.unpinned);\n        classList.add(classes.pinned);\n        this.onPin && this.onPin.call(this);\n      }\n    },\n\n    /**\n     * Handles the top states\n     */\n    top: function top() {\n      var classList = this.elem.classList,\n          classes = this.classes;\n\n      if (!classList.contains(classes.top)) {\n        classList.add(classes.top);\n        classList.remove(classes.notTop);\n        this.onTop && this.onTop.call(this);\n      }\n    },\n\n    /**\n     * Handles the not top state\n     */\n    notTop: function notTop() {\n      var classList = this.elem.classList,\n          classes = this.classes;\n\n      if (!classList.contains(classes.notTop)) {\n        classList.add(classes.notTop);\n        classList.remove(classes.top);\n        this.onNotTop && this.onNotTop.call(this);\n      }\n    },\n\n    bottom: function bottom() {\n      var classList = this.elem.classList,\n          classes = this.classes;\n\n      if (!classList.contains(classes.bottom)) {\n        classList.add(classes.bottom);\n        classList.remove(classes.notBottom);\n        this.onBottom && this.onBottom.call(this);\n      }\n    },\n\n    /**\n     * Handles the not top state\n     */\n    notBottom: function notBottom() {\n      var classList = this.elem.classList,\n          classes = this.classes;\n\n      if (!classList.contains(classes.notBottom)) {\n        classList.add(classes.notBottom);\n        classList.remove(classes.bottom);\n        this.onNotBottom && this.onNotBottom.call(this);\n      }\n    },\n\n    /**\n     * Gets the Y scroll position\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Window.scrollY\n     * @return {Number} pixels the page has scrolled along the Y-axis\n     */\n    getScrollY: function getScrollY() {\n      return this.scroller.pageYOffset !== undefined ? this.scroller.pageYOffset : this.scroller.scrollTop !== undefined ? this.scroller.scrollTop : (document.documentElement || document.body.parentNode || document.body).scrollTop;\n    },\n\n    /**\n     * Gets the height of the viewport\n     * @see http://andylangton.co.uk/blog/development/get-viewport-size-width-and-height-javascript\n     * @return {int} the height of the viewport in pixels\n     */\n    getViewportHeight: function getViewportHeight() {\n      return window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n    },\n\n    /**\n     * Gets the physical height of the DOM element\n     * @param  {Object}  elm the element to calculate the physical height of which\n     * @return {int}     the physical height of the element in pixels\n     */\n    getElementPhysicalHeight: function getElementPhysicalHeight(elm) {\n      return Math.max(elm.offsetHeight, elm.clientHeight);\n    },\n\n    /**\n     * Gets the physical height of the scroller element\n     * @return {int} the physical height of the scroller element in pixels\n     */\n    getScrollerPhysicalHeight: function getScrollerPhysicalHeight() {\n      return this.scroller === window || this.scroller === document.body ? this.getViewportHeight() : this.getElementPhysicalHeight(this.scroller);\n    },\n\n    /**\n     * Gets the height of the document\n     * @see http://james.padolsey.com/javascript/get-document-height-cross-browser/\n     * @return {int} the height of the document in pixels\n     */\n    getDocumentHeight: function getDocumentHeight() {\n      var body = document.body,\n          documentElement = document.documentElement;\n\n      return Math.max(body.scrollHeight, documentElement.scrollHeight, body.offsetHeight, documentElement.offsetHeight, body.clientHeight, documentElement.clientHeight);\n    },\n\n    /**\n     * Gets the height of the DOM element\n     * @param  {Object}  elm the element to calculate the height of which\n     * @return {int}     the height of the element in pixels\n     */\n    getElementHeight: function getElementHeight(elm) {\n      return Math.max(elm.scrollHeight, elm.offsetHeight, elm.clientHeight);\n    },\n\n    /**\n     * Gets the height of the scroller element\n     * @return {int} the height of the scroller element in pixels\n     */\n    getScrollerHeight: function getScrollerHeight() {\n      return this.scroller === window || this.scroller === document.body ? this.getDocumentHeight() : this.getElementHeight(this.scroller);\n    },\n\n    /**\n     * determines if the scroll position is outside of document boundaries\n     * @param  {int}  currentScrollY the current y scroll position\n     * @return {bool} true if out of bounds, false otherwise\n     */\n    isOutOfBounds: function isOutOfBounds(currentScrollY) {\n      var pastTop = currentScrollY < 0,\n          pastBottom = currentScrollY + this.getScrollerPhysicalHeight() > this.getScrollerHeight();\n\n      return pastTop || pastBottom;\n    },\n\n    /**\n     * determines if the tolerance has been exceeded\n     * @param  {int} currentScrollY the current scroll y position\n     * @return {bool} true if tolerance exceeded, false otherwise\n     */\n    toleranceExceeded: function toleranceExceeded(currentScrollY, direction) {\n      return Math.abs(currentScrollY - this.lastKnownScrollY) >= this.tolerance[direction];\n    },\n\n    /**\n     * determine if it is appropriate to unpin\n     * @param  {int} currentScrollY the current y scroll position\n     * @param  {bool} toleranceExceeded has the tolerance been exceeded?\n     * @return {bool} true if should unpin, false otherwise\n     */\n    shouldUnpin: function shouldUnpin(currentScrollY, toleranceExceeded) {\n      var scrollingDown = currentScrollY > this.lastKnownScrollY,\n          pastOffset = currentScrollY >= this.offset;\n\n      return scrollingDown && pastOffset && toleranceExceeded;\n    },\n\n    /**\n     * determine if it is appropriate to pin\n     * @param  {int} currentScrollY the current y scroll position\n     * @param  {bool} toleranceExceeded has the tolerance been exceeded?\n     * @return {bool} true if should pin, false otherwise\n     */\n    shouldPin: function shouldPin(currentScrollY, toleranceExceeded) {\n      var scrollingUp = currentScrollY < this.lastKnownScrollY,\n          pastOffset = currentScrollY <= this.offset;\n\n      return scrollingUp && toleranceExceeded || pastOffset;\n    },\n\n    /**\n     * Handles updating the state of the widget\n     */\n    update: function update() {\n      var currentScrollY = this.getScrollY(),\n          scrollDirection = currentScrollY > this.lastKnownScrollY ? 'down' : 'up',\n          toleranceExceeded = this.toleranceExceeded(currentScrollY, scrollDirection);\n\n      if (this.isOutOfBounds(currentScrollY)) {\n        // Ignore bouncy scrolling in OSX\n        return;\n      }\n\n      if (currentScrollY <= this.offset) {\n        this.top();\n      } else {\n        this.notTop();\n      }\n\n      if (currentScrollY + this.getViewportHeight() >= this.getScrollerHeight()) {\n        this.bottom();\n      } else {\n        this.notBottom();\n      }\n\n      if (this.shouldUnpin(currentScrollY, toleranceExceeded)) {\n        this.unpin();\n      } else if (this.shouldPin(currentScrollY, toleranceExceeded)) {\n        this.pin();\n      }\n\n      this.lastKnownScrollY = currentScrollY;\n    }\n  };\n  /**\n   * Default options\n   * @type {Object}\n   */\n  Headroom.options = {\n    tolerance: {\n      up: 0,\n      down: 0\n    },\n    offset: 0,\n    scroller: window,\n    classes: {\n      pinned: 'headroom--pinned',\n      unpinned: 'headroom--unpinned',\n      top: 'headroom--top',\n      notTop: 'headroom--not-top',\n      bottom: 'headroom--bottom',\n      notBottom: 'headroom--not-bottom',\n      initial: 'headroom'\n    }\n  };\n  Headroom.cutsTheMustard = typeof features !== 'undefined' && features.rAF && features.bind && features.classList;\n\n  return Headroom;\n});\n\n},{}]},{},[1])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"],"sourceRoot":"/source/"}